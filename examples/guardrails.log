{"prompt_params": {"opp_type": "giant"}, "action_status": "started", "timestamp": 1680173153.2649221, "task_uuid": "26c633f5-5022-4648-afba-58207911b45e", "action_type": "guard_call", "task_level": [1]}
{"reason": "module 'numpy' has no attribute 'bool'", "exception": "builtins.AttributeError", "message": "{\"'prompt'\": 'Prompt(\\nYou are a human in an enchanted forest. You come ...)', \"'api'\": \"PromptCallable(fn=functools.partial(<function openai_wrapper at 0x7f8b90a49af0>, engine='text-davinci-003', max_tokens=256, temperature=0.0))\", \"'input_schema'\": 'InputSchema({})', \"'output_schema'\": \"OutputSchema({'action': Choice({'fight': Case({'weapon': String({})}), 'flight': Case({'flight': Object({'flight_direction': String({}), 'distance': Integer({})})})})})\", \"'num_reasks'\": '1', \"'action_status'\": \"'started'\", \"'timestamp'\": '1680173153.265365', \"'task_uuid'\": \"'26c633f5-5022-4648-afba-58207911b45e'\", \"'action_type'\": \"'run'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1680173153.266156, "task_uuid": "26c633f5-5022-4648-afba-58207911b45e", "task_level": [3], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'", "exception": "builtins.AttributeError", "message": "{\"'index'\": '0', \"'prompt'\": 'Prompt(\\nYou are a human in an enchanted forest. You come ...)', \"'prompt_params'\": \"{'opp_type': 'giant'}\", \"'input_schema'\": 'InputSchema({})', \"'output_schema'\": \"OutputSchema({'action': Choice({'fight': Case({'weapon': String({})}), 'flight': Case({'flight': Object({'flight_direction': String({}), 'distance': Integer({})})})})})\", \"'action_status'\": \"'started'\", \"'timestamp'\": '1680173153.2663019', \"'task_uuid'\": \"'26c633f5-5022-4648-afba-58207911b45e'\", \"'action_type'\": \"'step'\", \"'task_level'\": '[2, 2, 1]'}", "timestamp": 1680173153.266541, "task_uuid": "26c633f5-5022-4648-afba-58207911b45e", "task_level": [2, 3], "message_type": "eliot:destination_failure"}
{"index": 0, "action_status": "started", "timestamp": 1680173153.266727, "task_uuid": "26c633f5-5022-4648-afba-58207911b45e", "action_type": "prepare", "task_level": [2, 2, 2, 1]}
{"prompt": "\nYou are a human in an enchanted forest. You come across opponents of different types, and you should fight smaller opponents and run away from bigger ones.\n\nYou run into a giant. What do you do?\n\n\nGiven below is XML that describes the information to extract from this document and the tags to extract it into.\n\n<output>\n    <string name=\"action\" choices=\"fight,flight\"/>\n    <string name=\"fight\" format=\"valid-choices: choices=['crossbow', 'machine gun']\" description=\"weapon\" if=\"action==fight\"/>\n    <object name=\"flight\" description=\"flight\" if=\"action==flight\">\n        <string name=\"flight_direction\" format=\"valid-choices: choices=['north', 'south', 'east', 'west']\"/>\n        <integer name=\"distance\" format=\"valid-choices: choices=[1, 2, 3, 4]\"/>\n    </object>\n</output>\n\n\nONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. requests for lists, objects and specific types. Be correct and concise.\n\nHere are examples of simple (XML, JSON) pairs that show the expected behavior:\n- `<string name='foo' format='two-words lower-case' />` => `{'foo': 'example one'}`\n- `<list name='bar'><string format='upper-case' /></list>` => `{\"bar\": ['STRING ONE', 'STRING TWO', etc.]}`\n- `<object name='baz'><string name=\"foo\" format=\"capitalize two-words\" /><integer name=\"index\" format=\"1-indexed\" /></object>` => `{'baz': {'foo': 'Some String', 'index': 1}}`\n\nJSON Object:", "prompt_params": {"opp_type": "giant"}, "validated_prompt_params": {"opp_type": "giant"}, "timestamp": 1680173153.2674649, "task_uuid": "26c633f5-5022-4648-afba-58207911b45e", "task_level": [2, 2, 2, 2], "message_type": "info"}
{"action_status": "succeeded", "timestamp": 1680173153.267756, "task_uuid": "26c633f5-5022-4648-afba-58207911b45e", "action_type": "prepare", "task_level": [2, 2, 2, 3]}
{"index": 0, "prompt": "\nYou are a human in an enchanted forest. You come across opponents of different types, and you should fight smaller opponents and run away from bigger ones.\n\nYou run into a giant. What do you do?\n\n\nGiven below is XML that describes the information to extract from this document and the tags to extract it into.\n\n<output>\n    <string name=\"action\" choices=\"fight,flight\"/>\n    <string name=\"fight\" format=\"valid-choices: choices=['crossbow', 'machine gun']\" description=\"weapon\" if=\"action==fight\"/>\n    <object name=\"flight\" description=\"flight\" if=\"action==flight\">\n        <string name=\"flight_direction\" format=\"valid-choices: choices=['north', 'south', 'east', 'west']\"/>\n        <integer name=\"distance\" format=\"valid-choices: choices=[1, 2, 3, 4]\"/>\n    </object>\n</output>\n\n\nONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. requests for lists, objects and specific types. Be correct and concise.\n\nHere are examples of simple (XML, JSON) pairs that show the expected behavior:\n- `<string name='foo' format='two-words lower-case' />` => `{'foo': 'example one'}`\n- `<list name='bar'><string format='upper-case' /></list>` => `{\"bar\": ['STRING ONE', 'STRING TWO', etc.]}`\n- `<object name='baz'><string name=\"foo\" format=\"capitalize two-words\" /><integer name=\"index\" format=\"1-indexed\" /></object>` => `{'baz': {'foo': 'Some String', 'index': 1}}`\n\nJSON Object:", "action_status": "started", "timestamp": 1680173153.268032, "task_uuid": "26c633f5-5022-4648-afba-58207911b45e", "action_type": "call", "task_level": [2, 2, 3, 1]}
{"output": "\n{\"action\": \"flight\", \"flight\": {\"flight_direction\": \"north\", \"distance\": 1}}", "output_as_dict": {"action": "flight", "flight": {"flight_direction": "north", "distance": 1}}, "error": null, "timestamp": 1680173154.586179, "task_uuid": "26c633f5-5022-4648-afba-58207911b45e", "task_level": [2, 2, 3, 2], "message_type": "info"}
{"action_status": "succeeded", "timestamp": 1680173154.586314, "task_uuid": "26c633f5-5022-4648-afba-58207911b45e", "action_type": "call", "task_level": [2, 2, 3, 3]}
{"index": 0, "action_status": "started", "timestamp": 1680173154.586358, "task_uuid": "26c633f5-5022-4648-afba-58207911b45e", "action_type": "validate", "task_level": [2, 2, 4, 1]}
{"validated_output": {"action": "flight", "flight": {"flight_direction": "north", "distance": 1}}, "timestamp": 1680173154.5865119, "task_uuid": "26c633f5-5022-4648-afba-58207911b45e", "task_level": [2, 2, 4, 2], "message_type": "info"}
{"action_status": "succeeded", "timestamp": 1680173154.586658, "task_uuid": "26c633f5-5022-4648-afba-58207911b45e", "action_type": "validate", "task_level": [2, 2, 4, 3]}
{"index": 0, "action_status": "started", "timestamp": 1680173154.5866911, "task_uuid": "26c633f5-5022-4648-afba-58207911b45e", "action_type": "introspect", "task_level": [2, 2, 5, 1]}
{"reasks": [], "timestamp": 1680173154.5867252, "task_uuid": "26c633f5-5022-4648-afba-58207911b45e", "task_level": [2, 2, 5, 2], "message_type": "info"}
{"action_status": "succeeded", "timestamp": 1680173154.586744, "task_uuid": "26c633f5-5022-4648-afba-58207911b45e", "action_type": "introspect", "task_level": [2, 2, 5, 3]}
{"action_status": "succeeded", "timestamp": 1680173154.5867789, "task_uuid": "26c633f5-5022-4648-afba-58207911b45e", "action_type": "step", "task_level": [2, 2, 6]}
{"action_status": "succeeded", "timestamp": 1680173154.586797, "task_uuid": "26c633f5-5022-4648-afba-58207911b45e", "action_type": "run", "task_level": [2, 4]}
{"action_status": "succeeded", "timestamp": 1680173154.5868201, "task_uuid": "26c633f5-5022-4648-afba-58207911b45e", "action_type": "guard_call", "task_level": [4]}
{"prompt_params": {"opp_type": "goblin"}, "action_status": "started", "timestamp": 1680173158.692766, "task_uuid": "0485e8e6-ea82-45f8-81c4-388b3fec3327", "action_type": "guard_call", "task_level": [1]}
{"reason": "module 'numpy' has no attribute 'bool'", "exception": "builtins.AttributeError", "message": "{\"'prompt'\": 'Prompt(\\nYou are a human in an enchanted forest. You come ...)', \"'api'\": \"PromptCallable(fn=functools.partial(<function openai_wrapper at 0x7f8b90a49af0>, engine='text-davinci-003', max_tokens=256, temperature=0.0))\", \"'input_schema'\": 'InputSchema({})', \"'output_schema'\": \"OutputSchema({'action': Choice({'fight': Case({'weapon': String({})}), 'flight': Case({'flight': Object({'flight_direction': String({}), 'distance': Integer({})})})})})\", \"'num_reasks'\": '1', \"'action_status'\": \"'started'\", \"'timestamp'\": '1680173158.692866', \"'task_uuid'\": \"'0485e8e6-ea82-45f8-81c4-388b3fec3327'\", \"'action_type'\": \"'run'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1680173158.693003, "task_uuid": "0485e8e6-ea82-45f8-81c4-388b3fec3327", "task_level": [3], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'", "exception": "builtins.AttributeError", "message": "{\"'index'\": '0', \"'prompt'\": 'Prompt(\\nYou are a human in an enchanted forest. You come ...)', \"'prompt_params'\": \"{'opp_type': 'goblin'}\", \"'input_schema'\": 'InputSchema({})', \"'output_schema'\": \"OutputSchema({'action': Choice({'fight': Case({'weapon': String({})}), 'flight': Case({'flight': Object({'flight_direction': String({}), 'distance': Integer({})})})})})\", \"'action_status'\": \"'started'\", \"'timestamp'\": '1680173158.693061', \"'task_uuid'\": \"'0485e8e6-ea82-45f8-81c4-388b3fec3327'\", \"'action_type'\": \"'step'\", \"'task_level'\": '[2, 2, 1]'}", "timestamp": 1680173158.693183, "task_uuid": "0485e8e6-ea82-45f8-81c4-388b3fec3327", "task_level": [2, 3], "message_type": "eliot:destination_failure"}
{"index": 0, "action_status": "started", "timestamp": 1680173158.6935391, "task_uuid": "0485e8e6-ea82-45f8-81c4-388b3fec3327", "action_type": "prepare", "task_level": [2, 2, 2, 1]}
{"prompt": "\nYou are a human in an enchanted forest. You come across opponents of different types, and you should fight smaller opponents and run away from bigger ones.\n\nYou run into a goblin. What do you do?\n\n\nGiven below is XML that describes the information to extract from this document and the tags to extract it into.\n\n<output>\n    <string name=\"action\" choices=\"fight,flight\"/>\n    <string name=\"fight\" format=\"valid-choices: choices=['crossbow', 'machine gun']\" description=\"weapon\" if=\"action==fight\"/>\n    <object name=\"flight\" description=\"flight\" if=\"action==flight\">\n        <string name=\"flight_direction\" format=\"valid-choices: choices=['north', 'south', 'east', 'west']\"/>\n        <integer name=\"distance\" format=\"valid-choices: choices=[1, 2, 3, 4]\"/>\n    </object>\n</output>\n\n\nONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. requests for lists, objects and specific types. Be correct and concise.\n\nHere are examples of simple (XML, JSON) pairs that show the expected behavior:\n- `<string name='foo' format='two-words lower-case' />` => `{'foo': 'example one'}`\n- `<list name='bar'><string format='upper-case' /></list>` => `{\"bar\": ['STRING ONE', 'STRING TWO', etc.]}`\n- `<object name='baz'><string name=\"foo\" format=\"capitalize two-words\" /><integer name=\"index\" format=\"1-indexed\" /></object>` => `{'baz': {'foo': 'Some String', 'index': 1}}`\n\nJSON Object:", "prompt_params": {"opp_type": "goblin"}, "validated_prompt_params": {"opp_type": "goblin"}, "timestamp": 1680173158.693614, "task_uuid": "0485e8e6-ea82-45f8-81c4-388b3fec3327", "task_level": [2, 2, 2, 2], "message_type": "info"}
{"action_status": "succeeded", "timestamp": 1680173158.693677, "task_uuid": "0485e8e6-ea82-45f8-81c4-388b3fec3327", "action_type": "prepare", "task_level": [2, 2, 2, 3]}
{"index": 0, "prompt": "\nYou are a human in an enchanted forest. You come across opponents of different types, and you should fight smaller opponents and run away from bigger ones.\n\nYou run into a goblin. What do you do?\n\n\nGiven below is XML that describes the information to extract from this document and the tags to extract it into.\n\n<output>\n    <string name=\"action\" choices=\"fight,flight\"/>\n    <string name=\"fight\" format=\"valid-choices: choices=['crossbow', 'machine gun']\" description=\"weapon\" if=\"action==fight\"/>\n    <object name=\"flight\" description=\"flight\" if=\"action==flight\">\n        <string name=\"flight_direction\" format=\"valid-choices: choices=['north', 'south', 'east', 'west']\"/>\n        <integer name=\"distance\" format=\"valid-choices: choices=[1, 2, 3, 4]\"/>\n    </object>\n</output>\n\n\nONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. requests for lists, objects and specific types. Be correct and concise.\n\nHere are examples of simple (XML, JSON) pairs that show the expected behavior:\n- `<string name='foo' format='two-words lower-case' />` => `{'foo': 'example one'}`\n- `<list name='bar'><string format='upper-case' /></list>` => `{\"bar\": ['STRING ONE', 'STRING TWO', etc.]}`\n- `<object name='baz'><string name=\"foo\" format=\"capitalize two-words\" /><integer name=\"index\" format=\"1-indexed\" /></object>` => `{'baz': {'foo': 'Some String', 'index': 1}}`\n\nJSON Object:", "action_status": "started", "timestamp": 1680173158.693942, "task_uuid": "0485e8e6-ea82-45f8-81c4-388b3fec3327", "action_type": "call", "task_level": [2, 2, 3, 1]}
{"output": "\n{\"action\": \"fight\", \"fight\": \"crossbow\", \"flight\": {\"flight_direction\": \"north\", \"distance\": 1}}", "output_as_dict": {"action": "fight", "fight": "crossbow", "flight": {"flight_direction": "north", "distance": 1}}, "error": null, "timestamp": 1680173160.214475, "task_uuid": "0485e8e6-ea82-45f8-81c4-388b3fec3327", "task_level": [2, 2, 3, 2], "message_type": "info"}
{"action_status": "succeeded", "timestamp": 1680173160.214713, "task_uuid": "0485e8e6-ea82-45f8-81c4-388b3fec3327", "action_type": "call", "task_level": [2, 2, 3, 3]}
{"index": 0, "action_status": "started", "timestamp": 1680173160.2148008, "task_uuid": "0485e8e6-ea82-45f8-81c4-388b3fec3327", "action_type": "validate", "task_level": [2, 2, 4, 1]}
{"validated_output": {"action": "fight", "fight": "crossbow", "flight": {"flight_direction": "north", "distance": 1}}, "timestamp": 1680173160.215064, "task_uuid": "0485e8e6-ea82-45f8-81c4-388b3fec3327", "task_level": [2, 2, 4, 2], "message_type": "info"}
{"action_status": "succeeded", "timestamp": 1680173160.215148, "task_uuid": "0485e8e6-ea82-45f8-81c4-388b3fec3327", "action_type": "validate", "task_level": [2, 2, 4, 3]}
{"index": 0, "action_status": "started", "timestamp": 1680173160.215211, "task_uuid": "0485e8e6-ea82-45f8-81c4-388b3fec3327", "action_type": "introspect", "task_level": [2, 2, 5, 1]}
{"reasks": [], "timestamp": 1680173160.215318, "task_uuid": "0485e8e6-ea82-45f8-81c4-388b3fec3327", "task_level": [2, 2, 5, 2], "message_type": "info"}
{"action_status": "succeeded", "timestamp": 1680173160.215381, "task_uuid": "0485e8e6-ea82-45f8-81c4-388b3fec3327", "action_type": "introspect", "task_level": [2, 2, 5, 3]}
{"action_status": "succeeded", "timestamp": 1680173160.215471, "task_uuid": "0485e8e6-ea82-45f8-81c4-388b3fec3327", "action_type": "step", "task_level": [2, 2, 6]}
{"action_status": "succeeded", "timestamp": 1680173160.2155259, "task_uuid": "0485e8e6-ea82-45f8-81c4-388b3fec3327", "action_type": "run", "task_level": [2, 4]}
{"action_status": "succeeded", "timestamp": 1680173160.215578, "task_uuid": "0485e8e6-ea82-45f8-81c4-388b3fec3327", "action_type": "guard_call", "task_level": [4]}
