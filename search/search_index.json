{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Guardrails.ai Note: Guardrails is an alpha release, so expect sharp edges and bugs. \ud83d\udee4\ufe0f What is Guardrails? Guardrails is a Python package that lets a user add structure, type and quality guarantees to the outputs of large language models (LLMs). Guardrails: does pydantic-style validation of LLM outputs. This includes semantic validation such as checking for bias in generated text, checking for bugs in generated code, etc. takes corrective actions (e.g. reasking LLM) when validation fails, enforces structure and type guarantees (e.g. JSON). \ud83d\ude92 Under the hood Guardrails provides a format ( .rail ) for enforcing a specification on an LLM output, and a lightweight wrapper around LLM API calls to implement this spec. rail ( R eliable AI markup L anguage) files for specifying structure and type information, validators and corrective actions over LLM outputs. gd.Guard wraps around LLM API calls to structure, validate and correct the outputs. graph LR A[Create `RAIL` spec] --> B[\"Initialize `guard` from spec\"]; B --> C[\"Wrap LLM API call with `guard`\"]; Check out the Getting Started guide to learn how to use Guardrails. \ud83d\udcdc RAIL spec At the heart of Guardrails is the rail spec. rail is intended to be a language-agnostic, human-readable format for specifying structure and type information, validators and corrective actions over LLM outputs. rail is a flavor of XML that lets users specify: The expected structure and types of the LLM output (e.g. JSON), The quality criteria for the output to be considered valid (e.g. generated text should be bias-free, generated code should be bug-free), Corrective actions to be taken if the output is invalid (e.g. reask the LLM, filter out the invalid output, etc.) To learn more about the rail spec and the design decisions behind it, check out the Rail Specification . To learn how to write your own rail spec, check out specifying output elements in RAIL . \ud83d\udccd Roadmap Adding more examples, new use cases and domains Adding integrations with langchain, gpt-index, minichain, manifest Expanding validators offering More compilers from .rail -> LLM prompt (e.g. .rail -> TypeScript) Informative logging Improving reasking logic A guardrails.js implementation VSCode extension for .rail files Next version of .rail format Add more LLM providers","title":"Home"},{"location":"#guardrailsai","text":"Note: Guardrails is an alpha release, so expect sharp edges and bugs.","title":"Guardrails.ai"},{"location":"#what-is-guardrails","text":"Guardrails is a Python package that lets a user add structure, type and quality guarantees to the outputs of large language models (LLMs). Guardrails: does pydantic-style validation of LLM outputs. This includes semantic validation such as checking for bias in generated text, checking for bugs in generated code, etc. takes corrective actions (e.g. reasking LLM) when validation fails, enforces structure and type guarantees (e.g. JSON).","title":"\ud83d\udee4\ufe0f What is Guardrails?"},{"location":"#under-the-hood","text":"Guardrails provides a format ( .rail ) for enforcing a specification on an LLM output, and a lightweight wrapper around LLM API calls to implement this spec. rail ( R eliable AI markup L anguage) files for specifying structure and type information, validators and corrective actions over LLM outputs. gd.Guard wraps around LLM API calls to structure, validate and correct the outputs. graph LR A[Create `RAIL` spec] --> B[\"Initialize `guard` from spec\"]; B --> C[\"Wrap LLM API call with `guard`\"]; Check out the Getting Started guide to learn how to use Guardrails.","title":"\ud83d\ude92 Under the hood"},{"location":"#rail-spec","text":"At the heart of Guardrails is the rail spec. rail is intended to be a language-agnostic, human-readable format for specifying structure and type information, validators and corrective actions over LLM outputs. rail is a flavor of XML that lets users specify: The expected structure and types of the LLM output (e.g. JSON), The quality criteria for the output to be considered valid (e.g. generated text should be bias-free, generated code should be bug-free), Corrective actions to be taken if the output is invalid (e.g. reask the LLM, filter out the invalid output, etc.) To learn more about the rail spec and the design decisions behind it, check out the Rail Specification . To learn how to write your own rail spec, check out specifying output elements in RAIL .","title":"\ud83d\udcdc RAIL spec"},{"location":"#roadmap","text":"Adding more examples, new use cases and domains Adding integrations with langchain, gpt-index, minichain, manifest Expanding validators offering More compilers from .rail -> LLM prompt (e.g. .rail -> TypeScript) Informative logging Improving reasking logic A guardrails.js implementation VSCode extension for .rail files Next version of .rail format Add more LLM providers","title":"\ud83d\udccd Roadmap"},{"location":"cli/","text":"Using Guardrails from a CLI Guardrails can be used from the command line to validate the output of an LLM. Currently, the guardrails CLI doesn't support reasking. Usage guardrails validate <path to rail spec> <llm output as string> --out <output path for validated JSON>","title":"Guardrails CLI"},{"location":"cli/#using-guardrails-from-a-cli","text":"Guardrails can be used from the command line to validate the output of an LLM. Currently, the guardrails CLI doesn't support reasking.","title":"Using Guardrails from a CLI"},{"location":"cli/#usage","text":"guardrails validate <path to rail spec> <llm output as string> --out <output path for validated JSON>","title":"Usage"},{"location":"data_types/","text":"Boolean Bases: ScalarType Element tag: <bool> Case ( children , format_attr , element ) Bases: NonScalarType Element tag: <case> Choice ( children , format_attr , element ) Bases: NonScalarType Element tag: <object> Date ( children , format_attr , element ) Bases: ScalarType Element tag: <date> To configure the date format, create a date-format attribute on the element. E.g. <date name=\"...\" ... date-format=\"%Y-%m-%d\" /> date_format = '%Y-%m- %d ' instance-attribute Email Bases: ScalarType Element tag: <email> Field Bases: ScalarType Element tag: <field> Float Bases: ScalarType Element tag: <float> Integer Bases: ScalarType Element tag: <integer> List Bases: NonScalarType Element tag: <list> Object Bases: NonScalarType Element tag: <object> Percentage Bases: ScalarType Element tag: <percentage> Pydantic ( model , children , format_attr , element ) Bases: NonScalarType Element tag: <pydantic> PythonCode Bases: ScalarType Element tag: <pythoncode> SQLCode Bases: ScalarType Element tag: <sql> String Bases: ScalarType Element tag: <string> Time ( children , format_attr , element ) Bases: ScalarType Element tag: <time> To configure the date format, create a date-format attribute on the element. E.g. <time name=\"...\" ... time-format=\"%H:%M:%S\" /> time_format = '%H:%M:%S' instance-attribute URL Bases: ScalarType Element tag: <url>","title":"Data Types"},{"location":"data_types/#guardrails.datatypes.Boolean","text":"Bases: ScalarType Element tag: <bool>","title":"Boolean"},{"location":"data_types/#guardrails.datatypes.Case","text":"Bases: NonScalarType Element tag: <case>","title":"Case"},{"location":"data_types/#guardrails.datatypes.Choice","text":"Bases: NonScalarType Element tag: <object>","title":"Choice"},{"location":"data_types/#guardrails.datatypes.Date","text":"Bases: ScalarType Element tag: <date> To configure the date format, create a date-format attribute on the element. E.g. <date name=\"...\" ... date-format=\"%Y-%m-%d\" />","title":"Date"},{"location":"data_types/#guardrails.datatypes.Date.date_format","text":"","title":"date_format"},{"location":"data_types/#guardrails.datatypes.Email","text":"Bases: ScalarType Element tag: <email>","title":"Email"},{"location":"data_types/#guardrails.datatypes.Field","text":"Bases: ScalarType Element tag: <field>","title":"Field"},{"location":"data_types/#guardrails.datatypes.Float","text":"Bases: ScalarType Element tag: <float>","title":"Float"},{"location":"data_types/#guardrails.datatypes.Integer","text":"Bases: ScalarType Element tag: <integer>","title":"Integer"},{"location":"data_types/#guardrails.datatypes.List","text":"Bases: NonScalarType Element tag: <list>","title":"List"},{"location":"data_types/#guardrails.datatypes.Object","text":"Bases: NonScalarType Element tag: <object>","title":"Object"},{"location":"data_types/#guardrails.datatypes.Percentage","text":"Bases: ScalarType Element tag: <percentage>","title":"Percentage"},{"location":"data_types/#guardrails.datatypes.Pydantic","text":"Bases: NonScalarType Element tag: <pydantic>","title":"Pydantic"},{"location":"data_types/#guardrails.datatypes.PythonCode","text":"Bases: ScalarType Element tag: <pythoncode>","title":"PythonCode"},{"location":"data_types/#guardrails.datatypes.SQLCode","text":"Bases: ScalarType Element tag: <sql>","title":"SQLCode"},{"location":"data_types/#guardrails.datatypes.String","text":"Bases: ScalarType Element tag: <string>","title":"String"},{"location":"data_types/#guardrails.datatypes.Time","text":"Bases: ScalarType Element tag: <time> To configure the date format, create a date-format attribute on the element. E.g. <time name=\"...\" ... time-format=\"%H:%M:%S\" />","title":"Time"},{"location":"data_types/#guardrails.datatypes.Time.time_format","text":"","title":"time_format"},{"location":"data_types/#guardrails.datatypes.URL","text":"Bases: ScalarType Element tag: <url>","title":"URL"},{"location":"getting_started/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Getting Started In this notebook, we will go through the basics of creating a RAIL spec and using Guardrails to enforce it. Objective Our goal is to extract detailed patient information from a medical record. We will use a simple example to demonstrate how Guardrails can be used to enforce a RAIL spec. As an example, we will use the following medical record: doctors_notes = \"\"\"49 y/o Male with chronic macular rash to face & hair, worse in beard, eyebrows & nares. Itchy, flaky, slightly scaly. Moderate response to OTC steroid cream\"\"\" We want our extracted information to contain the following fields: Patient's gender Patient's age A list of symptoms, each with a severity rating and an affected area A list of medications, each with information about the patient's response to the medication Installation To get started, install the guardrails package with pip . ! pip install guardrails - ai Creating an RAIL spec At the heart of Guardrails is the RAIL spec. RAIL a flavor of XML (standing for R eliable AI markup L anguage) that describes the expected structure and type of the output of the LLM, the quality criteria for the output to be valid and corrective actions to be taken if the output is invalid. A RAIL spec is composed of 3 main components: Output schema Prompt (Optional) Script Output schema We start by creating the output schema. The output schema is a RAIL spec that describes the expected structure and type of the output of the LLM. Specifying structure As mentioned earlier, we want our extracted information to contain the following fields: gender, age, symptoms, and medications. Using RAIL , we can create fairly complex output schemas. For example, we can specify that a field is a list of objects, etc. We see an example of this below. RAIL Spec Output JSON <object name= \"patient_info\" > <string name= \"gender\" description= \"Patient's gender\" /> <integer name= \"age\" /> <list name= \"symptoms\" description= \"Symptoms that the patient is currently experiencing. Each symptom should be classified into separate item in the list.\" > <object> <string name= \"symptom\" description= \"Symptom that a patient is experiencing\" /> <string name= \"affected area\" description= \"What part of the body the symptom is affecting\" /> </object> </list> <list name= \"current_meds\" description= \"Medications the patient is currently taking and their response\" > <object> <string name= \"medication\" description= \"Name of the medication the patient is taking\" /> <string name= \"response\" description= \"How the patient is responding to the medication\" /> </object> </list> </object> { \"patient_info\" : { \"gender\" : ... , \"age\" : ... , \"symptoms\" : [ { \"symptom\" : ... , \"affected area\" : ... }, ... ], \"current_meds\" : [ { \"medication\" : ... , \"response\" : ... }, ... ] } } Specifying quality criteria Next, we want to specify the quality criteria for the output to be valid and corrective actions to be taken if the output is invalid. We can do this by adding a format tag to each field in the output schema. Format tags can either be enforced by Guardrails, or they can only be suggetions to the LLM. You can see the list of validators enforced by Guardrails here . Additionally, you can create your own custom validators, see examples here 1 , 2 , 3 . As an example, for our use case we specify that the affected_area of symptoms should be one of the following: ['head', 'neck', 'chest'] . For this, we use the valid-choices validator . Specifying corrective actions Additionally, we can specify how to handle invalid output by adding a on-fail-... attribute to an element. For example, we can specify that if the affected_area of a symptom is not one of the valid choices, we should re-prompt the LLM to correct its output. We do this by adding the on-fail-valid-choices='reask' attribute to the affected_area field. To see the full list of corrective actions, see here . Finally, out updated output schema looks like: <object name= \"patient_info\" > <string name= \"gender\" description= \"Patient's gender\" /> <integer name= \"age\" format= \"valid-range: 0 100\" /> <!-- (1)! --> <list name= \"symptoms\" description= \"Symptoms that the patient is currently experiencing. Each symptom should be classified into separate item in the list.\" > <object> <string name= \"symptom\" description= \"Symptom that a patient is experiencing\" /> <string name= \"affected area\" description= \"What part of the body the symptom is affecting\" format= \"valid-choices: {['head', 'neck', 'chest']}\" on-fail-valid-choices= \"reask\" /> <!-- (2)! --> </object> </list> <list name= \"current_meds\" description= \"Medications the patient is currently taking and their response\" > <object> <string name= \"medication\" description= \"Name of the medication the patient is taking\" /> <string name= \"response\" description= \"How the patient is responding to the medication\" /> </object> </list> </object> We specify the valid-range validator for the age field. This validator takes the min and max arguments, which we pass as 0 and 100 respectively. We specify the valid-choices validator for the affected_area field. This validator will check that the value of the field is one of the choices specified in the format attribute. We specify that if the affected_area field fails the valid-choices validator, we should re-prompt the LLM to correct its output. This is done by setting the on-fail-valid-choices attribute to reask . Note In order to pass in a list of choices, we wrap the list in curly braces -- {['head', 'neck', 'chest']} . Anything inside the curly braces will be evaluated as a Python expression. This allows us to pass in more complex data structures or objects as arguments to the validator. Prompt The prompt contains high level instructions for the LLM, as well as any parameters that need to be substituted at runtime. For our use case, we create the following prompt: <prompt> Given the following doctor's notes about a patient, please extract a dictionary that contains the patient's information. <!-- (1)! --> {{doctors_notes}} <!-- (2)! --> @complete_json_suffix_v2 <!-- (3)! --> </prompt> This is the high level instructions for the LLM. This is a prompt parameter that will be substituted at runtime. We will see how to do this in the next section. This is some boilerplate text that formats helps the LLM output a valid JSON object. Guardrails will automatically add this text to the end of the LLM's output. You can see the full list of boilerplate text here . Full rail spec Putting it all together, the full rail spec for our use case looks like. You can see the full spec here . Using Guardrails to enforce the RAIL spec We use the RAIL spec to create a Guard object. The Guard object is used to wrap the LLM API call and enforce the RAIL spec on the output of the LLM call. from rich import print import guardrails as gd guard = gd . Guard . from_rail ( 'getting_started.rail' ) We can see that the Guard object compiles the RAIL output specification and adds it to the provided prompt. Next, we call the Guard object with the LLM API call as the first argument and add any additional arguments to the LLM API call as the remaining arguments. import openai import os # Set your OpenAI API key os . environ [ \"OPENAI_API_KEY\" ] = \"YOUR_OPENAI_API_KEY\" # Wrap the OpenAI API call with the `guard` object raw_llm_output , validated_output = guard ( openai . Completion . create , prompt_params = { \"doctors_notes\" : doctors_notes }, engine = \"text-davinci-003\" , max_tokens = 1024 , temperature = 0.3 , ) # Print the validated output from the LLM print ( validated_output ) /Users/shreyarajpal/anaconda3/envs/tiff-env/lib/python3.9/site-packages/eliot/json.py:22: FutureWarning: In the future `np.bool` will be defined as the corresponding NumPy scalar. (This may have returned Python scalars in past versions. if isinstance(o, (numpy.bool, numpy.bool_)): { 'patient_info' : { 'gender' : 'Male' , 'age' : 49 , 'symptoms' : [ { 'symptom' : 'macular rash' , 'affected area' : 'head' } , { 'symptom' : 'itchy, flaky, slightly scaly' , 'affected area' : 'neck' } ] , 'current_meds' : [{ 'medication' : 'OTC steroid cream' , 'response' : 'Moderate' }] } } We can see that our output was structured correctly, and that the values of the affected_area field were one of the valid choices. Inspecting logs to peek under the hood Guardrails logs all of the steps it takes to enforce the RAIL spec. We inspect these logs below to see all the steps Guardrails took to enforce the RAIL spec. Inspecting Step 1: Getting LLM output print ( guard . state . most_recent_call . history [ 0 ] . rich_group ) \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Prompt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 \u2502 \u2502 Given the following doctor's notes about a patient, please extract a dictionary that contains the patient's \u2502 \u2502 information. \u2502 \u2502 \u2502 \u2502 49 y/o Male with chronic macular rash to face & hair, worse in beard, eyebrows & nares. \u2502 \u2502 Itchy, flaky, slightly scaly. Moderate response to OTC steroid cream \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Given below is XML that describes the information to extract from this document and the tags to extract it \u2502 \u2502 into. \u2502 \u2502 \u2502 \u2502 <output> \u2502 \u2502 <object name=\"patient_info\"> \u2502 \u2502 <string name=\"gender\" description=\"Patient's gender\"/> \u2502 \u2502 <integer name=\"age\" format=\"valid-range: min=0 max=100\"/> \u2502 \u2502 <list name=\"symptoms\" description=\"Symptoms that the patient is currently experiencing. Each symptom \u2502 \u2502 should be classified into a separate item in the list.\"> \u2502 \u2502 <object> \u2502 \u2502 <string name=\"symptom\" description=\"Symptom that a patient is experiencing\"/> \u2502 \u2502 <string name=\"affected area\" description=\"What part of the body the symptom is affecting\" \u2502 \u2502 format=\"valid-choices: choices=['head', 'neck', 'chest']\"/> \u2502 \u2502 </object> \u2502 \u2502 </list> \u2502 \u2502 <list name=\"current_meds\" description=\"Medications the patient is currently taking and their response\"> \u2502 \u2502 <object> \u2502 \u2502 <string name=\"medication\" description=\"Name of the medication the patient is taking\"/> \u2502 \u2502 <string name=\"response\" description=\"How the patient is responding to the medication\"/> \u2502 \u2502 </object> \u2502 \u2502 </list> \u2502 \u2502 </object> \u2502 \u2502 </output> \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 ONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the `name` \u2502 \u2502 attribute of the corresponding XML, and the value is of the type specified by the corresponding XML's tag. The \u2502 \u2502 JSON MUST conform to the XML format, including any types and format requests e.g. requests for lists, objects \u2502 \u2502 and specific types. Be correct and concise. \u2502 \u2502 \u2502 \u2502 Here are examples of simple (XML, JSON) pairs that show the expected behavior: \u2502 \u2502 - `<string name='foo' format='two-words lower-case' />` => `{'foo': 'example one'}` \u2502 \u2502 - `<list name='bar'><string format='upper-case' /></list>` => `{\"bar\": ['STRING ONE', 'STRING TWO', etc.]}` \u2502 \u2502 - `<object name='baz'><string name=\"foo\" format=\"capitalize two-words\" /><integer name=\"index\" \u2502 \u2502 format=\"1-indexed\" /></object>` => `{'baz': {'foo': 'Some String', 'index': 1}}` \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Raw LLM Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 { \u2502 \u2502 \"patient_info\": { \u2502 \u2502 \"gender\": \"Male\", \u2502 \u2502 \"age\": 49, \u2502 \u2502 \"symptoms\": [ \u2502 \u2502 { \u2502 \u2502 \"symptom\": \"macular rash\", \u2502 \u2502 \"affected area\": \"face & hair\" \u2502 \u2502 }, \u2502 \u2502 { \u2502 \u2502 \"symptom\": \"itchy, flaky, slightly scaly\", \u2502 \u2502 \"affected area\": \"beard, eyebrows & nares\" \u2502 \u2502 } \u2502 \u2502 ], \u2502 \u2502 \"current_meds\": [ \u2502 \u2502 { \u2502 \u2502 \"medication\": \"OTC steroid cream\", \u2502 \u2502 \"response\": \"Moderate\" \u2502 \u2502 } \u2502 \u2502 ] \u2502 \u2502 } \u2502 \u2502 } \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Validated Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 { \u2502 \u2502 'patient_info': { \u2502 \u2502 'gender': 'Male', \u2502 \u2502 'age': 49, \u2502 \u2502 'symptoms': [ \u2502 \u2502 { \u2502 \u2502 'symptom': 'macular rash', \u2502 \u2502 'affected area': ReAsk( \u2502 \u2502 incorrect_value='face & hair', \u2502 \u2502 error_message=\"Value face & hair is not in choices ['head', 'neck', 'chest'].\", \u2502 \u2502 fix_value=None, \u2502 \u2502 path=['patient_info', 'symptoms', 0, 'affected area'] \u2502 \u2502 ) \u2502 \u2502 }, \u2502 \u2502 { \u2502 \u2502 'symptom': 'itchy, flaky, slightly scaly', \u2502 \u2502 'affected area': ReAsk( \u2502 \u2502 incorrect_value='beard, eyebrows & nares', \u2502 \u2502 error_message=\"Value beard, eyebrows & nares is not in choices ['head', 'neck', 'chest'].\", \u2502 \u2502 fix_value=None, \u2502 \u2502 path=['patient_info', 'symptoms', 1, 'affected area'] \u2502 \u2502 ) \u2502 \u2502 } \u2502 \u2502 ], \u2502 \u2502 'current_meds': [ \u2502 \u2502 {'medication': 'OTC steroid cream', 'response': 'Moderate'} \u2502 \u2502 ] \u2502 \u2502 } \u2502 \u2502 } \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f We can see that the output returned by the LLM contained invalid values for the affected_area field. On validation, Guardrails created ReAsk objects that contains all of the information needed to re-prompt the LLM to correct its output. Inspecting Step 2: Re-prompting LLM print ( guard . state . most_recent_call . history [ 1 ] . rich_group ) \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Prompt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 I was given the following JSON response, which had problems due to incorrect values. \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \"patient_info\": { \u2502 \u2502 \"symptoms\": [ \u2502 \u2502 { \u2502 \u2502 \"affected area\": { \u2502 \u2502 \"incorrect_value\": \"face & hair\", \u2502 \u2502 \"error_message\": \"Value face & hair is not in choices ['head', 'neck', 'chest'].\" \u2502 \u2502 } \u2502 \u2502 }, \u2502 \u2502 { \u2502 \u2502 \"affected area\": { \u2502 \u2502 \"incorrect_value\": \"beard, eyebrows & nares\", \u2502 \u2502 \"error_message\": \"Value beard, eyebrows & nares is not in choices ['head', 'neck', 'chest'].\" \u2502 \u2502 } \u2502 \u2502 } \u2502 \u2502 ] \u2502 \u2502 } \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 Help me correct the incorrect values based on the given error messages. \u2502 \u2502 \u2502 \u2502 Given below is XML that describes the information to extract from this document and the tags to extract it \u2502 \u2502 into. \u2502 \u2502 \u2502 \u2502 <output> \u2502 \u2502 <object name=\"patient_info\"> \u2502 \u2502 <list name=\"symptoms\" description=\"Symptoms that the patient is currently experiencing. Each symptom \u2502 \u2502 should be classified into a separate item in the list.\"> \u2502 \u2502 <object> \u2502 \u2502 <string name=\"affected area\" description=\"What part of the body the symptom is affecting\" \u2502 \u2502 format=\"valid-choices: choices=['head', 'neck', 'chest']\"/> \u2502 \u2502 </object> \u2502 \u2502 </list> \u2502 \u2502 </object> \u2502 \u2502 </output> \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 ONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the `name` \u2502 \u2502 attribute of the corresponding XML, and the value is of the type specified by the corresponding XML's tag. The \u2502 \u2502 JSON MUST conform to the XML format, including any types and format requests e.g. requests for lists, objects \u2502 \u2502 and specific types. Be correct and concise. If you are unsure anywhere, enter `None`. \u2502 \u2502 \u2502 \u2502 Here are examples of simple (XML, JSON) pairs that show the expected behavior: \u2502 \u2502 - `<string name='foo' format='two-words lower-case' />` => `{{'foo': 'example one'}}` \u2502 \u2502 - `<list name='bar'><string format='upper-case' /></list>` => `{{\"bar\": ['STRING ONE', 'STRING TWO', etc.]}}` \u2502 \u2502 - `<object name='baz'><string name=\"foo\" format=\"capitalize two-words\" /><integer name=\"index\" \u2502 \u2502 format=\"1-indexed\" /></object>` => `{{'baz': {{'foo': 'Some String', 'index': 1}}}}` \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Raw LLM Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 { \u2502 \u2502 \"patient_info\": { \u2502 \u2502 \"symptoms\": [ \u2502 \u2502 { \u2502 \u2502 \"affected area\": \"head\" \u2502 \u2502 }, \u2502 \u2502 { \u2502 \u2502 \"affected area\": \"neck\" \u2502 \u2502 } \u2502 \u2502 ] \u2502 \u2502 } \u2502 \u2502 } \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Validated Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 { \u2502 \u2502 'patient_info': { \u2502 \u2502 'gender': 'Male', \u2502 \u2502 'age': 49, \u2502 \u2502 'symptoms': [ \u2502 \u2502 {'symptom': 'macular rash', 'affected area': 'head'}, \u2502 \u2502 { \u2502 \u2502 'symptom': 'itchy, flaky, slightly scaly', \u2502 \u2502 'affected area': 'neck' \u2502 \u2502 } \u2502 \u2502 ], \u2502 \u2502 'current_meds': [ \u2502 \u2502 {'medication': 'OTC steroid cream', 'response': 'Moderate'} \u2502 \u2502 ] \u2502 \u2502 } \u2502 \u2502 } \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f The prompt to the LLM was fully constructed by Guardrails. Additionally, the prompt only contained the previously invalid values for the affected_area field. On receiving the corrected LLM output, Guardrails merges it with the previously invalid values to create a valid output. It then reruns the validation step to ensure that the output is valid, and returns the output to the user. Bonus: See the full history of calls Guardrails also logs the full history of calls made to the LLM. This can be useful for debugging purposes. print ( guard . state . most_recent_call . tree ) Logs \u251c\u2500\u2500 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Step 0 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Prompt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Given the following doctor's notes about a patient, please extract a dictionary that contains the \u2502 \u2502 \u2502 \u2502 \u2502 patient's information. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 49 y/o Male with chronic macular rash to face & hair, worse in beard, eyebrows & nares. \u2502 \u2502 \u2502 \u2502 \u2502 Itchy, flaky, slightly scaly. Moderate response to OTC steroid cream \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Given below is XML that describes the information to extract from this document and the tags to extract \u2502 \u2502 \u2502 \u2502 \u2502 it into. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 <output> \u2502 \u2502 \u2502 \u2502 \u2502 <object name=\"patient_info\"> \u2502 \u2502 \u2502 \u2502 \u2502 <string name=\"gender\" description=\"Patient's gender\"/> \u2502 \u2502 \u2502 \u2502 \u2502 <integer name=\"age\" format=\"valid-range: min=0 max=100\"/> \u2502 \u2502 \u2502 \u2502 \u2502 <list name=\"symptoms\" description=\"Symptoms that the patient is currently experiencing. Each \u2502 \u2502 \u2502 \u2502 \u2502 symptom should be classified into a separate item in the list.\"> \u2502 \u2502 \u2502 \u2502 \u2502 <object> \u2502 \u2502 \u2502 \u2502 \u2502 <string name=\"symptom\" description=\"Symptom that a patient is experiencing\"/> \u2502 \u2502 \u2502 \u2502 \u2502 <string name=\"affected area\" description=\"What part of the body the symptom is \u2502 \u2502 \u2502 \u2502 \u2502 affecting\" format=\"valid-choices: choices=['head', 'neck', 'chest']\"/> \u2502 \u2502 \u2502 \u2502 \u2502 </object> \u2502 \u2502 \u2502 \u2502 \u2502 </list> \u2502 \u2502 \u2502 \u2502 \u2502 <list name=\"current_meds\" description=\"Medications the patient is currently taking and their \u2502 \u2502 \u2502 \u2502 \u2502 response\"> \u2502 \u2502 \u2502 \u2502 \u2502 <object> \u2502 \u2502 \u2502 \u2502 \u2502 <string name=\"medication\" description=\"Name of the medication the patient is taking\"/> \u2502 \u2502 \u2502 \u2502 \u2502 <string name=\"response\" description=\"How the patient is responding to the medication\"/> \u2502 \u2502 \u2502 \u2502 \u2502 </object> \u2502 \u2502 \u2502 \u2502 \u2502 </list> \u2502 \u2502 \u2502 \u2502 \u2502 </object> \u2502 \u2502 \u2502 \u2502 \u2502 </output> \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 ONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the \u2502 \u2502 \u2502 \u2502 \u2502 `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding \u2502 \u2502 \u2502 \u2502 \u2502 XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. \u2502 \u2502 \u2502 \u2502 \u2502 requests for lists, objects and specific types. Be correct and concise. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Here are examples of simple (XML, JSON) pairs that show the expected behavior: \u2502 \u2502 \u2502 \u2502 \u2502 - `<string name='foo' format='two-words lower-case' />` => `{'foo': 'example one'}` \u2502 \u2502 \u2502 \u2502 \u2502 - `<list name='bar'><string format='upper-case' /></list>` => `{\"bar\": ['STRING ONE', 'STRING TWO', \u2502 \u2502 \u2502 \u2502 \u2502 etc.]}` \u2502 \u2502 \u2502 \u2502 \u2502 - `<object name='baz'><string name=\"foo\" format=\"capitalize two-words\" /><integer name=\"index\" \u2502 \u2502 \u2502 \u2502 \u2502 format=\"1-indexed\" /></object>` => `{'baz': {'foo': 'Some String', 'index': 1}}` \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Raw LLM Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 \"patient_info\": { \u2502 \u2502 \u2502 \u2502 \u2502 \"gender\": \"Male\", \u2502 \u2502 \u2502 \u2502 \u2502 \"age\": 49, \u2502 \u2502 \u2502 \u2502 \u2502 \"symptoms\": [ \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 \"symptom\": \"macular rash\", \u2502 \u2502 \u2502 \u2502 \u2502 \"affected area\": \"face & hair\" \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 \"symptom\": \"itchy, flaky, slightly scaly\", \u2502 \u2502 \u2502 \u2502 \u2502 \"affected area\": \"beard, eyebrows & nares\" \u2502 \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 \u2502 ], \u2502 \u2502 \u2502 \u2502 \u2502 \"current_meds\": [ \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 \"medication\": \"OTC steroid cream\", \u2502 \u2502 \u2502 \u2502 \u2502 \"response\": \"Moderate\" \u2502 \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 \u2502 ] \u2502 \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Validated Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 'patient_info': { \u2502 \u2502 \u2502 \u2502 \u2502 'gender': 'Male', \u2502 \u2502 \u2502 \u2502 \u2502 'age': 49, \u2502 \u2502 \u2502 \u2502 \u2502 'symptoms': [ \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 'symptom': 'macular rash', \u2502 \u2502 \u2502 \u2502 \u2502 'affected area': ReAsk( \u2502 \u2502 \u2502 \u2502 \u2502 incorrect_value='face & hair', \u2502 \u2502 \u2502 \u2502 \u2502 error_message=\"Value face & hair is not in choices ['head', 'neck', 'chest'].\", \u2502 \u2502 \u2502 \u2502 \u2502 fix_value=None, \u2502 \u2502 \u2502 \u2502 \u2502 path=['patient_info', 'symptoms', 0, 'affected area'] \u2502 \u2502 \u2502 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 'symptom': 'itchy, flaky, slightly scaly', \u2502 \u2502 \u2502 \u2502 \u2502 'affected area': ReAsk( \u2502 \u2502 \u2502 \u2502 \u2502 incorrect_value='beard, eyebrows & nares', \u2502 \u2502 \u2502 \u2502 \u2502 error_message=\"Value beard, eyebrows & nares is not in choices ['head', 'neck', \u2502 \u2502 \u2502 \u2502 \u2502 'chest'].\", \u2502 \u2502 \u2502 \u2502 \u2502 fix_value=None, \u2502 \u2502 \u2502 \u2502 \u2502 path=['patient_info', 'symptoms', 1, 'affected area'] \u2502 \u2502 \u2502 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 \u2502 ], \u2502 \u2502 \u2502 \u2502 \u2502 'current_meds': [ \u2502 \u2502 \u2502 \u2502 \u2502 {'medication': 'OTC steroid cream', 'response': 'Moderate'} \u2502 \u2502 \u2502 \u2502 \u2502 ] \u2502 \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2514\u2500\u2500 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Step 1 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Prompt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 I was given the following JSON response, which had problems due to incorrect values. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"patient_info\": { \u2502 \u2502 \u2502 \u2502 \"symptoms\": [ \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"affected area\": { \u2502 \u2502 \u2502 \u2502 \"incorrect_value\": \"face & hair\", \u2502 \u2502 \u2502 \u2502 \"error_message\": \"Value face & hair is not in choices ['head', 'neck', 'chest'].\" \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"affected area\": { \u2502 \u2502 \u2502 \u2502 \"incorrect_value\": \"beard, eyebrows & nares\", \u2502 \u2502 \u2502 \u2502 \"error_message\": \"Value beard, eyebrows & nares is not in choices ['head', 'neck', 'chest'].\" \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 ] \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Help me correct the incorrect values based on the given error messages. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Given below is XML that describes the information to extract from this document and the tags to extract \u2502 \u2502 \u2502 \u2502 it into. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 <output> \u2502 \u2502 \u2502 \u2502 <object name=\"patient_info\"> \u2502 \u2502 \u2502 \u2502 <list name=\"symptoms\" description=\"Symptoms that the patient is currently experiencing. Each \u2502 \u2502 \u2502 \u2502 symptom should be classified into a separate item in the list.\"> \u2502 \u2502 \u2502 \u2502 <object> \u2502 \u2502 \u2502 \u2502 <string name=\"affected area\" description=\"What part of the body the symptom is \u2502 \u2502 \u2502 \u2502 affecting\" format=\"valid-choices: choices=['head', 'neck', 'chest']\"/> \u2502 \u2502 \u2502 \u2502 </object> \u2502 \u2502 \u2502 \u2502 </list> \u2502 \u2502 \u2502 \u2502 </object> \u2502 \u2502 \u2502 \u2502 </output> \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 ONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the \u2502 \u2502 \u2502 \u2502 `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding \u2502 \u2502 \u2502 \u2502 XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. \u2502 \u2502 \u2502 \u2502 requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere, \u2502 \u2502 \u2502 \u2502 enter `None`. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Here are examples of simple (XML, JSON) pairs that show the expected behavior: \u2502 \u2502 \u2502 \u2502 - `<string name='foo' format='two-words lower-case' />` => `{{'foo': 'example one'}}` \u2502 \u2502 \u2502 \u2502 - `<list name='bar'><string format='upper-case' /></list>` => `{{\"bar\": ['STRING ONE', 'STRING TWO', \u2502 \u2502 \u2502 \u2502 etc.]}}` \u2502 \u2502 \u2502 \u2502 - `<object name='baz'><string name=\"foo\" format=\"capitalize two-words\" /><integer name=\"index\" \u2502 \u2502 \u2502 \u2502 format=\"1-indexed\" /></object>` => `{{'baz': {{'foo': 'Some String', 'index': 1}}}}` \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Raw LLM Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"patient_info\": { \u2502 \u2502 \u2502 \u2502 \"symptoms\": [ \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"affected area\": \"head\" \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"affected area\": \"neck\" \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 ] \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Validated Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'patient_info': { \u2502 \u2502 \u2502 \u2502 'gender': 'Male', \u2502 \u2502 \u2502 \u2502 'age': 49, \u2502 \u2502 \u2502 \u2502 'symptoms': [ \u2502 \u2502 \u2502 \u2502 {'symptom': 'macular rash', 'affected area': 'head'}, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'symptom': 'itchy, flaky, slightly scaly', \u2502 \u2502 \u2502 \u2502 'affected area': 'neck' \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 ], \u2502 \u2502 \u2502 \u2502 'current_meds': [ \u2502 \u2502 \u2502 \u2502 {'medication': 'OTC steroid cream', 'response': 'Moderate'} \u2502 \u2502 \u2502 \u2502 ] \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"Getting Started"},{"location":"getting_started/#getting-started","text":"In this notebook, we will go through the basics of creating a RAIL spec and using Guardrails to enforce it.","title":"Getting Started"},{"location":"getting_started/#objective","text":"Our goal is to extract detailed patient information from a medical record. We will use a simple example to demonstrate how Guardrails can be used to enforce a RAIL spec. As an example, we will use the following medical record: doctors_notes = \"\"\"49 y/o Male with chronic macular rash to face & hair, worse in beard, eyebrows & nares. Itchy, flaky, slightly scaly. Moderate response to OTC steroid cream\"\"\" We want our extracted information to contain the following fields: Patient's gender Patient's age A list of symptoms, each with a severity rating and an affected area A list of medications, each with information about the patient's response to the medication","title":"Objective"},{"location":"getting_started/#installation","text":"To get started, install the guardrails package with pip . ! pip install guardrails - ai","title":"Installation"},{"location":"getting_started/#creating-an-rail-spec","text":"At the heart of Guardrails is the RAIL spec. RAIL a flavor of XML (standing for R eliable AI markup L anguage) that describes the expected structure and type of the output of the LLM, the quality criteria for the output to be valid and corrective actions to be taken if the output is invalid. A RAIL spec is composed of 3 main components: Output schema Prompt (Optional) Script","title":"Creating an RAIL spec"},{"location":"getting_started/#output-schema","text":"We start by creating the output schema. The output schema is a RAIL spec that describes the expected structure and type of the output of the LLM.","title":"Output schema"},{"location":"getting_started/#specifying-structure","text":"As mentioned earlier, we want our extracted information to contain the following fields: gender, age, symptoms, and medications. Using RAIL , we can create fairly complex output schemas. For example, we can specify that a field is a list of objects, etc. We see an example of this below. RAIL Spec Output JSON <object name= \"patient_info\" > <string name= \"gender\" description= \"Patient's gender\" /> <integer name= \"age\" /> <list name= \"symptoms\" description= \"Symptoms that the patient is currently experiencing. Each symptom should be classified into separate item in the list.\" > <object> <string name= \"symptom\" description= \"Symptom that a patient is experiencing\" /> <string name= \"affected area\" description= \"What part of the body the symptom is affecting\" /> </object> </list> <list name= \"current_meds\" description= \"Medications the patient is currently taking and their response\" > <object> <string name= \"medication\" description= \"Name of the medication the patient is taking\" /> <string name= \"response\" description= \"How the patient is responding to the medication\" /> </object> </list> </object> { \"patient_info\" : { \"gender\" : ... , \"age\" : ... , \"symptoms\" : [ { \"symptom\" : ... , \"affected area\" : ... }, ... ], \"current_meds\" : [ { \"medication\" : ... , \"response\" : ... }, ... ] } }","title":"Specifying structure"},{"location":"getting_started/#specifying-quality-criteria","text":"Next, we want to specify the quality criteria for the output to be valid and corrective actions to be taken if the output is invalid. We can do this by adding a format tag to each field in the output schema. Format tags can either be enforced by Guardrails, or they can only be suggetions to the LLM. You can see the list of validators enforced by Guardrails here . Additionally, you can create your own custom validators, see examples here 1 , 2 , 3 . As an example, for our use case we specify that the affected_area of symptoms should be one of the following: ['head', 'neck', 'chest'] . For this, we use the valid-choices validator .","title":"Specifying quality criteria"},{"location":"getting_started/#specifying-corrective-actions","text":"Additionally, we can specify how to handle invalid output by adding a on-fail-... attribute to an element. For example, we can specify that if the affected_area of a symptom is not one of the valid choices, we should re-prompt the LLM to correct its output. We do this by adding the on-fail-valid-choices='reask' attribute to the affected_area field. To see the full list of corrective actions, see here . Finally, out updated output schema looks like: <object name= \"patient_info\" > <string name= \"gender\" description= \"Patient's gender\" /> <integer name= \"age\" format= \"valid-range: 0 100\" /> <!-- (1)! --> <list name= \"symptoms\" description= \"Symptoms that the patient is currently experiencing. Each symptom should be classified into separate item in the list.\" > <object> <string name= \"symptom\" description= \"Symptom that a patient is experiencing\" /> <string name= \"affected area\" description= \"What part of the body the symptom is affecting\" format= \"valid-choices: {['head', 'neck', 'chest']}\" on-fail-valid-choices= \"reask\" /> <!-- (2)! --> </object> </list> <list name= \"current_meds\" description= \"Medications the patient is currently taking and their response\" > <object> <string name= \"medication\" description= \"Name of the medication the patient is taking\" /> <string name= \"response\" description= \"How the patient is responding to the medication\" /> </object> </list> </object> We specify the valid-range validator for the age field. This validator takes the min and max arguments, which we pass as 0 and 100 respectively. We specify the valid-choices validator for the affected_area field. This validator will check that the value of the field is one of the choices specified in the format attribute. We specify that if the affected_area field fails the valid-choices validator, we should re-prompt the LLM to correct its output. This is done by setting the on-fail-valid-choices attribute to reask . Note In order to pass in a list of choices, we wrap the list in curly braces -- {['head', 'neck', 'chest']} . Anything inside the curly braces will be evaluated as a Python expression. This allows us to pass in more complex data structures or objects as arguments to the validator.","title":"Specifying corrective actions"},{"location":"getting_started/#prompt","text":"The prompt contains high level instructions for the LLM, as well as any parameters that need to be substituted at runtime. For our use case, we create the following prompt: <prompt> Given the following doctor's notes about a patient, please extract a dictionary that contains the patient's information. <!-- (1)! --> {{doctors_notes}} <!-- (2)! --> @complete_json_suffix_v2 <!-- (3)! --> </prompt> This is the high level instructions for the LLM. This is a prompt parameter that will be substituted at runtime. We will see how to do this in the next section. This is some boilerplate text that formats helps the LLM output a valid JSON object. Guardrails will automatically add this text to the end of the LLM's output. You can see the full list of boilerplate text here .","title":"Prompt"},{"location":"getting_started/#full-rail-spec","text":"Putting it all together, the full rail spec for our use case looks like. You can see the full spec here .","title":"Full rail spec"},{"location":"getting_started/#using-guardrails-to-enforce-the-rail-spec","text":"We use the RAIL spec to create a Guard object. The Guard object is used to wrap the LLM API call and enforce the RAIL spec on the output of the LLM call. from rich import print import guardrails as gd guard = gd . Guard . from_rail ( 'getting_started.rail' ) We can see that the Guard object compiles the RAIL output specification and adds it to the provided prompt. Next, we call the Guard object with the LLM API call as the first argument and add any additional arguments to the LLM API call as the remaining arguments. import openai import os # Set your OpenAI API key os . environ [ \"OPENAI_API_KEY\" ] = \"YOUR_OPENAI_API_KEY\" # Wrap the OpenAI API call with the `guard` object raw_llm_output , validated_output = guard ( openai . Completion . create , prompt_params = { \"doctors_notes\" : doctors_notes }, engine = \"text-davinci-003\" , max_tokens = 1024 , temperature = 0.3 , ) # Print the validated output from the LLM print ( validated_output ) /Users/shreyarajpal/anaconda3/envs/tiff-env/lib/python3.9/site-packages/eliot/json.py:22: FutureWarning: In the future `np.bool` will be defined as the corresponding NumPy scalar. (This may have returned Python scalars in past versions. if isinstance(o, (numpy.bool, numpy.bool_)): { 'patient_info' : { 'gender' : 'Male' , 'age' : 49 , 'symptoms' : [ { 'symptom' : 'macular rash' , 'affected area' : 'head' } , { 'symptom' : 'itchy, flaky, slightly scaly' , 'affected area' : 'neck' } ] , 'current_meds' : [{ 'medication' : 'OTC steroid cream' , 'response' : 'Moderate' }] } } We can see that our output was structured correctly, and that the values of the affected_area field were one of the valid choices.","title":"Using Guardrails to enforce the RAIL spec"},{"location":"getting_started/#inspecting-logs-to-peek-under-the-hood","text":"Guardrails logs all of the steps it takes to enforce the RAIL spec. We inspect these logs below to see all the steps Guardrails took to enforce the RAIL spec.","title":"Inspecting logs to peek under the hood"},{"location":"getting_started/#inspecting-step-1-getting-llm-output","text":"print ( guard . state . most_recent_call . history [ 0 ] . rich_group ) \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Prompt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 \u2502 \u2502 Given the following doctor's notes about a patient, please extract a dictionary that contains the patient's \u2502 \u2502 information. \u2502 \u2502 \u2502 \u2502 49 y/o Male with chronic macular rash to face & hair, worse in beard, eyebrows & nares. \u2502 \u2502 Itchy, flaky, slightly scaly. Moderate response to OTC steroid cream \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Given below is XML that describes the information to extract from this document and the tags to extract it \u2502 \u2502 into. \u2502 \u2502 \u2502 \u2502 <output> \u2502 \u2502 <object name=\"patient_info\"> \u2502 \u2502 <string name=\"gender\" description=\"Patient's gender\"/> \u2502 \u2502 <integer name=\"age\" format=\"valid-range: min=0 max=100\"/> \u2502 \u2502 <list name=\"symptoms\" description=\"Symptoms that the patient is currently experiencing. Each symptom \u2502 \u2502 should be classified into a separate item in the list.\"> \u2502 \u2502 <object> \u2502 \u2502 <string name=\"symptom\" description=\"Symptom that a patient is experiencing\"/> \u2502 \u2502 <string name=\"affected area\" description=\"What part of the body the symptom is affecting\" \u2502 \u2502 format=\"valid-choices: choices=['head', 'neck', 'chest']\"/> \u2502 \u2502 </object> \u2502 \u2502 </list> \u2502 \u2502 <list name=\"current_meds\" description=\"Medications the patient is currently taking and their response\"> \u2502 \u2502 <object> \u2502 \u2502 <string name=\"medication\" description=\"Name of the medication the patient is taking\"/> \u2502 \u2502 <string name=\"response\" description=\"How the patient is responding to the medication\"/> \u2502 \u2502 </object> \u2502 \u2502 </list> \u2502 \u2502 </object> \u2502 \u2502 </output> \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 ONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the `name` \u2502 \u2502 attribute of the corresponding XML, and the value is of the type specified by the corresponding XML's tag. The \u2502 \u2502 JSON MUST conform to the XML format, including any types and format requests e.g. requests for lists, objects \u2502 \u2502 and specific types. Be correct and concise. \u2502 \u2502 \u2502 \u2502 Here are examples of simple (XML, JSON) pairs that show the expected behavior: \u2502 \u2502 - `<string name='foo' format='two-words lower-case' />` => `{'foo': 'example one'}` \u2502 \u2502 - `<list name='bar'><string format='upper-case' /></list>` => `{\"bar\": ['STRING ONE', 'STRING TWO', etc.]}` \u2502 \u2502 - `<object name='baz'><string name=\"foo\" format=\"capitalize two-words\" /><integer name=\"index\" \u2502 \u2502 format=\"1-indexed\" /></object>` => `{'baz': {'foo': 'Some String', 'index': 1}}` \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Raw LLM Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 { \u2502 \u2502 \"patient_info\": { \u2502 \u2502 \"gender\": \"Male\", \u2502 \u2502 \"age\": 49, \u2502 \u2502 \"symptoms\": [ \u2502 \u2502 { \u2502 \u2502 \"symptom\": \"macular rash\", \u2502 \u2502 \"affected area\": \"face & hair\" \u2502 \u2502 }, \u2502 \u2502 { \u2502 \u2502 \"symptom\": \"itchy, flaky, slightly scaly\", \u2502 \u2502 \"affected area\": \"beard, eyebrows & nares\" \u2502 \u2502 } \u2502 \u2502 ], \u2502 \u2502 \"current_meds\": [ \u2502 \u2502 { \u2502 \u2502 \"medication\": \"OTC steroid cream\", \u2502 \u2502 \"response\": \"Moderate\" \u2502 \u2502 } \u2502 \u2502 ] \u2502 \u2502 } \u2502 \u2502 } \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Validated Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 { \u2502 \u2502 'patient_info': { \u2502 \u2502 'gender': 'Male', \u2502 \u2502 'age': 49, \u2502 \u2502 'symptoms': [ \u2502 \u2502 { \u2502 \u2502 'symptom': 'macular rash', \u2502 \u2502 'affected area': ReAsk( \u2502 \u2502 incorrect_value='face & hair', \u2502 \u2502 error_message=\"Value face & hair is not in choices ['head', 'neck', 'chest'].\", \u2502 \u2502 fix_value=None, \u2502 \u2502 path=['patient_info', 'symptoms', 0, 'affected area'] \u2502 \u2502 ) \u2502 \u2502 }, \u2502 \u2502 { \u2502 \u2502 'symptom': 'itchy, flaky, slightly scaly', \u2502 \u2502 'affected area': ReAsk( \u2502 \u2502 incorrect_value='beard, eyebrows & nares', \u2502 \u2502 error_message=\"Value beard, eyebrows & nares is not in choices ['head', 'neck', 'chest'].\", \u2502 \u2502 fix_value=None, \u2502 \u2502 path=['patient_info', 'symptoms', 1, 'affected area'] \u2502 \u2502 ) \u2502 \u2502 } \u2502 \u2502 ], \u2502 \u2502 'current_meds': [ \u2502 \u2502 {'medication': 'OTC steroid cream', 'response': 'Moderate'} \u2502 \u2502 ] \u2502 \u2502 } \u2502 \u2502 } \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f We can see that the output returned by the LLM contained invalid values for the affected_area field. On validation, Guardrails created ReAsk objects that contains all of the information needed to re-prompt the LLM to correct its output.","title":"Inspecting Step 1: Getting LLM output"},{"location":"getting_started/#inspecting-step-2-re-prompting-llm","text":"print ( guard . state . most_recent_call . history [ 1 ] . rich_group ) \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Prompt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 I was given the following JSON response, which had problems due to incorrect values. \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \"patient_info\": { \u2502 \u2502 \"symptoms\": [ \u2502 \u2502 { \u2502 \u2502 \"affected area\": { \u2502 \u2502 \"incorrect_value\": \"face & hair\", \u2502 \u2502 \"error_message\": \"Value face & hair is not in choices ['head', 'neck', 'chest'].\" \u2502 \u2502 } \u2502 \u2502 }, \u2502 \u2502 { \u2502 \u2502 \"affected area\": { \u2502 \u2502 \"incorrect_value\": \"beard, eyebrows & nares\", \u2502 \u2502 \"error_message\": \"Value beard, eyebrows & nares is not in choices ['head', 'neck', 'chest'].\" \u2502 \u2502 } \u2502 \u2502 } \u2502 \u2502 ] \u2502 \u2502 } \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 Help me correct the incorrect values based on the given error messages. \u2502 \u2502 \u2502 \u2502 Given below is XML that describes the information to extract from this document and the tags to extract it \u2502 \u2502 into. \u2502 \u2502 \u2502 \u2502 <output> \u2502 \u2502 <object name=\"patient_info\"> \u2502 \u2502 <list name=\"symptoms\" description=\"Symptoms that the patient is currently experiencing. Each symptom \u2502 \u2502 should be classified into a separate item in the list.\"> \u2502 \u2502 <object> \u2502 \u2502 <string name=\"affected area\" description=\"What part of the body the symptom is affecting\" \u2502 \u2502 format=\"valid-choices: choices=['head', 'neck', 'chest']\"/> \u2502 \u2502 </object> \u2502 \u2502 </list> \u2502 \u2502 </object> \u2502 \u2502 </output> \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 ONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the `name` \u2502 \u2502 attribute of the corresponding XML, and the value is of the type specified by the corresponding XML's tag. The \u2502 \u2502 JSON MUST conform to the XML format, including any types and format requests e.g. requests for lists, objects \u2502 \u2502 and specific types. Be correct and concise. If you are unsure anywhere, enter `None`. \u2502 \u2502 \u2502 \u2502 Here are examples of simple (XML, JSON) pairs that show the expected behavior: \u2502 \u2502 - `<string name='foo' format='two-words lower-case' />` => `{{'foo': 'example one'}}` \u2502 \u2502 - `<list name='bar'><string format='upper-case' /></list>` => `{{\"bar\": ['STRING ONE', 'STRING TWO', etc.]}}` \u2502 \u2502 - `<object name='baz'><string name=\"foo\" format=\"capitalize two-words\" /><integer name=\"index\" \u2502 \u2502 format=\"1-indexed\" /></object>` => `{{'baz': {{'foo': 'Some String', 'index': 1}}}}` \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Raw LLM Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 { \u2502 \u2502 \"patient_info\": { \u2502 \u2502 \"symptoms\": [ \u2502 \u2502 { \u2502 \u2502 \"affected area\": \"head\" \u2502 \u2502 }, \u2502 \u2502 { \u2502 \u2502 \"affected area\": \"neck\" \u2502 \u2502 } \u2502 \u2502 ] \u2502 \u2502 } \u2502 \u2502 } \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Validated Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 { \u2502 \u2502 'patient_info': { \u2502 \u2502 'gender': 'Male', \u2502 \u2502 'age': 49, \u2502 \u2502 'symptoms': [ \u2502 \u2502 {'symptom': 'macular rash', 'affected area': 'head'}, \u2502 \u2502 { \u2502 \u2502 'symptom': 'itchy, flaky, slightly scaly', \u2502 \u2502 'affected area': 'neck' \u2502 \u2502 } \u2502 \u2502 ], \u2502 \u2502 'current_meds': [ \u2502 \u2502 {'medication': 'OTC steroid cream', 'response': 'Moderate'} \u2502 \u2502 ] \u2502 \u2502 } \u2502 \u2502 } \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f The prompt to the LLM was fully constructed by Guardrails. Additionally, the prompt only contained the previously invalid values for the affected_area field. On receiving the corrected LLM output, Guardrails merges it with the previously invalid values to create a valid output. It then reruns the validation step to ensure that the output is valid, and returns the output to the user.","title":"Inspecting Step 2: Re-prompting LLM"},{"location":"getting_started/#bonus-see-the-full-history-of-calls","text":"Guardrails also logs the full history of calls made to the LLM. This can be useful for debugging purposes. print ( guard . state . most_recent_call . tree ) Logs \u251c\u2500\u2500 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Step 0 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Prompt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Given the following doctor's notes about a patient, please extract a dictionary that contains the \u2502 \u2502 \u2502 \u2502 \u2502 patient's information. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 49 y/o Male with chronic macular rash to face & hair, worse in beard, eyebrows & nares. \u2502 \u2502 \u2502 \u2502 \u2502 Itchy, flaky, slightly scaly. Moderate response to OTC steroid cream \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Given below is XML that describes the information to extract from this document and the tags to extract \u2502 \u2502 \u2502 \u2502 \u2502 it into. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 <output> \u2502 \u2502 \u2502 \u2502 \u2502 <object name=\"patient_info\"> \u2502 \u2502 \u2502 \u2502 \u2502 <string name=\"gender\" description=\"Patient's gender\"/> \u2502 \u2502 \u2502 \u2502 \u2502 <integer name=\"age\" format=\"valid-range: min=0 max=100\"/> \u2502 \u2502 \u2502 \u2502 \u2502 <list name=\"symptoms\" description=\"Symptoms that the patient is currently experiencing. Each \u2502 \u2502 \u2502 \u2502 \u2502 symptom should be classified into a separate item in the list.\"> \u2502 \u2502 \u2502 \u2502 \u2502 <object> \u2502 \u2502 \u2502 \u2502 \u2502 <string name=\"symptom\" description=\"Symptom that a patient is experiencing\"/> \u2502 \u2502 \u2502 \u2502 \u2502 <string name=\"affected area\" description=\"What part of the body the symptom is \u2502 \u2502 \u2502 \u2502 \u2502 affecting\" format=\"valid-choices: choices=['head', 'neck', 'chest']\"/> \u2502 \u2502 \u2502 \u2502 \u2502 </object> \u2502 \u2502 \u2502 \u2502 \u2502 </list> \u2502 \u2502 \u2502 \u2502 \u2502 <list name=\"current_meds\" description=\"Medications the patient is currently taking and their \u2502 \u2502 \u2502 \u2502 \u2502 response\"> \u2502 \u2502 \u2502 \u2502 \u2502 <object> \u2502 \u2502 \u2502 \u2502 \u2502 <string name=\"medication\" description=\"Name of the medication the patient is taking\"/> \u2502 \u2502 \u2502 \u2502 \u2502 <string name=\"response\" description=\"How the patient is responding to the medication\"/> \u2502 \u2502 \u2502 \u2502 \u2502 </object> \u2502 \u2502 \u2502 \u2502 \u2502 </list> \u2502 \u2502 \u2502 \u2502 \u2502 </object> \u2502 \u2502 \u2502 \u2502 \u2502 </output> \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 ONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the \u2502 \u2502 \u2502 \u2502 \u2502 `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding \u2502 \u2502 \u2502 \u2502 \u2502 XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. \u2502 \u2502 \u2502 \u2502 \u2502 requests for lists, objects and specific types. Be correct and concise. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Here are examples of simple (XML, JSON) pairs that show the expected behavior: \u2502 \u2502 \u2502 \u2502 \u2502 - `<string name='foo' format='two-words lower-case' />` => `{'foo': 'example one'}` \u2502 \u2502 \u2502 \u2502 \u2502 - `<list name='bar'><string format='upper-case' /></list>` => `{\"bar\": ['STRING ONE', 'STRING TWO', \u2502 \u2502 \u2502 \u2502 \u2502 etc.]}` \u2502 \u2502 \u2502 \u2502 \u2502 - `<object name='baz'><string name=\"foo\" format=\"capitalize two-words\" /><integer name=\"index\" \u2502 \u2502 \u2502 \u2502 \u2502 format=\"1-indexed\" /></object>` => `{'baz': {'foo': 'Some String', 'index': 1}}` \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Raw LLM Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 \"patient_info\": { \u2502 \u2502 \u2502 \u2502 \u2502 \"gender\": \"Male\", \u2502 \u2502 \u2502 \u2502 \u2502 \"age\": 49, \u2502 \u2502 \u2502 \u2502 \u2502 \"symptoms\": [ \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 \"symptom\": \"macular rash\", \u2502 \u2502 \u2502 \u2502 \u2502 \"affected area\": \"face & hair\" \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 \"symptom\": \"itchy, flaky, slightly scaly\", \u2502 \u2502 \u2502 \u2502 \u2502 \"affected area\": \"beard, eyebrows & nares\" \u2502 \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 \u2502 ], \u2502 \u2502 \u2502 \u2502 \u2502 \"current_meds\": [ \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 \"medication\": \"OTC steroid cream\", \u2502 \u2502 \u2502 \u2502 \u2502 \"response\": \"Moderate\" \u2502 \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 \u2502 ] \u2502 \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Validated Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 'patient_info': { \u2502 \u2502 \u2502 \u2502 \u2502 'gender': 'Male', \u2502 \u2502 \u2502 \u2502 \u2502 'age': 49, \u2502 \u2502 \u2502 \u2502 \u2502 'symptoms': [ \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 'symptom': 'macular rash', \u2502 \u2502 \u2502 \u2502 \u2502 'affected area': ReAsk( \u2502 \u2502 \u2502 \u2502 \u2502 incorrect_value='face & hair', \u2502 \u2502 \u2502 \u2502 \u2502 error_message=\"Value face & hair is not in choices ['head', 'neck', 'chest'].\", \u2502 \u2502 \u2502 \u2502 \u2502 fix_value=None, \u2502 \u2502 \u2502 \u2502 \u2502 path=['patient_info', 'symptoms', 0, 'affected area'] \u2502 \u2502 \u2502 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 'symptom': 'itchy, flaky, slightly scaly', \u2502 \u2502 \u2502 \u2502 \u2502 'affected area': ReAsk( \u2502 \u2502 \u2502 \u2502 \u2502 incorrect_value='beard, eyebrows & nares', \u2502 \u2502 \u2502 \u2502 \u2502 error_message=\"Value beard, eyebrows & nares is not in choices ['head', 'neck', \u2502 \u2502 \u2502 \u2502 \u2502 'chest'].\", \u2502 \u2502 \u2502 \u2502 \u2502 fix_value=None, \u2502 \u2502 \u2502 \u2502 \u2502 path=['patient_info', 'symptoms', 1, 'affected area'] \u2502 \u2502 \u2502 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 \u2502 ], \u2502 \u2502 \u2502 \u2502 \u2502 'current_meds': [ \u2502 \u2502 \u2502 \u2502 \u2502 {'medication': 'OTC steroid cream', 'response': 'Moderate'} \u2502 \u2502 \u2502 \u2502 \u2502 ] \u2502 \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2514\u2500\u2500 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Step 1 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Prompt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 I was given the following JSON response, which had problems due to incorrect values. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"patient_info\": { \u2502 \u2502 \u2502 \u2502 \"symptoms\": [ \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"affected area\": { \u2502 \u2502 \u2502 \u2502 \"incorrect_value\": \"face & hair\", \u2502 \u2502 \u2502 \u2502 \"error_message\": \"Value face & hair is not in choices ['head', 'neck', 'chest'].\" \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"affected area\": { \u2502 \u2502 \u2502 \u2502 \"incorrect_value\": \"beard, eyebrows & nares\", \u2502 \u2502 \u2502 \u2502 \"error_message\": \"Value beard, eyebrows & nares is not in choices ['head', 'neck', 'chest'].\" \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 ] \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Help me correct the incorrect values based on the given error messages. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Given below is XML that describes the information to extract from this document and the tags to extract \u2502 \u2502 \u2502 \u2502 it into. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 <output> \u2502 \u2502 \u2502 \u2502 <object name=\"patient_info\"> \u2502 \u2502 \u2502 \u2502 <list name=\"symptoms\" description=\"Symptoms that the patient is currently experiencing. Each \u2502 \u2502 \u2502 \u2502 symptom should be classified into a separate item in the list.\"> \u2502 \u2502 \u2502 \u2502 <object> \u2502 \u2502 \u2502 \u2502 <string name=\"affected area\" description=\"What part of the body the symptom is \u2502 \u2502 \u2502 \u2502 affecting\" format=\"valid-choices: choices=['head', 'neck', 'chest']\"/> \u2502 \u2502 \u2502 \u2502 </object> \u2502 \u2502 \u2502 \u2502 </list> \u2502 \u2502 \u2502 \u2502 </object> \u2502 \u2502 \u2502 \u2502 </output> \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 ONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the \u2502 \u2502 \u2502 \u2502 `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding \u2502 \u2502 \u2502 \u2502 XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. \u2502 \u2502 \u2502 \u2502 requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere, \u2502 \u2502 \u2502 \u2502 enter `None`. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Here are examples of simple (XML, JSON) pairs that show the expected behavior: \u2502 \u2502 \u2502 \u2502 - `<string name='foo' format='two-words lower-case' />` => `{{'foo': 'example one'}}` \u2502 \u2502 \u2502 \u2502 - `<list name='bar'><string format='upper-case' /></list>` => `{{\"bar\": ['STRING ONE', 'STRING TWO', \u2502 \u2502 \u2502 \u2502 etc.]}}` \u2502 \u2502 \u2502 \u2502 - `<object name='baz'><string name=\"foo\" format=\"capitalize two-words\" /><integer name=\"index\" \u2502 \u2502 \u2502 \u2502 format=\"1-indexed\" /></object>` => `{{'baz': {{'foo': 'Some String', 'index': 1}}}}` \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Raw LLM Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"patient_info\": { \u2502 \u2502 \u2502 \u2502 \"symptoms\": [ \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"affected area\": \"head\" \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"affected area\": \"neck\" \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 ] \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Validated Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'patient_info': { \u2502 \u2502 \u2502 \u2502 'gender': 'Male', \u2502 \u2502 \u2502 \u2502 'age': 49, \u2502 \u2502 \u2502 \u2502 'symptoms': [ \u2502 \u2502 \u2502 \u2502 {'symptom': 'macular rash', 'affected area': 'head'}, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'symptom': 'itchy, flaky, slightly scaly', \u2502 \u2502 \u2502 \u2502 'affected area': 'neck' \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 ], \u2502 \u2502 \u2502 \u2502 'current_meds': [ \u2502 \u2502 \u2502 \u2502 {'medication': 'OTC steroid cream', 'response': 'Moderate'} \u2502 \u2502 \u2502 \u2502 ] \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"Bonus: See the full history of calls"},{"location":"guard/","text":"The Guard class. This class is the main entry point for using Guardrails. It is initialized from either from_rail or from_rail_string methods, which take in a .rail file or string, respectively. The __call__ method functions as a wrapper around LLM APIs. It takes in an LLM API, and optional prompt parameters, and returns the raw output from the LLM and the validated output. Initialize the Guard. from_rail ( rail_file , num_reasks = 1 ) classmethod Create a Schema from a .rail file. Parameters: Name Type Description Default rail_file str The path to the .rail file. required num_reasks int The max times to re-ask the LLM for invalid output. 1 Returns: Type Description Guard An instance of the Guard class. from_rail_string ( rail_string , num_reasks = 1 ) classmethod Create a Schema from a .rail string. Parameters: Name Type Description Default rail_string str The .rail string. required num_reasks int The max times to re-ask the LLM for invalid output. 1 Returns: Type Description Guard An instance of the Guard class. __call__ ( llm_api , prompt_params = None , num_reasks = 1 , * args , ** kwargs ) Call the LLM and validate the output. Parameters: Name Type Description Default llm_api Callable The LLM API to call (e.g. openai.Completion.create) required prompt_params Dict The parameters to pass to the prompt.format() method. None num_reasks int The max times to re-ask the LLM for invalid output. 1 *args Additional arguments to pass to the LLM API. () **kwargs Additional keyword arguments to pass to the LLM API. {} Returns: Type Description Tuple [ str , Dict ] The raw text output from the LLM and the validated output. parse ( llm_output , llm_api = None , num_reasks = 1 , * args , ** kwargs ) Alternate flow to using Guard where the llm_output is known. Parameters: Name Type Description Default llm_output str The output from the LLM. required llm_api PromptCallable The LLM API to use to re-ask the LLM. None num_reasks int The max times to re-ask the LLM for invalid output. 1 Returns: Type Description Dict The validated response.","title":"Guard"},{"location":"guard/#guardrails.guard.Guard.from_rail","text":"Create a Schema from a .rail file. Parameters: Name Type Description Default rail_file str The path to the .rail file. required num_reasks int The max times to re-ask the LLM for invalid output. 1 Returns: Type Description Guard An instance of the Guard class.","title":"from_rail()"},{"location":"guard/#guardrails.guard.Guard.from_rail_string","text":"Create a Schema from a .rail string. Parameters: Name Type Description Default rail_string str The .rail string. required num_reasks int The max times to re-ask the LLM for invalid output. 1 Returns: Type Description Guard An instance of the Guard class.","title":"from_rail_string()"},{"location":"guard/#guardrails.guard.Guard.__call__","text":"Call the LLM and validate the output. Parameters: Name Type Description Default llm_api Callable The LLM API to call (e.g. openai.Completion.create) required prompt_params Dict The parameters to pass to the prompt.format() method. None num_reasks int The max times to re-ask the LLM for invalid output. 1 *args Additional arguments to pass to the LLM API. () **kwargs Additional keyword arguments to pass to the LLM API. {} Returns: Type Description Tuple [ str , Dict ] The raw text output from the LLM and the validated output.","title":"__call__()"},{"location":"guard/#guardrails.guard.Guard.parse","text":"Alternate flow to using Guard where the llm_output is known. Parameters: Name Type Description Default llm_output str The output from the LLM. required llm_api PromptCallable The LLM API to use to re-ask the LLM. None num_reasks int The max times to re-ask the LLM for invalid output. 1 Returns: Type Description Dict The validated response.","title":"parse()"},{"location":"llm_api_wrappers/","text":"Use Guardrails with LLM APIs Guardrails' Guard wrappers provide a simple way to add Guardrails to your LLM API calls. The wrappers are designed to be used with any LLM API. Here are some examples of how to use the wrappers with different LLM providers and models: OpenAI Completion Models (e.g. GPT-3) import openai import guardrails as gd # Create a Guard class guard = gd . Guard . from_rail ( ... ) # Wrap openai API call raw_llm_output , guardrail_output = guard ( openai . Completion . create , prompt_params = { \"prompt_param_1\" : \"value_1\" , \"prompt_param_2\" : \"value_2\" , .. }, engine = \"text-davinci-003\" , max_tokens = 100 , temperature = 0.0 , ) ChatCompletion Models (e.g. ChatGPT) import openai import guardrails as gd # Create a Guard class guard = gd . Guard . from_rail ( ... ) # Wrap openai API call raw_llm_output , guardrail_output = guard ( openai . ChatCompletion . create , prompt_params = { \"prompt_param_1\" : \"value_1\" , \"prompt_param_2\" : \"value_2\" , .. }, system_prompt = \"You are a helpful assistant...\" , model = \"gpt-3.5-turbo\" , max_tokens = 100 , temperature = 0.0 , ) Using Manifest Manifest is a wrapper around most model APIs and supports hosting local models. It can be used as a LLM API. import guardrails as gd import manifest # Create a Guard class guard = gd . Guard . from_rail ( ... ) # Create a Manifest client - this one points to GPT-4 # and caches responses in SQLLite manifest = manifest . Manifest ( client_name = \"openai\" , engine = \"gpt-4\" , cache_name = \"sqlite\" , cache_connection = \"my_manifest_cache.db\" ) # Wrap openai API call raw_llm_output , guardrail_output = guard ( manifest , prompt_params = { \"prompt_param_1\" : \"value_1\" , \"prompt_param_2\" : \"value_2\" , .. }, max_tokens = 100 , temperature = 0.0 , ) Using a custom LLM API import guardrails as gd # Create a Guard class guard = gd . Guard . from_rail ( ... ) # Function that takes the prompt as a string and returns the LLM output as string def my_llm_api ( prompt : str , ** kwargs ) -> str : \"\"\"Custom LLM API wrapper. Args: prompt (str): The prompt to be passed to the LLM API **kwargs: Any additional arguments to be passed to the LLM API Returns: str: The output of the LLM API \"\"\" # Call your LLM API here return ... # Wrap your LLM API call raw_llm_output , guardrail_output = guard ( my_llm_api , prompt_params = { \"prompt_param_1\" : \"value_1\" , \"prompt_param_2\" : \"value_2\" , .. }, ** kwargs , )","title":"LLM API Wrappers"},{"location":"llm_api_wrappers/#use-guardrails-with-llm-apis","text":"Guardrails' Guard wrappers provide a simple way to add Guardrails to your LLM API calls. The wrappers are designed to be used with any LLM API. Here are some examples of how to use the wrappers with different LLM providers and models:","title":"Use Guardrails with LLM APIs"},{"location":"llm_api_wrappers/#openai","text":"","title":"OpenAI"},{"location":"llm_api_wrappers/#completion-models-eg-gpt-3","text":"import openai import guardrails as gd # Create a Guard class guard = gd . Guard . from_rail ( ... ) # Wrap openai API call raw_llm_output , guardrail_output = guard ( openai . Completion . create , prompt_params = { \"prompt_param_1\" : \"value_1\" , \"prompt_param_2\" : \"value_2\" , .. }, engine = \"text-davinci-003\" , max_tokens = 100 , temperature = 0.0 , )","title":"Completion Models (e.g. GPT-3)"},{"location":"llm_api_wrappers/#chatcompletion-models-eg-chatgpt","text":"import openai import guardrails as gd # Create a Guard class guard = gd . Guard . from_rail ( ... ) # Wrap openai API call raw_llm_output , guardrail_output = guard ( openai . ChatCompletion . create , prompt_params = { \"prompt_param_1\" : \"value_1\" , \"prompt_param_2\" : \"value_2\" , .. }, system_prompt = \"You are a helpful assistant...\" , model = \"gpt-3.5-turbo\" , max_tokens = 100 , temperature = 0.0 , )","title":"ChatCompletion Models (e.g. ChatGPT)"},{"location":"llm_api_wrappers/#using-manifest","text":"Manifest is a wrapper around most model APIs and supports hosting local models. It can be used as a LLM API. import guardrails as gd import manifest # Create a Guard class guard = gd . Guard . from_rail ( ... ) # Create a Manifest client - this one points to GPT-4 # and caches responses in SQLLite manifest = manifest . Manifest ( client_name = \"openai\" , engine = \"gpt-4\" , cache_name = \"sqlite\" , cache_connection = \"my_manifest_cache.db\" ) # Wrap openai API call raw_llm_output , guardrail_output = guard ( manifest , prompt_params = { \"prompt_param_1\" : \"value_1\" , \"prompt_param_2\" : \"value_2\" , .. }, max_tokens = 100 , temperature = 0.0 , )","title":"Using Manifest"},{"location":"llm_api_wrappers/#using-a-custom-llm-api","text":"import guardrails as gd # Create a Guard class guard = gd . Guard . from_rail ( ... ) # Function that takes the prompt as a string and returns the LLM output as string def my_llm_api ( prompt : str , ** kwargs ) -> str : \"\"\"Custom LLM API wrapper. Args: prompt (str): The prompt to be passed to the LLM API **kwargs: Any additional arguments to be passed to the LLM API Returns: str: The output of the LLM API \"\"\" # Call your LLM API here return ... # Wrap your LLM API call raw_llm_output , guardrail_output = guard ( my_llm_api , prompt_params = { \"prompt_param_1\" : \"value_1\" , \"prompt_param_2\" : \"value_2\" , .. }, ** kwargs , )","title":"Using a custom LLM API"},{"location":"logs/","text":"Inspecting logs All gd.Guard calls are logged internally, and can be accessed via two methods, gd.Guard.guard_state or guardrails.log . \ud83e\udeb5 Accessing logs via guardrails.log This is the simplest way to access logs. It returns a list of all gd.Guard calls, in the order they were made. In order to access logs, run: eliot-tree --output-format = ascii guardrails.log \ud83c\uddfb\ud83c\udde6 Accessing logs via gd.Guard.guard_state guard_state is an attribute of the gd.Guard class. It contains: A list of all gd.Guard calls, in the order they were made. For each call, reasks needed and their results. In order to access logs, run: from rich import print print ( guard . state . most_recent_call . tree )","title":"Inspecting logs"},{"location":"logs/#inspecting-logs","text":"All gd.Guard calls are logged internally, and can be accessed via two methods, gd.Guard.guard_state or guardrails.log .","title":"Inspecting logs"},{"location":"logs/#accessing-logs-via-guardrailslog","text":"This is the simplest way to access logs. It returns a list of all gd.Guard calls, in the order they were made. In order to access logs, run: eliot-tree --output-format = ascii guardrails.log","title":"\ud83e\udeb5 Accessing logs via guardrails.log"},{"location":"logs/#accessing-logs-via-gdguardguard_state","text":"guard_state is an attribute of the gd.Guard class. It contains: A list of all gd.Guard calls, in the order they were made. For each call, reasks needed and their results. In order to access logs, run: from rich import print print ( guard . state . most_recent_call . tree )","title":"\ud83c\uddfb\ud83c\udde6 Accessing logs via gd.Guard.guard_state"},{"location":"validation/","text":"This module contains the validators for the Guardrails framework. The name with which a validator is registered is the name that is used in the RAIL spec to specify formatters. BugFreePython Validate that there are no Python syntactic bugs in the generated code. This validator checks for syntax errors by running ast.parse(code) , and will raise an exception if there are any. Only the packages in the python environment are available to the code snippet. Name for format attribute: bug-free-python Supported data types: pythoncode Programmatic fix: None BugFreeSQL ( schema_file = None , conn = None ) Validate that there are no SQL syntactic bugs in the generated code. This is a very minimal implementation that uses the Pypi sqlvalidator package to check if the SQL query is valid. You can implement a custom SQL validator that uses a database connection to check if the query is valid. Name for format attribute: bug-free-sql Supported data types: sql Programmatic fix: None Choice ( choices , on_fail = None ) Validate that a value is one of a set of choices. Name for format attribute: choice Supported data types: string Programmatic fix: Closest value within the set of choices. EndsWith ( end , on_fail = 'fix' ) Validate that a list ends with a given value. Name for format attribute: ends-with Supported data types: list Programmatic fix: Append the given value to the list. Filter IsHighQualityTranslation ( * args , ** kwargs ) Using inpiredco.critique to check if a translation is high quality. Name for format attribute: is-high-quality-translation Supported data types: string Programmatic fix: \"\" critique = Critique ( api_key = os . environ [ 'INSPIREDCO_API_KEY' ]) instance-attribute IsProfanityFree Validate that a translated text does not contain profanity language. This validator uses the alt-profanity-check package to check if a string contains profanity language. Name for format attribute: is-profanity-free Supported data types: string Programmatic fix: \"\" LowerCase Validate that a value is lower case. Name for format attribute: lower-case Supported data types: string Programmatic fix: Manually convert to lower case. OneLine Validate that a value is a single line or sentence. Name for format attribute: one-line Supported data types: string Programmatic fix: Pick the first line. Pydantic ( model , on_fail = None ) Validate an object using Pydantic. model = model instance-attribute PydanticReAsk Refrain SimilarToDocument ( document , threshold = 0.7 , model = 'text-embedding-ada-002' , on_fail = None ) Validate that a value is similar to the document. This validator checks if the value is similar to the document by checking the cosine similarity between the value and the document, using an embedding. Name for format attribute: similar-to-document Supported data types: string Programmatic fix: None SqlColumnPresence ( cols , on_fail = None ) Validate that all columns in the SQL query are present in the schema. Name for format attribute: sql-column-presence Supported data types: string TwoWords Validate that a value is upper case. Name for format attribute: two-words Supported data types: string Programmatic fix: Pick the first two words. UpperCase Validate that a value is upper case. Name for format attribute: upper-case Supported data types: string Programmatic fix: Manually convert to upper case. ValidChoices ( choices , on_fail = None ) Validate that a value is within the acceptable choices. Name for format attribute: valid-choices Supported data types: all Programmatic fix: None. ValidLength ( min = None , max = None , on_fail = None ) Validate that the length of value is within the expected range. Name for format attribute: length Supported data types: string , list , object Programmatic fix: If shorter than the minimum, pad with empty last elements. If longer than the maximum, truncate. ValidRange ( min = None , max = None , on_fail = None ) Validate that a value is within a range. Name for format attribute: valid-range Supported data types: integer , float , percentage Programmatic fix: Closest value within the range. ValidUrl Validate that a value is a valid URL. Name for format attribute: valid-url Supported data types: string , url Programmatic fix: None","title":"Validators"},{"location":"validation/#guardrails.validators.BugFreePython","text":"Validate that there are no Python syntactic bugs in the generated code. This validator checks for syntax errors by running ast.parse(code) , and will raise an exception if there are any. Only the packages in the python environment are available to the code snippet. Name for format attribute: bug-free-python Supported data types: pythoncode Programmatic fix: None","title":"BugFreePython"},{"location":"validation/#guardrails.validators.BugFreeSQL","text":"Validate that there are no SQL syntactic bugs in the generated code. This is a very minimal implementation that uses the Pypi sqlvalidator package to check if the SQL query is valid. You can implement a custom SQL validator that uses a database connection to check if the query is valid. Name for format attribute: bug-free-sql Supported data types: sql Programmatic fix: None","title":"BugFreeSQL"},{"location":"validation/#guardrails.validators.Choice","text":"Validate that a value is one of a set of choices. Name for format attribute: choice Supported data types: string Programmatic fix: Closest value within the set of choices.","title":"Choice"},{"location":"validation/#guardrails.validators.EndsWith","text":"Validate that a list ends with a given value. Name for format attribute: ends-with Supported data types: list Programmatic fix: Append the given value to the list.","title":"EndsWith"},{"location":"validation/#guardrails.validators.Filter","text":"","title":"Filter"},{"location":"validation/#guardrails.validators.IsHighQualityTranslation","text":"Using inpiredco.critique to check if a translation is high quality. Name for format attribute: is-high-quality-translation Supported data types: string Programmatic fix: \"\"","title":"IsHighQualityTranslation"},{"location":"validation/#guardrails.validators.IsHighQualityTranslation.critique","text":"","title":"critique"},{"location":"validation/#guardrails.validators.IsProfanityFree","text":"Validate that a translated text does not contain profanity language. This validator uses the alt-profanity-check package to check if a string contains profanity language. Name for format attribute: is-profanity-free Supported data types: string Programmatic fix: \"\"","title":"IsProfanityFree"},{"location":"validation/#guardrails.validators.LowerCase","text":"Validate that a value is lower case. Name for format attribute: lower-case Supported data types: string Programmatic fix: Manually convert to lower case.","title":"LowerCase"},{"location":"validation/#guardrails.validators.OneLine","text":"Validate that a value is a single line or sentence. Name for format attribute: one-line Supported data types: string Programmatic fix: Pick the first line.","title":"OneLine"},{"location":"validation/#guardrails.validators.Pydantic","text":"Validate an object using Pydantic.","title":"Pydantic"},{"location":"validation/#guardrails.validators.Pydantic.model","text":"","title":"model"},{"location":"validation/#guardrails.validators.PydanticReAsk","text":"","title":"PydanticReAsk"},{"location":"validation/#guardrails.validators.Refrain","text":"","title":"Refrain"},{"location":"validation/#guardrails.validators.SimilarToDocument","text":"Validate that a value is similar to the document. This validator checks if the value is similar to the document by checking the cosine similarity between the value and the document, using an embedding. Name for format attribute: similar-to-document Supported data types: string Programmatic fix: None","title":"SimilarToDocument"},{"location":"validation/#guardrails.validators.SqlColumnPresence","text":"Validate that all columns in the SQL query are present in the schema. Name for format attribute: sql-column-presence Supported data types: string","title":"SqlColumnPresence"},{"location":"validation/#guardrails.validators.TwoWords","text":"Validate that a value is upper case. Name for format attribute: two-words Supported data types: string Programmatic fix: Pick the first two words.","title":"TwoWords"},{"location":"validation/#guardrails.validators.UpperCase","text":"Validate that a value is upper case. Name for format attribute: upper-case Supported data types: string Programmatic fix: Manually convert to upper case.","title":"UpperCase"},{"location":"validation/#guardrails.validators.ValidChoices","text":"Validate that a value is within the acceptable choices. Name for format attribute: valid-choices Supported data types: all Programmatic fix: None.","title":"ValidChoices"},{"location":"validation/#guardrails.validators.ValidLength","text":"Validate that the length of value is within the expected range. Name for format attribute: length Supported data types: string , list , object Programmatic fix: If shorter than the minimum, pad with empty last elements. If longer than the maximum, truncate.","title":"ValidLength"},{"location":"validation/#guardrails.validators.ValidRange","text":"Validate that a value is within a range. Name for format attribute: valid-range Supported data types: integer , float , percentage Programmatic fix: Closest value within the range.","title":"ValidRange"},{"location":"validation/#guardrails.validators.ValidUrl","text":"Validate that a value is a valid URL. Name for format attribute: valid-url Supported data types: string , url Programmatic fix: None","title":"ValidUrl"},{"location":"examples/bug_free_python_code/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Generating Bug Free Leetcode Solutions Note To download this tutorial as a Jupyter notebook, click here . In this example, we want to solve String Maniuplation leetcode problems such that the code is bug free. We make the assumption that: We don't need any external libraries that are not already installed in the environment. We are able to execute the code in the environment. Objective We want to generate bug-free code for solving leetcode problems. In this example, we don't account for semantic bugs, only for syntactic bugs. In short, we want to make sure that the code can be executed without any errors. Step 1: Generating RAIL Spec Ordinarily, we could create a separate RAIL spec in a file. However, for the sake of this example, we will generate the RAIL spec in the notebook as a string. rail_str = \"\"\" <rail version=\"0.1\"> <output> <pythoncode name=\"python_code\" format=\"bug-free-python\" on-fail-bug-free-python=\"reask\" /> </output> <prompt> Given the following high level leetcode problem description, write a short Python code snippet that solves the problem. Problem Description: {{leetcode_problem}} @complete_json_suffix</prompt> </rail> \"\"\" Step 2: Create a Guard object with the RAIL Spec We create a gd.Guard object that will check, validate and correct the generated code. This object: Enforces the quality criteria specified in the RAIL spec (i.e. bug free code). Takes corrective action when the quality criteria are not met (i.e. reasking the LLM). Compiles the schema and type info from the RAIL spec and adds it to the prompt. import guardrails as gd from rich import print guard = gd . Guard . from_rail_string ( rail_str ) The Guard object compiles the output schema and adds it to the prompt. We can see the final prompt below: print ( guard . base_prompt ) Given the following high level leetcode problem description, write a short Python code snippet that solves the problem. Problem Description: { leetcode_problem } Given below is XML that describes the information to extract from this document and the tags to extract it into. < output > <pythoncode name = \"python_code\" format = \"bug-free\" / > < / output > ONLY return a valid JSON object ( no other text is necessary ) , where the key of the field in JSON is the `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere, enter ` None `. Here are examples of simple ( XML, JSON ) pairs that show the expected behavior: - `<string name = 'foo' format = 'two-words lower-case' / >` => ` {{ 'foo' : 'example one' }} ` - `<list name = 'bar' ><string format = 'upper-case' / >< / list >` => ` {{ \"bar\" : [ 'STRING ONE' , 'STRING TWO' , etc. ]}} ` - `<object name = 'baz' ><string name = \"foo\" format = \"capitalize two-words\" / ><integer name = \"index\" format = \"1-indexed\" / >< / object >` = > ` {{ 'baz' : {{ 'foo' : 'Some String' , 'index' : 1 }}}} ` JSON Object: Step 3: Wrap the LLM API call with Guard import openai leetcode_problem = \"\"\" Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000. \"\"\" raw_llm_response , validated_response = guard ( openai . Completion . create , prompt_params = { \"leetcode_problem\" : leetcode_problem }, engine = \"text-davinci-003\" , max_tokens = 2048 , temperature = 0 , ) Running the cell above returns: 1. The raw LLM text output as a single string. 2. A dictionary where the key is python_code and the value is the generated code. print ( validated_response ) { 'python_code' : \"def longestPalindrome(s):\\n longest_palindrome = ''\\n for i in range(len(s)):\\n for j in range(i, len(s)):\\n substring = s[i:j+1]\\n if substring == substring[::-1] and len(substring) > len(longest_palindrome):\\n longest_palindrome = substring\\n return longest_palindrome\" } Here's the generated code: print ( validated_response [ \"python_code\" ]) def longestPalindrome ( s ) : longest_palindrome = '' for i in range ( len ( s )) : for j in range ( i, len ( s )) : substring = s if substring == substring [ :: -1 ] and len ( substring ) > len ( longest_palindrome ) : longest_palindrome = substring return longest_palindrome We can confirm that the code is bug free by executing the code in the environment. try : exec ( validated_response [ \"python_code\" ]) print ( \"Success!\" ) except Exception as e : print ( \"Failed!\" ) Success!","title":"Generating bug-free Python code"},{"location":"examples/bug_free_python_code/#generating-bug-free-leetcode-solutions","text":"Note To download this tutorial as a Jupyter notebook, click here . In this example, we want to solve String Maniuplation leetcode problems such that the code is bug free. We make the assumption that: We don't need any external libraries that are not already installed in the environment. We are able to execute the code in the environment.","title":"Generating Bug Free Leetcode Solutions"},{"location":"examples/bug_free_python_code/#objective","text":"We want to generate bug-free code for solving leetcode problems. In this example, we don't account for semantic bugs, only for syntactic bugs. In short, we want to make sure that the code can be executed without any errors.","title":"Objective"},{"location":"examples/bug_free_python_code/#step-1-generating-rail-spec","text":"Ordinarily, we could create a separate RAIL spec in a file. However, for the sake of this example, we will generate the RAIL spec in the notebook as a string. rail_str = \"\"\" <rail version=\"0.1\"> <output> <pythoncode name=\"python_code\" format=\"bug-free-python\" on-fail-bug-free-python=\"reask\" /> </output> <prompt> Given the following high level leetcode problem description, write a short Python code snippet that solves the problem. Problem Description: {{leetcode_problem}} @complete_json_suffix</prompt> </rail> \"\"\"","title":"Step 1: Generating RAIL Spec"},{"location":"examples/bug_free_python_code/#step-2-create-a-guard-object-with-the-rail-spec","text":"We create a gd.Guard object that will check, validate and correct the generated code. This object: Enforces the quality criteria specified in the RAIL spec (i.e. bug free code). Takes corrective action when the quality criteria are not met (i.e. reasking the LLM). Compiles the schema and type info from the RAIL spec and adds it to the prompt. import guardrails as gd from rich import print guard = gd . Guard . from_rail_string ( rail_str ) The Guard object compiles the output schema and adds it to the prompt. We can see the final prompt below: print ( guard . base_prompt ) Given the following high level leetcode problem description, write a short Python code snippet that solves the problem. Problem Description: { leetcode_problem } Given below is XML that describes the information to extract from this document and the tags to extract it into. < output > <pythoncode name = \"python_code\" format = \"bug-free\" / > < / output > ONLY return a valid JSON object ( no other text is necessary ) , where the key of the field in JSON is the `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere, enter ` None `. Here are examples of simple ( XML, JSON ) pairs that show the expected behavior: - `<string name = 'foo' format = 'two-words lower-case' / >` => ` {{ 'foo' : 'example one' }} ` - `<list name = 'bar' ><string format = 'upper-case' / >< / list >` => ` {{ \"bar\" : [ 'STRING ONE' , 'STRING TWO' , etc. ]}} ` - `<object name = 'baz' ><string name = \"foo\" format = \"capitalize two-words\" / ><integer name = \"index\" format = \"1-indexed\" / >< / object >` = > ` {{ 'baz' : {{ 'foo' : 'Some String' , 'index' : 1 }}}} ` JSON Object:","title":"Step 2: Create a Guard object with the RAIL Spec"},{"location":"examples/bug_free_python_code/#step-3-wrap-the-llm-api-call-with-guard","text":"import openai leetcode_problem = \"\"\" Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000. \"\"\" raw_llm_response , validated_response = guard ( openai . Completion . create , prompt_params = { \"leetcode_problem\" : leetcode_problem }, engine = \"text-davinci-003\" , max_tokens = 2048 , temperature = 0 , ) Running the cell above returns: 1. The raw LLM text output as a single string. 2. A dictionary where the key is python_code and the value is the generated code. print ( validated_response ) { 'python_code' : \"def longestPalindrome(s):\\n longest_palindrome = ''\\n for i in range(len(s)):\\n for j in range(i, len(s)):\\n substring = s[i:j+1]\\n if substring == substring[::-1] and len(substring) > len(longest_palindrome):\\n longest_palindrome = substring\\n return longest_palindrome\" } Here's the generated code: print ( validated_response [ \"python_code\" ]) def longestPalindrome ( s ) : longest_palindrome = '' for i in range ( len ( s )) : for j in range ( i, len ( s )) : substring = s if substring == substring [ :: -1 ] and len ( substring ) > len ( longest_palindrome ) : longest_palindrome = substring return longest_palindrome We can confirm that the code is bug free by executing the code in the environment. try : exec ( validated_response [ \"python_code\" ]) print ( \"Success!\" ) except Exception as e : print ( \"Failed!\" ) Success!","title":"Step 3: Wrap the LLM API call with Guard"},{"location":"examples/extracting_entities/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Extracting entities from a Terms of Service document Note To download this example as a Jupyter notebook, click here . In this example, we will use Guardrails to extract key information from a Terms-of-Service document. Objective We want to extract structured information about all fees and interest rates associated with the Chase credit card. Step 0: Download PDF and load it as string To get started, download the document from here and save it in data/chase_card_agreement.pdf . Guardrails has some built-in functions to help with common tasks. Here, we will use the read_pdf function to load the PDF as a string. import guardrails as gd from rich import print content = gd . docs_utils . read_pdf ( \"data/chase_card_agreement.pdf\" ) print ( f \"Chase Credit Card Document: \\n\\n { content [: 275 ] } \\n ...\" ) Chase Credit Card Document: 2 / 25 / 23 , 7:59 PM about:blank about:blank 1 / 4 PRICING INFORMATION INTEREST RATES AND INTEREST CHARGES Purchase Annual Percentage Rate ( APR ) 0 % Intro APR for the first 18 months that your Account is open. After that, 19.49 %. This APR will vary with the market based on the Prim ... Step 1: Create the RAIL Spec Ordinarily, we would create an RAIL spec in a separate file. For the purposes of this example, we will create the spec in this notebook as a string following the RAIL syntax. For more information on RAIL, see the RAIL documentation . Here, we request: A list of the fees associated with the card. We ask for sub-information, each with its own quality criteria and corrective action. A object (i.e. key-value pairs) for the interest. rail_str = \"\"\" <rail version=\"0.1\"> <output> <list name=\"fees\" description=\"What fees and charges are associated with my account?\"> <object> <integer name=\"index\" format=\"1-indexed\" /> <string name=\"name\" format=\"lower-case; two-words\" on-fail-lower-case=\"noop\" on-fail-two-words=\"reask\"/> <string name=\"explanation\" format=\"one-line\" on-fail-one-line=\"noop\" /> <float name=\"value\" format=\"percentage\"/> </object> </list> <object name=\"interest_rates\" description=\"What are the interest rates offered by the bank on savings and checking accounts, loans, and credit products?\" /> </output> <prompt> Given the following document, answer the following questions. If the answer doesn't exist in the document, enter 'None'. {{document}} @xml_prefix_prompt {output_schema} @json_suffix_prompt_v2_wo_none</prompt> </rail> \"\"\" Step 2: Create a Guard object with the RAIL Spec We create a gd.Guard object that will check, validate and correct the output of the LLM. This object: Enforces the quality criteria specified in the RAIL spec. Takes corrective action when the quality criteria are not met. Compiles the schema and type info from the RAIL spec and adds it to the prompt. guard = gd . Guard . from_rail_string ( rail_str ) /Users/shreyarajpal/guardrails/guardrails/schema.py:187: UserWarning: Validator 1-indexed is not valid for element integer. warnings.warn( /Users/shreyarajpal/guardrails/guardrails/schema.py:187: UserWarning: Validator percentage is not valid for element float. warnings.warn( As we can see, a few formatters weren't supported. These formatters won't be enforced in the output, but this information can still be used to generate a prompt. We see the prompt that will be sent to the LLM. The {document} is substituted with the user provided value at runtime. print ( guard . base_prompt ) Given the following document, answer the following questions. If the answer doesn't exist in the document, enter 'None' . { document } Given below is XML that describes the information to extract from this document and the tags to extract it into. < output > <list name = \"fees\" description = \"What fees and charges are associated with my account?\" > <object> <integer name = \"index\" format = \"1-indexed\" / > <string name = \"name\" format = \"lower-case; two-words\" / > <string name = \"explanation\" format = \"one-line\" / > <float name = \"value\" format = \"percentage\" / > < / object > < / list > <object name = \"interest_rates\" description = \"What are the interest rates offered by the bank on savings and checking accounts, loans, and credit products?\" / > < / output > ONLY return a valid JSON object ( no other text is necessary ) . The JSON MUST conform to the XML format, including any types and format requests e.g. requests for lists, objects and specific types. Be correct and concise. JSON Output: Step 3: Wrap the LLM API call with Guard import openai raw_llm_response , validated_response = guard ( openai . Completion . create , prompt_params = { \"document\" : content [: 6000 ]}, engine = \"text-davinci-003\" , max_tokens = 2048 , temperature = 0 , ) The guard wrapper returns the raw_llm_respose (which is a simple string), and the validated and corrected output (which is a dictionary). We can see that the output is a dictionary with the correct schema and types. print ( validated_response ) { 'fees' : [ { 'index' : 1 , 'name' : 'annual membership' , 'explanation' : 'Annual Membership Fee' , 'value' : 0 } , { 'index' : 2 , 'name' : 'my-chase-plan' , 'explanation' : 'My Chase Plan Fee (fixed finance charge)' , 'value' : 1.72 } , { 'index' : 3 , 'name' : 'balance transfers' , 'explanation' : 'Balance Transfers Intro fee of either $5 or 3% of the amount of each transfer, whichever is greater, on transfers made within 60 days of account opening. After that: Either $5 or 5% of the amount of each transfer, whichever is greater.' , 'value' : 3 } , { 'index' : 4 , 'name' : 'cash advances' , 'explanation' : 'Either $10 or 5% of the amount of each transaction, whichever is greater.' , 'value' : 5 } , { 'index' : 5 , 'name' : 'foreign transactions' , 'explanation' : 'Foreign Transactions 3% of the amount of each transaction in U.S. dollars.' , 'value' : 3 } , { 'index' : 6 , 'name' : 'late payment' , 'explanation' : 'Late Payment Up to $40.' , 'value' : 0 } , { 'index' : 7 , 'name' : 'over-credit-limit' , 'explanation' : 'Over-the-Credit-Limit None' , 'value' : 0 } , { 'index' : 8 , 'name' : 'return payment' , 'explanation' : 'Return Payment Up to $40.' , 'value' : 0 } , { 'index' : 9 , 'name' : 'return check' , 'explanation' : 'Return Check None' , 'value' : 0 } ] , 'interest_rates' : { 'purchase' : { 'apr' : 0 , 'after_apr' : 19.49 } , 'my_chase_loan' : { 'apr' : 19.49 } , 'balance_transfer' : { 'apr' : 0 , 'after_apr' : 19.49 } , 'cash_advance' : { 'apr' : 29.49 } , 'penalty' : { 'apr' : 0 , 'maximum_apr' : 29.99 } } } guard . state . most_recent_call . tree Logs \u251c\u2500\u2500 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Step 1 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Prompt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Given the following document, answer the following questions. If the answer doesn't exist in the \u2502 \u2502 \u2502 \u2502 \u2502 document, enter 'None'. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 2/25/23, 7:59 PM about:blank \u2502 \u2502 \u2502 \u2502 \u2502 about:blank 1/4 \u2502 \u2502 \u2502 \u2502 \u2502 PRICING INFORMATION \u2502 \u2502 \u2502 \u2502 \u2502 INTEREST RATES AND INTEREST CHARGES \u2502 \u2502 \u2502 \u2502 \u2502 Purchase Annual \u2502 \u2502 \u2502 \u2502 \u2502 Percentage Rate (APR) 0% Intro APR for the first 18 months that your Account is open. \u2502 \u2502 \u2502 \u2502 \u2502 After that, 19.49%. This APR will vary with the market based on the Prime \u2502 \u2502 \u2502 \u2502 \u2502 Rate. \u2502 \u2502 \u2502 \u2502 \u2502 a \u2502 \u2502 \u2502 \u2502 \u2502 My Chase Loan \u2502 \u2502 \u2502 \u2502 \u2502 SM APR 19.49%. This APR will vary with the market based on the Prime Rate. \u2502 \u2502 \u2502 \u2502 \u2502 a \u2502 \u2502 \u2502 \u2502 \u2502 Promotional offers with fixed APRs and varying durations may be available from \u2502 \u2502 \u2502 \u2502 \u2502 time to time on some accounts. \u2502 \u2502 \u2502 \u2502 \u2502 Balance Transfer APR 0% Intro APR for the first 18 months that your Account is open. \u2502 \u2502 \u2502 \u2502 \u2502 After that, 19.49%. This APR will vary with the market based on the Prime \u2502 \u2502 \u2502 \u2502 \u2502 Rate. \u2502 \u2502 \u2502 \u2502 \u2502 a \u2502 \u2502 \u2502 \u2502 \u2502 Cash Advance APR 29.49%. This APR will vary with the market based on the Prime Rate. \u2502 \u2502 \u2502 \u2502 \u2502 b \u2502 \u2502 \u2502 \u2502 \u2502 Penalty APR and When \u2502 \u2502 \u2502 \u2502 \u2502 It Applies \u2502 \u2502 \u2502 \u2502 \u2502 Up to 29.99%. This APR will vary with the market based on the Prime Rate. \u2502 \u2502 \u2502 \u2502 \u2502 c \u2502 \u2502 \u2502 \u2502 \u2502 We may apply the Penalty APR to your account if you: \u2502 \u2502 \u2502 \u2502 \u2502 fail to make a Minimum Payment by the date and time that it is due; or \u2502 \u2502 \u2502 \u2502 \u2502 make a payment to us that is returned unpaid. \u2502 \u2502 \u2502 \u2502 \u2502 How Long Will the Penalty APR Apply?: If we apply the Penalty APR for \u2502 \u2502 \u2502 \u2502 \u2502 either of these reasons, the Penalty APR could potentially remain in effect \u2502 \u2502 \u2502 \u2502 \u2502 indefinitely. \u2502 \u2502 \u2502 \u2502 \u2502 How to Avoid Paying \u2502 \u2502 \u2502 \u2502 \u2502 Interest on Purchases \u2502 \u2502 \u2502 \u2502 \u2502 Your due date will be a minimum of 21 days after the close of each billing cycle. \u2502 \u2502 \u2502 \u2502 \u2502 We will not charge you interest on new purchases if you pay your entire balance \u2502 \u2502 \u2502 \u2502 \u2502 or Interest Saving Balance by the due date each month. We will begin charging \u2502 \u2502 \u2502 \u2502 \u2502 interest on balance transfers and cash advances on the transaction date. \u2502 \u2502 \u2502 \u2502 \u2502 Minimum Interest \u2502 \u2502 \u2502 \u2502 \u2502 Charge \u2502 \u2502 \u2502 \u2502 \u2502 None \u2502 \u2502 \u2502 \u2502 \u2502 Credit Card Tips from \u2502 \u2502 \u2502 \u2502 \u2502 the Consumer Financial \u2502 \u2502 \u2502 \u2502 \u2502 Protection Bureau \u2502 \u2502 \u2502 \u2502 \u2502 To learn more about factors to consider when applying for or using a credit card, \u2502 \u2502 \u2502 \u2502 \u2502 visit the website of the Consumer Financial Protection Bureau at \u2502 \u2502 \u2502 \u2502 \u2502 http://www.consumerfinance.gov/learnmore. \u2502 \u2502 \u2502 \u2502 \u2502 FEES \u2502 \u2502 \u2502 \u2502 \u2502 Annual Membership \u2502 \u2502 \u2502 \u2502 \u2502 Fee \u2502 \u2502 \u2502 \u2502 \u2502 None \u2502 \u2502 \u2502 \u2502 \u2502 My Chase Plan \u2502 \u2502 \u2502 \u2502 \u2502 SM Fee \u2502 \u2502 \u2502 \u2502 \u2502 (fixed finance charge) \u2502 \u2502 \u2502 \u2502 \u2502 Monthly fee of 0% of the amount of each eligible purchase transaction or \u2502 \u2502 \u2502 \u2502 \u2502 amount selected to create a My Chase Plan while in the 0% Intro Purchase \u2502 \u2502 \u2502 \u2502 \u2502 APR period. \u2502 \u2502 \u2502 \u2502 \u2502 After that, monthly fee of 1.72% of the amount of each eligible purchase \u2502 \u2502 \u2502 \u2502 \u2502 transaction or amount selected to create a My Chase Plan. The My Chase Plan \u2502 \u2502 \u2502 \u2502 \u2502 Fee will be determined at the time each My Chase Plan is created and will \u2502 \u2502 \u2502 \u2502 \u2502 remain the same until the My Chase Plan is paid in full. \u2502 \u2502 \u2502 \u2502 \u2502 d \u2502 \u2502 \u2502 \u2502 \u2502 Transaction Fees \u2502 \u2502 \u2502 \u2502 \u2502 Balance Transfers Intro fee of either $5 or 3% of the amount of each transfer, whichever is greater, \u2502 \u2502 \u2502 \u2502 \u2502 on transfers made within 60 days of account opening. After that: Either $5 or 5% \u2502 \u2502 \u2502 \u2502 \u2502 of the amount of each transfer, whichever is greater. \u2502 \u2502 \u2502 \u2502 \u2502 Cash Advances Either $10 or 5% of the amount of each transaction, whichever is greater. \u2502 \u2502 \u2502 \u2502 \u2502 2/25/23, 7:59 PM about:blank \u2502 \u2502 \u2502 \u2502 \u2502 about:blank 2/4 \u2502 \u2502 \u2502 \u2502 \u2502 Foreign Transactions 3% of the amount of each transaction in U.S. dollars. \u2502 \u2502 \u2502 \u2502 \u2502 Penalty Fees \u2502 \u2502 \u2502 \u2502 \u2502 Late Payment Up to $40. \u2502 \u2502 \u2502 \u2502 \u2502 Over-the-Credit-Limit None \u2502 \u2502 \u2502 \u2502 \u2502 Return Payment Up to $40. \u2502 \u2502 \u2502 \u2502 \u2502 Return Check None \u2502 \u2502 \u2502 \u2502 \u2502 Note: This account may not be eligible for balance transfers. \u2502 \u2502 \u2502 \u2502 \u2502 Loss of Intro APR: We will end your introductory APR if any required Minimum Payment is 60 days late, \u2502 \u2502 \u2502 \u2502 \u2502 and \u2502 \u2502 \u2502 \u2502 \u2502 apply the Penalty APR. \u2502 \u2502 \u2502 \u2502 \u2502 How We Will Calculate Your Balance: We use the daily balance method (including new transactions). \u2502 \u2502 \u2502 \u2502 \u2502 Prime Rate: Variable APRs are based on the 7.75% Prime Rate as of 2/7/2023. \u2502 \u2502 \u2502 \u2502 \u2502 aWe add 11.74% to the Prime Rate to determine the Purchase/My Chase Loan/Balance Transfer APR. \u2502 \u2502 \u2502 \u2502 \u2502 Maximum APR 29.99%. \u2502 \u2502 \u2502 \u2502 \u2502 bWe add 21.74% to the Prime Rate to determine the Cash Advance APR. Maximum APR 29.99%. \u2502 \u2502 \u2502 \u2502 \u2502 cWe add up to 26.99% to the Prime Rate to determine the Penalty APR. Maximum APR 29.99%. \u2502 \u2502 \u2502 \u2502 \u2502 dMy Chase Plan Fee: The My Chase Plan Fee is calculated at the time each plan is created and is based \u2502 \u2502 \u2502 \u2502 \u2502 on \u2502 \u2502 \u2502 \u2502 \u2502 the amount of each purchase transaction or amount selected to create the plan, the number of billing \u2502 \u2502 \u2502 \u2502 \u2502 periods \u2502 \u2502 \u2502 \u2502 \u2502 you choose to pay the balance in full, and other factors. The monthly and aggregate dollar amount of \u2502 \u2502 \u2502 \u2502 \u2502 your My \u2502 \u2502 \u2502 \u2502 \u2502 Chase Plan Fee will be disclosed during the activation of each My Chase Plan. \u2502 \u2502 \u2502 \u2502 \u2502 MILITARY LENDING ACT NOTICE: Federal law provides important protections to members of the Armed \u2502 \u2502 \u2502 \u2502 \u2502 Forces and their dependents relating to extensions of consumer credit. In general, the cost of consumer \u2502 \u2502 \u2502 \u2502 \u2502 credit \u2502 \u2502 \u2502 \u2502 \u2502 to a member of the Armed Forces and his or her dependent may not exceed an annual percentage rate of 36 \u2502 \u2502 \u2502 \u2502 \u2502 percent. This rate must include, as applicable to the credit transaction or account: the costs \u2502 \u2502 \u2502 \u2502 \u2502 associated with \u2502 \u2502 \u2502 \u2502 \u2502 credit insurance premiums; fees for ancillary products sold in connection with the credit transaction; \u2502 \u2502 \u2502 \u2502 \u2502 any \u2502 \u2502 \u2502 \u2502 \u2502 application fee charged (other than certain application fees for specified credit transactions or \u2502 \u2502 \u2502 \u2502 \u2502 accounts); and \u2502 \u2502 \u2502 \u2502 \u2502 any participation fee charged (other than certain participation fees for a credit card account). To \u2502 \u2502 \u2502 \u2502 \u2502 receive this \u2502 \u2502 \u2502 \u2502 \u2502 information and a description of your payment obligation verbally, please call 1-800-235-9978. \u2502 \u2502 \u2502 \u2502 \u2502 TERMS & CONDITIONS \u2502 \u2502 \u2502 \u2502 \u2502 Authorization: When you respond to this credit card offer from JPMorgan Chase Bank, N.A., Member FDIC, \u2502 \u2502 \u2502 \u2502 \u2502 a \u2502 \u2502 \u2502 \u2502 \u2502 subsidiary of JPMorgan Chase & Co. (\"Chase\", \"we\", or \"us\"), you agree to the following: \u2502 \u2502 \u2502 \u2502 \u2502 1. You authorize us to obtain credit bureau reports, employment, and income information about you that \u2502 \u2502 \u2502 \u2502 \u2502 we \u2502 \u2502 \u2502 \u2502 \u2502 will use when considering your application for credit. We may obtain and use information about your \u2502 \u2502 \u2502 \u2502 \u2502 accounts with us and others such as Checking, Deposit, Investment, and Utility accounts from credit \u2502 \u2502 \u2502 \u2502 \u2502 bureaus and other entities. You also authorize us to obtain credit bureau reports and any other \u2502 \u2502 \u2502 \u2502 \u2502 information about you in connection with: 1) extensions of credit on your account; 2) the \u2502 \u2502 \u2502 \u2502 \u2502 administration, \u2502 \u2502 \u2502 \u2502 \u2502 review or collection of your account; and 3) offering you enhanced or additional products and services. \u2502 \u2502 \u2502 \u2502 \u2502 If \u2502 \u2502 \u2502 \u2502 \u2502 you ask, we will tell you the name and address of the credit bureau from which we obtained a report \u2502 \u2502 \u2502 \u2502 \u2502 about you. \u2502 \u2502 \u2502 \u2502 \u2502 2. If an account is opened, you will receive a Cardmember Agreement with your card(s). You agree to the \u2502 \u2502 \u2502 \u2502 \u2502 terms of this agreement by: using the account or any card, authorizing their use, or making any payment \u2502 \u2502 \u2502 \u2502 \u2502 on the account. \u2502 \u2502 \u2502 \u2502 \u2502 3. By providing your mobile ph \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Given below is XML that describes the information to extract from this document and the tags to extract \u2502 \u2502 \u2502 \u2502 \u2502 it into. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 <output> \u2502 \u2502 \u2502 \u2502 \u2502 <list name=\"fees\" description=\"What fees and charges are associated with my account?\"> \u2502 \u2502 \u2502 \u2502 \u2502 <object> \u2502 \u2502 \u2502 \u2502 \u2502 <integer name=\"index\" format=\"1-indexed\"/> \u2502 \u2502 \u2502 \u2502 \u2502 <string name=\"name\" format=\"lower-case; two-words\"/> \u2502 \u2502 \u2502 \u2502 \u2502 <string name=\"explanation\" format=\"one-line\"/> \u2502 \u2502 \u2502 \u2502 \u2502 <float name=\"value\" format=\"percentage\"/> \u2502 \u2502 \u2502 \u2502 \u2502 </object> \u2502 \u2502 \u2502 \u2502 \u2502 </list> \u2502 \u2502 \u2502 \u2502 \u2502 <object name=\"interest_rates\" description=\"What are the interest rates offered by the bank on \u2502 \u2502 \u2502 \u2502 \u2502 savings and checking accounts, loans, and credit products?\"/> \u2502 \u2502 \u2502 \u2502 \u2502 </output> \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 ONLY return a valid JSON object (no other text is necessary). The JSON MUST conform to the XML format, \u2502 \u2502 \u2502 \u2502 \u2502 including any types and format requests e.g. requests for lists, objects and specific types. Be correct \u2502 \u2502 \u2502 \u2502 \u2502 and concise. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 JSON Output: \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Raw LLM Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 \"fees\": [ \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 \"index\": 1, \u2502 \u2502 \u2502 \u2502 \u2502 \"name\": \"annual membership\", \u2502 \u2502 \u2502 \u2502 \u2502 \"explanation\": \"Annual Membership Fee\", \u2502 \u2502 \u2502 \u2502 \u2502 \"value\": 0 \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 \"index\": 2, \u2502 \u2502 \u2502 \u2502 \u2502 \"name\": \"my chase plan\", \u2502 \u2502 \u2502 \u2502 \u2502 \"explanation\": \"My Chase Plan Fee (fixed finance charge)\", \u2502 \u2502 \u2502 \u2502 \u2502 \"value\": 1.72 \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 \"index\": 3, \u2502 \u2502 \u2502 \u2502 \u2502 \"name\": \"balance transfers\", \u2502 \u2502 \u2502 \u2502 \u2502 \"explanation\": \"Balance Transfers Intro fee of either $5 or 3% of the amount of each \u2502 \u2502 \u2502 \u2502 \u2502 transfer, whichever is greater, on transfers made within 60 days of account opening. After that: Either \u2502 \u2502 \u2502 \u2502 \u2502 $5 or 5% of the amount of each transfer, whichever is greater.\", \u2502 \u2502 \u2502 \u2502 \u2502 \"value\": 3 \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 \"index\": 4, \u2502 \u2502 \u2502 \u2502 \u2502 \"name\": \"cash advances\", \u2502 \u2502 \u2502 \u2502 \u2502 \"explanation\": \"Either $10 or 5% of the amount of each transaction, whichever is greater.\", \u2502 \u2502 \u2502 \u2502 \u2502 \"value\": 5 \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 \"index\": 5, \u2502 \u2502 \u2502 \u2502 \u2502 \"name\": \"foreign transactions\", \u2502 \u2502 \u2502 \u2502 \u2502 \"explanation\": \"Foreign Transactions 3% of the amount of each transaction in U.S. \u2502 \u2502 \u2502 \u2502 \u2502 dollars.\", \u2502 \u2502 \u2502 \u2502 \u2502 \"value\": 3 \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 \"index\": 6, \u2502 \u2502 \u2502 \u2502 \u2502 \"name\": \"late payment\", \u2502 \u2502 \u2502 \u2502 \u2502 \"explanation\": \"Late Payment Up to $40.\", \u2502 \u2502 \u2502 \u2502 \u2502 \"value\": 0 \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 \"index\": 7, \u2502 \u2502 \u2502 \u2502 \u2502 \"name\": \"over-the-credit-limit\", \u2502 \u2502 \u2502 \u2502 \u2502 \"explanation\": \"Over-the-Credit-Limit None\", \u2502 \u2502 \u2502 \u2502 \u2502 \"value\": 0 \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 \"index\": 8, \u2502 \u2502 \u2502 \u2502 \u2502 \"name\": \"return payment\", \u2502 \u2502 \u2502 \u2502 \u2502 \"explanation\": \"Return Payment Up to $40.\", \u2502 \u2502 \u2502 \u2502 \u2502 \"value\": 0 \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 \"index\": 9, \u2502 \u2502 \u2502 \u2502 \u2502 \"name\": \"return check\", \u2502 \u2502 \u2502 \u2502 \u2502 \"explanation\": \"Return Check None\", \u2502 \u2502 \u2502 \u2502 \u2502 \"value\": 0 \u2502 \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 \u2502 ], \u2502 \u2502 \u2502 \u2502 \u2502 \"interest_rates\": { \u2502 \u2502 \u2502 \u2502 \u2502 \"purchase\": { \u2502 \u2502 \u2502 \u2502 \u2502 \"apr\": 0, \u2502 \u2502 \u2502 \u2502 \u2502 \"after_apr\": 19.49 \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 \"my_chase_loan\": { \u2502 \u2502 \u2502 \u2502 \u2502 \"apr\": 19.49 \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 \"balance_transfer\": { \u2502 \u2502 \u2502 \u2502 \u2502 \"apr\": 0, \u2502 \u2502 \u2502 \u2502 \u2502 \"after_apr\": 19.49 \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 \"cash_advance\": { \u2502 \u2502 \u2502 \u2502 \u2502 \"apr\": 29.49 \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 \"penalty\": { \u2502 \u2502 \u2502 \u2502 \u2502 \"apr\": 0, \u2502 \u2502 \u2502 \u2502 \u2502 \"maximum_apr\": 29.99 \u2502 \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Validated Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 'fees': [ \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 'index': 1, \u2502 \u2502 \u2502 \u2502 \u2502 'name': 'annual membership', \u2502 \u2502 \u2502 \u2502 \u2502 'explanation': 'Annual Membership Fee', \u2502 \u2502 \u2502 \u2502 \u2502 'value': 0 \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 'index': 2, \u2502 \u2502 \u2502 \u2502 \u2502 'name': ReAsk( \u2502 \u2502 \u2502 \u2502 \u2502 incorrect_value='my chase plan', \u2502 \u2502 \u2502 \u2502 \u2502 error_message='must be exactly two words', \u2502 \u2502 \u2502 \u2502 \u2502 fix_value='my chase', \u2502 \u2502 \u2502 \u2502 \u2502 path=['fees', 1, 'name'] \u2502 \u2502 \u2502 \u2502 \u2502 ), \u2502 \u2502 \u2502 \u2502 \u2502 'explanation': 'My Chase Plan Fee (fixed finance charge)', \u2502 \u2502 \u2502 \u2502 \u2502 'value': 1.72 \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 'index': 3, \u2502 \u2502 \u2502 \u2502 \u2502 'name': 'balance transfers', \u2502 \u2502 \u2502 \u2502 \u2502 'explanation': 'Balance Transfers Intro fee of either $5 or 3% of the amount of each \u2502 \u2502 \u2502 \u2502 \u2502 transfer, whichever is greater, on transfers made within 60 days of account opening. After that: Either \u2502 \u2502 \u2502 \u2502 \u2502 $5 or 5% of the amount of each transfer, whichever is greater.', \u2502 \u2502 \u2502 \u2502 \u2502 'value': 3 \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 'index': 4, \u2502 \u2502 \u2502 \u2502 \u2502 'name': 'cash advances', \u2502 \u2502 \u2502 \u2502 \u2502 'explanation': 'Either $10 or 5% of the amount of each transaction, whichever is greater.', \u2502 \u2502 \u2502 \u2502 \u2502 'value': 5 \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 'index': 5, \u2502 \u2502 \u2502 \u2502 \u2502 'name': 'foreign transactions', \u2502 \u2502 \u2502 \u2502 \u2502 'explanation': 'Foreign Transactions 3% of the amount of each transaction in U.S. \u2502 \u2502 \u2502 \u2502 \u2502 dollars.', \u2502 \u2502 \u2502 \u2502 \u2502 'value': 3 \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 'index': 6, \u2502 \u2502 \u2502 \u2502 \u2502 'name': 'late payment', \u2502 \u2502 \u2502 \u2502 \u2502 'explanation': 'Late Payment Up to $40.', \u2502 \u2502 \u2502 \u2502 \u2502 'value': 0 \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 'index': 7, \u2502 \u2502 \u2502 \u2502 \u2502 'name': ReAsk( \u2502 \u2502 \u2502 \u2502 \u2502 incorrect_value='over-the-credit-limit', \u2502 \u2502 \u2502 \u2502 \u2502 error_message='must be exactly two words', \u2502 \u2502 \u2502 \u2502 \u2502 fix_value='over-the-credit-limit', \u2502 \u2502 \u2502 \u2502 \u2502 path=['fees', 6, 'name'] \u2502 \u2502 \u2502 \u2502 \u2502 ), \u2502 \u2502 \u2502 \u2502 \u2502 'explanation': 'Over-the-Credit-Limit None', \u2502 \u2502 \u2502 \u2502 \u2502 'value': 0 \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 'index': 8, \u2502 \u2502 \u2502 \u2502 \u2502 'name': 'return payment', \u2502 \u2502 \u2502 \u2502 \u2502 'explanation': 'Return Payment Up to $40.', \u2502 \u2502 \u2502 \u2502 \u2502 'value': 0 \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 'index': 9, \u2502 \u2502 \u2502 \u2502 \u2502 'name': 'return check', \u2502 \u2502 \u2502 \u2502 \u2502 'explanation': 'Return Check None', \u2502 \u2502 \u2502 \u2502 \u2502 'value': 0 \u2502 \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 \u2502 ], \u2502 \u2502 \u2502 \u2502 \u2502 'interest_rates': { \u2502 \u2502 \u2502 \u2502 \u2502 'purchase': {'apr': 0, 'after_apr': 19.49}, \u2502 \u2502 \u2502 \u2502 \u2502 'my_chase_loan': {'apr': 19.49}, \u2502 \u2502 \u2502 \u2502 \u2502 'balance_transfer': {'apr': 0, 'after_apr': 19.49}, \u2502 \u2502 \u2502 \u2502 \u2502 'cash_advance': {'apr': 29.49}, \u2502 \u2502 \u2502 \u2502 \u2502 'penalty': {'apr': 0, 'maximum_apr': 29.99} \u2502 \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2514\u2500\u2500 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Step 2 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Prompt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 I was given the following JSON response, which had problems due to incorrect values. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"fees\": [ \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"name\": { \u2502 \u2502 \u2502 \u2502 \"incorrect_value\": \"my chase plan\", \u2502 \u2502 \u2502 \u2502 \"error_message\": \"must be exactly two words\" \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"name\": { \u2502 \u2502 \u2502 \u2502 \"incorrect_value\": \"over-the-credit-limit\", \u2502 \u2502 \u2502 \u2502 \"error_message\": \"must be exactly two words\" \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 ] \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Help me correct the incorrect values based on the given error messages. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Given below is XML that describes the information to extract from this document and the tags to extract \u2502 \u2502 \u2502 \u2502 it into. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 <output> \u2502 \u2502 \u2502 \u2502 <list name=\"fees\" description=\"What fees and charges are associated with my account?\"> \u2502 \u2502 \u2502 \u2502 <object> \u2502 \u2502 \u2502 \u2502 <string name=\"name\" format=\"lower-case; two-words\"/> \u2502 \u2502 \u2502 \u2502 </object> \u2502 \u2502 \u2502 \u2502 </list> \u2502 \u2502 \u2502 \u2502 </output> \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 ONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the \u2502 \u2502 \u2502 \u2502 `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding \u2502 \u2502 \u2502 \u2502 XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. \u2502 \u2502 \u2502 \u2502 requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere, \u2502 \u2502 \u2502 \u2502 enter `None`. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Here are examples of simple (XML, JSON) pairs that show the expected behavior: \u2502 \u2502 \u2502 \u2502 - `<string name='foo' format='two-words lower-case' />` => `{{'foo': 'example one'}}` \u2502 \u2502 \u2502 \u2502 - `<list name='bar'><string format='upper-case' /></list>` => `{{\"bar\": ['STRING ONE', 'STRING TWO', \u2502 \u2502 \u2502 \u2502 etc.]}}` \u2502 \u2502 \u2502 \u2502 - `<object name='baz'><string name=\"foo\" format=\"capitalize two-words\" /><integer name=\"index\" \u2502 \u2502 \u2502 \u2502 format=\"1-indexed\" /></object>` => `{{'baz': {{'foo': 'Some String', 'index': 1}}}}` \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 JSON Object: \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Raw LLM Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"fees\": [ \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"name\": \"my-chase-plan\" \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"name\": \"over-credit-limit\" \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 ] \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Validated Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'fees': [ \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'index': 1, \u2502 \u2502 \u2502 \u2502 'name': 'annual membership', \u2502 \u2502 \u2502 \u2502 'explanation': 'Annual Membership Fee', \u2502 \u2502 \u2502 \u2502 'value': 0 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'index': 2, \u2502 \u2502 \u2502 \u2502 'name': 'my-chase-plan', \u2502 \u2502 \u2502 \u2502 'explanation': 'My Chase Plan Fee (fixed finance charge)', \u2502 \u2502 \u2502 \u2502 'value': 1.72 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'index': 3, \u2502 \u2502 \u2502 \u2502 'name': 'balance transfers', \u2502 \u2502 \u2502 \u2502 'explanation': 'Balance Transfers Intro fee of either $5 or 3% of the amount of each \u2502 \u2502 \u2502 \u2502 transfer, whichever is greater, on transfers made within 60 days of account opening. After that: Either \u2502 \u2502 \u2502 \u2502 $5 or 5% of the amount of each transfer, whichever is greater.', \u2502 \u2502 \u2502 \u2502 'value': 3 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'index': 4, \u2502 \u2502 \u2502 \u2502 'name': 'cash advances', \u2502 \u2502 \u2502 \u2502 'explanation': 'Either $10 or 5% of the amount of each transaction, whichever is greater.', \u2502 \u2502 \u2502 \u2502 'value': 5 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'index': 5, \u2502 \u2502 \u2502 \u2502 'name': 'foreign transactions', \u2502 \u2502 \u2502 \u2502 'explanation': 'Foreign Transactions 3% of the amount of each transaction in U.S. \u2502 \u2502 \u2502 \u2502 dollars.', \u2502 \u2502 \u2502 \u2502 'value': 3 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'index': 6, \u2502 \u2502 \u2502 \u2502 'name': 'late payment', \u2502 \u2502 \u2502 \u2502 'explanation': 'Late Payment Up to $40.', \u2502 \u2502 \u2502 \u2502 'value': 0 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'index': 7, \u2502 \u2502 \u2502 \u2502 'name': 'over-credit-limit', \u2502 \u2502 \u2502 \u2502 'explanation': 'Over-the-Credit-Limit None', \u2502 \u2502 \u2502 \u2502 'value': 0 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'index': 8, \u2502 \u2502 \u2502 \u2502 'name': 'return payment', \u2502 \u2502 \u2502 \u2502 'explanation': 'Return Payment Up to $40.', \u2502 \u2502 \u2502 \u2502 'value': 0 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'index': 9, \u2502 \u2502 \u2502 \u2502 'name': 'return check', \u2502 \u2502 \u2502 \u2502 'explanation': 'Return Check None', \u2502 \u2502 \u2502 \u2502 'value': 0 \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 ], \u2502 \u2502 \u2502 \u2502 'interest_rates': { \u2502 \u2502 \u2502 \u2502 'purchase': {'apr': 0, 'after_apr': 19.49}, \u2502 \u2502 \u2502 \u2502 'my_chase_loan': {'apr': 19.49}, \u2502 \u2502 \u2502 \u2502 'balance_transfer': {'apr': 0, 'after_apr': 19.49}, \u2502 \u2502 \u2502 \u2502 'cash_advance': {'apr': 29.49}, \u2502 \u2502 \u2502 \u2502 'penalty': {'apr': 0, 'maximum_apr': 29.99} \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"Extracting entities from ToS"},{"location":"examples/extracting_entities/#extracting-entities-from-a-terms-of-service-document","text":"Note To download this example as a Jupyter notebook, click here . In this example, we will use Guardrails to extract key information from a Terms-of-Service document.","title":"Extracting entities from a Terms of Service document"},{"location":"examples/extracting_entities/#objective","text":"We want to extract structured information about all fees and interest rates associated with the Chase credit card.","title":"Objective"},{"location":"examples/extracting_entities/#step-0-download-pdf-and-load-it-as-string","text":"To get started, download the document from here and save it in data/chase_card_agreement.pdf . Guardrails has some built-in functions to help with common tasks. Here, we will use the read_pdf function to load the PDF as a string. import guardrails as gd from rich import print content = gd . docs_utils . read_pdf ( \"data/chase_card_agreement.pdf\" ) print ( f \"Chase Credit Card Document: \\n\\n { content [: 275 ] } \\n ...\" ) Chase Credit Card Document: 2 / 25 / 23 , 7:59 PM about:blank about:blank 1 / 4 PRICING INFORMATION INTEREST RATES AND INTEREST CHARGES Purchase Annual Percentage Rate ( APR ) 0 % Intro APR for the first 18 months that your Account is open. After that, 19.49 %. This APR will vary with the market based on the Prim ...","title":"Step 0: Download PDF and load it as string"},{"location":"examples/extracting_entities/#step-1-create-the-rail-spec","text":"Ordinarily, we would create an RAIL spec in a separate file. For the purposes of this example, we will create the spec in this notebook as a string following the RAIL syntax. For more information on RAIL, see the RAIL documentation . Here, we request: A list of the fees associated with the card. We ask for sub-information, each with its own quality criteria and corrective action. A object (i.e. key-value pairs) for the interest. rail_str = \"\"\" <rail version=\"0.1\"> <output> <list name=\"fees\" description=\"What fees and charges are associated with my account?\"> <object> <integer name=\"index\" format=\"1-indexed\" /> <string name=\"name\" format=\"lower-case; two-words\" on-fail-lower-case=\"noop\" on-fail-two-words=\"reask\"/> <string name=\"explanation\" format=\"one-line\" on-fail-one-line=\"noop\" /> <float name=\"value\" format=\"percentage\"/> </object> </list> <object name=\"interest_rates\" description=\"What are the interest rates offered by the bank on savings and checking accounts, loans, and credit products?\" /> </output> <prompt> Given the following document, answer the following questions. If the answer doesn't exist in the document, enter 'None'. {{document}} @xml_prefix_prompt {output_schema} @json_suffix_prompt_v2_wo_none</prompt> </rail> \"\"\"","title":"Step 1: Create the RAIL Spec"},{"location":"examples/extracting_entities/#step-2-create-a-guard-object-with-the-rail-spec","text":"We create a gd.Guard object that will check, validate and correct the output of the LLM. This object: Enforces the quality criteria specified in the RAIL spec. Takes corrective action when the quality criteria are not met. Compiles the schema and type info from the RAIL spec and adds it to the prompt. guard = gd . Guard . from_rail_string ( rail_str ) /Users/shreyarajpal/guardrails/guardrails/schema.py:187: UserWarning: Validator 1-indexed is not valid for element integer. warnings.warn( /Users/shreyarajpal/guardrails/guardrails/schema.py:187: UserWarning: Validator percentage is not valid for element float. warnings.warn( As we can see, a few formatters weren't supported. These formatters won't be enforced in the output, but this information can still be used to generate a prompt. We see the prompt that will be sent to the LLM. The {document} is substituted with the user provided value at runtime. print ( guard . base_prompt ) Given the following document, answer the following questions. If the answer doesn't exist in the document, enter 'None' . { document } Given below is XML that describes the information to extract from this document and the tags to extract it into. < output > <list name = \"fees\" description = \"What fees and charges are associated with my account?\" > <object> <integer name = \"index\" format = \"1-indexed\" / > <string name = \"name\" format = \"lower-case; two-words\" / > <string name = \"explanation\" format = \"one-line\" / > <float name = \"value\" format = \"percentage\" / > < / object > < / list > <object name = \"interest_rates\" description = \"What are the interest rates offered by the bank on savings and checking accounts, loans, and credit products?\" / > < / output > ONLY return a valid JSON object ( no other text is necessary ) . The JSON MUST conform to the XML format, including any types and format requests e.g. requests for lists, objects and specific types. Be correct and concise. JSON Output:","title":"Step 2: Create a Guard object with the RAIL Spec"},{"location":"examples/extracting_entities/#step-3-wrap-the-llm-api-call-with-guard","text":"import openai raw_llm_response , validated_response = guard ( openai . Completion . create , prompt_params = { \"document\" : content [: 6000 ]}, engine = \"text-davinci-003\" , max_tokens = 2048 , temperature = 0 , ) The guard wrapper returns the raw_llm_respose (which is a simple string), and the validated and corrected output (which is a dictionary). We can see that the output is a dictionary with the correct schema and types. print ( validated_response ) { 'fees' : [ { 'index' : 1 , 'name' : 'annual membership' , 'explanation' : 'Annual Membership Fee' , 'value' : 0 } , { 'index' : 2 , 'name' : 'my-chase-plan' , 'explanation' : 'My Chase Plan Fee (fixed finance charge)' , 'value' : 1.72 } , { 'index' : 3 , 'name' : 'balance transfers' , 'explanation' : 'Balance Transfers Intro fee of either $5 or 3% of the amount of each transfer, whichever is greater, on transfers made within 60 days of account opening. After that: Either $5 or 5% of the amount of each transfer, whichever is greater.' , 'value' : 3 } , { 'index' : 4 , 'name' : 'cash advances' , 'explanation' : 'Either $10 or 5% of the amount of each transaction, whichever is greater.' , 'value' : 5 } , { 'index' : 5 , 'name' : 'foreign transactions' , 'explanation' : 'Foreign Transactions 3% of the amount of each transaction in U.S. dollars.' , 'value' : 3 } , { 'index' : 6 , 'name' : 'late payment' , 'explanation' : 'Late Payment Up to $40.' , 'value' : 0 } , { 'index' : 7 , 'name' : 'over-credit-limit' , 'explanation' : 'Over-the-Credit-Limit None' , 'value' : 0 } , { 'index' : 8 , 'name' : 'return payment' , 'explanation' : 'Return Payment Up to $40.' , 'value' : 0 } , { 'index' : 9 , 'name' : 'return check' , 'explanation' : 'Return Check None' , 'value' : 0 } ] , 'interest_rates' : { 'purchase' : { 'apr' : 0 , 'after_apr' : 19.49 } , 'my_chase_loan' : { 'apr' : 19.49 } , 'balance_transfer' : { 'apr' : 0 , 'after_apr' : 19.49 } , 'cash_advance' : { 'apr' : 29.49 } , 'penalty' : { 'apr' : 0 , 'maximum_apr' : 29.99 } } } guard . state . most_recent_call . tree Logs \u251c\u2500\u2500 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Step 1 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Prompt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Given the following document, answer the following questions. If the answer doesn't exist in the \u2502 \u2502 \u2502 \u2502 \u2502 document, enter 'None'. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 2/25/23, 7:59 PM about:blank \u2502 \u2502 \u2502 \u2502 \u2502 about:blank 1/4 \u2502 \u2502 \u2502 \u2502 \u2502 PRICING INFORMATION \u2502 \u2502 \u2502 \u2502 \u2502 INTEREST RATES AND INTEREST CHARGES \u2502 \u2502 \u2502 \u2502 \u2502 Purchase Annual \u2502 \u2502 \u2502 \u2502 \u2502 Percentage Rate (APR) 0% Intro APR for the first 18 months that your Account is open. \u2502 \u2502 \u2502 \u2502 \u2502 After that, 19.49%. This APR will vary with the market based on the Prime \u2502 \u2502 \u2502 \u2502 \u2502 Rate. \u2502 \u2502 \u2502 \u2502 \u2502 a \u2502 \u2502 \u2502 \u2502 \u2502 My Chase Loan \u2502 \u2502 \u2502 \u2502 \u2502 SM APR 19.49%. This APR will vary with the market based on the Prime Rate. \u2502 \u2502 \u2502 \u2502 \u2502 a \u2502 \u2502 \u2502 \u2502 \u2502 Promotional offers with fixed APRs and varying durations may be available from \u2502 \u2502 \u2502 \u2502 \u2502 time to time on some accounts. \u2502 \u2502 \u2502 \u2502 \u2502 Balance Transfer APR 0% Intro APR for the first 18 months that your Account is open. \u2502 \u2502 \u2502 \u2502 \u2502 After that, 19.49%. This APR will vary with the market based on the Prime \u2502 \u2502 \u2502 \u2502 \u2502 Rate. \u2502 \u2502 \u2502 \u2502 \u2502 a \u2502 \u2502 \u2502 \u2502 \u2502 Cash Advance APR 29.49%. This APR will vary with the market based on the Prime Rate. \u2502 \u2502 \u2502 \u2502 \u2502 b \u2502 \u2502 \u2502 \u2502 \u2502 Penalty APR and When \u2502 \u2502 \u2502 \u2502 \u2502 It Applies \u2502 \u2502 \u2502 \u2502 \u2502 Up to 29.99%. This APR will vary with the market based on the Prime Rate. \u2502 \u2502 \u2502 \u2502 \u2502 c \u2502 \u2502 \u2502 \u2502 \u2502 We may apply the Penalty APR to your account if you: \u2502 \u2502 \u2502 \u2502 \u2502 fail to make a Minimum Payment by the date and time that it is due; or \u2502 \u2502 \u2502 \u2502 \u2502 make a payment to us that is returned unpaid. \u2502 \u2502 \u2502 \u2502 \u2502 How Long Will the Penalty APR Apply?: If we apply the Penalty APR for \u2502 \u2502 \u2502 \u2502 \u2502 either of these reasons, the Penalty APR could potentially remain in effect \u2502 \u2502 \u2502 \u2502 \u2502 indefinitely. \u2502 \u2502 \u2502 \u2502 \u2502 How to Avoid Paying \u2502 \u2502 \u2502 \u2502 \u2502 Interest on Purchases \u2502 \u2502 \u2502 \u2502 \u2502 Your due date will be a minimum of 21 days after the close of each billing cycle. \u2502 \u2502 \u2502 \u2502 \u2502 We will not charge you interest on new purchases if you pay your entire balance \u2502 \u2502 \u2502 \u2502 \u2502 or Interest Saving Balance by the due date each month. We will begin charging \u2502 \u2502 \u2502 \u2502 \u2502 interest on balance transfers and cash advances on the transaction date. \u2502 \u2502 \u2502 \u2502 \u2502 Minimum Interest \u2502 \u2502 \u2502 \u2502 \u2502 Charge \u2502 \u2502 \u2502 \u2502 \u2502 None \u2502 \u2502 \u2502 \u2502 \u2502 Credit Card Tips from \u2502 \u2502 \u2502 \u2502 \u2502 the Consumer Financial \u2502 \u2502 \u2502 \u2502 \u2502 Protection Bureau \u2502 \u2502 \u2502 \u2502 \u2502 To learn more about factors to consider when applying for or using a credit card, \u2502 \u2502 \u2502 \u2502 \u2502 visit the website of the Consumer Financial Protection Bureau at \u2502 \u2502 \u2502 \u2502 \u2502 http://www.consumerfinance.gov/learnmore. \u2502 \u2502 \u2502 \u2502 \u2502 FEES \u2502 \u2502 \u2502 \u2502 \u2502 Annual Membership \u2502 \u2502 \u2502 \u2502 \u2502 Fee \u2502 \u2502 \u2502 \u2502 \u2502 None \u2502 \u2502 \u2502 \u2502 \u2502 My Chase Plan \u2502 \u2502 \u2502 \u2502 \u2502 SM Fee \u2502 \u2502 \u2502 \u2502 \u2502 (fixed finance charge) \u2502 \u2502 \u2502 \u2502 \u2502 Monthly fee of 0% of the amount of each eligible purchase transaction or \u2502 \u2502 \u2502 \u2502 \u2502 amount selected to create a My Chase Plan while in the 0% Intro Purchase \u2502 \u2502 \u2502 \u2502 \u2502 APR period. \u2502 \u2502 \u2502 \u2502 \u2502 After that, monthly fee of 1.72% of the amount of each eligible purchase \u2502 \u2502 \u2502 \u2502 \u2502 transaction or amount selected to create a My Chase Plan. The My Chase Plan \u2502 \u2502 \u2502 \u2502 \u2502 Fee will be determined at the time each My Chase Plan is created and will \u2502 \u2502 \u2502 \u2502 \u2502 remain the same until the My Chase Plan is paid in full. \u2502 \u2502 \u2502 \u2502 \u2502 d \u2502 \u2502 \u2502 \u2502 \u2502 Transaction Fees \u2502 \u2502 \u2502 \u2502 \u2502 Balance Transfers Intro fee of either $5 or 3% of the amount of each transfer, whichever is greater, \u2502 \u2502 \u2502 \u2502 \u2502 on transfers made within 60 days of account opening. After that: Either $5 or 5% \u2502 \u2502 \u2502 \u2502 \u2502 of the amount of each transfer, whichever is greater. \u2502 \u2502 \u2502 \u2502 \u2502 Cash Advances Either $10 or 5% of the amount of each transaction, whichever is greater. \u2502 \u2502 \u2502 \u2502 \u2502 2/25/23, 7:59 PM about:blank \u2502 \u2502 \u2502 \u2502 \u2502 about:blank 2/4 \u2502 \u2502 \u2502 \u2502 \u2502 Foreign Transactions 3% of the amount of each transaction in U.S. dollars. \u2502 \u2502 \u2502 \u2502 \u2502 Penalty Fees \u2502 \u2502 \u2502 \u2502 \u2502 Late Payment Up to $40. \u2502 \u2502 \u2502 \u2502 \u2502 Over-the-Credit-Limit None \u2502 \u2502 \u2502 \u2502 \u2502 Return Payment Up to $40. \u2502 \u2502 \u2502 \u2502 \u2502 Return Check None \u2502 \u2502 \u2502 \u2502 \u2502 Note: This account may not be eligible for balance transfers. \u2502 \u2502 \u2502 \u2502 \u2502 Loss of Intro APR: We will end your introductory APR if any required Minimum Payment is 60 days late, \u2502 \u2502 \u2502 \u2502 \u2502 and \u2502 \u2502 \u2502 \u2502 \u2502 apply the Penalty APR. \u2502 \u2502 \u2502 \u2502 \u2502 How We Will Calculate Your Balance: We use the daily balance method (including new transactions). \u2502 \u2502 \u2502 \u2502 \u2502 Prime Rate: Variable APRs are based on the 7.75% Prime Rate as of 2/7/2023. \u2502 \u2502 \u2502 \u2502 \u2502 aWe add 11.74% to the Prime Rate to determine the Purchase/My Chase Loan/Balance Transfer APR. \u2502 \u2502 \u2502 \u2502 \u2502 Maximum APR 29.99%. \u2502 \u2502 \u2502 \u2502 \u2502 bWe add 21.74% to the Prime Rate to determine the Cash Advance APR. Maximum APR 29.99%. \u2502 \u2502 \u2502 \u2502 \u2502 cWe add up to 26.99% to the Prime Rate to determine the Penalty APR. Maximum APR 29.99%. \u2502 \u2502 \u2502 \u2502 \u2502 dMy Chase Plan Fee: The My Chase Plan Fee is calculated at the time each plan is created and is based \u2502 \u2502 \u2502 \u2502 \u2502 on \u2502 \u2502 \u2502 \u2502 \u2502 the amount of each purchase transaction or amount selected to create the plan, the number of billing \u2502 \u2502 \u2502 \u2502 \u2502 periods \u2502 \u2502 \u2502 \u2502 \u2502 you choose to pay the balance in full, and other factors. The monthly and aggregate dollar amount of \u2502 \u2502 \u2502 \u2502 \u2502 your My \u2502 \u2502 \u2502 \u2502 \u2502 Chase Plan Fee will be disclosed during the activation of each My Chase Plan. \u2502 \u2502 \u2502 \u2502 \u2502 MILITARY LENDING ACT NOTICE: Federal law provides important protections to members of the Armed \u2502 \u2502 \u2502 \u2502 \u2502 Forces and their dependents relating to extensions of consumer credit. In general, the cost of consumer \u2502 \u2502 \u2502 \u2502 \u2502 credit \u2502 \u2502 \u2502 \u2502 \u2502 to a member of the Armed Forces and his or her dependent may not exceed an annual percentage rate of 36 \u2502 \u2502 \u2502 \u2502 \u2502 percent. This rate must include, as applicable to the credit transaction or account: the costs \u2502 \u2502 \u2502 \u2502 \u2502 associated with \u2502 \u2502 \u2502 \u2502 \u2502 credit insurance premiums; fees for ancillary products sold in connection with the credit transaction; \u2502 \u2502 \u2502 \u2502 \u2502 any \u2502 \u2502 \u2502 \u2502 \u2502 application fee charged (other than certain application fees for specified credit transactions or \u2502 \u2502 \u2502 \u2502 \u2502 accounts); and \u2502 \u2502 \u2502 \u2502 \u2502 any participation fee charged (other than certain participation fees for a credit card account). To \u2502 \u2502 \u2502 \u2502 \u2502 receive this \u2502 \u2502 \u2502 \u2502 \u2502 information and a description of your payment obligation verbally, please call 1-800-235-9978. \u2502 \u2502 \u2502 \u2502 \u2502 TERMS & CONDITIONS \u2502 \u2502 \u2502 \u2502 \u2502 Authorization: When you respond to this credit card offer from JPMorgan Chase Bank, N.A., Member FDIC, \u2502 \u2502 \u2502 \u2502 \u2502 a \u2502 \u2502 \u2502 \u2502 \u2502 subsidiary of JPMorgan Chase & Co. (\"Chase\", \"we\", or \"us\"), you agree to the following: \u2502 \u2502 \u2502 \u2502 \u2502 1. You authorize us to obtain credit bureau reports, employment, and income information about you that \u2502 \u2502 \u2502 \u2502 \u2502 we \u2502 \u2502 \u2502 \u2502 \u2502 will use when considering your application for credit. We may obtain and use information about your \u2502 \u2502 \u2502 \u2502 \u2502 accounts with us and others such as Checking, Deposit, Investment, and Utility accounts from credit \u2502 \u2502 \u2502 \u2502 \u2502 bureaus and other entities. You also authorize us to obtain credit bureau reports and any other \u2502 \u2502 \u2502 \u2502 \u2502 information about you in connection with: 1) extensions of credit on your account; 2) the \u2502 \u2502 \u2502 \u2502 \u2502 administration, \u2502 \u2502 \u2502 \u2502 \u2502 review or collection of your account; and 3) offering you enhanced or additional products and services. \u2502 \u2502 \u2502 \u2502 \u2502 If \u2502 \u2502 \u2502 \u2502 \u2502 you ask, we will tell you the name and address of the credit bureau from which we obtained a report \u2502 \u2502 \u2502 \u2502 \u2502 about you. \u2502 \u2502 \u2502 \u2502 \u2502 2. If an account is opened, you will receive a Cardmember Agreement with your card(s). You agree to the \u2502 \u2502 \u2502 \u2502 \u2502 terms of this agreement by: using the account or any card, authorizing their use, or making any payment \u2502 \u2502 \u2502 \u2502 \u2502 on the account. \u2502 \u2502 \u2502 \u2502 \u2502 3. By providing your mobile ph \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Given below is XML that describes the information to extract from this document and the tags to extract \u2502 \u2502 \u2502 \u2502 \u2502 it into. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 <output> \u2502 \u2502 \u2502 \u2502 \u2502 <list name=\"fees\" description=\"What fees and charges are associated with my account?\"> \u2502 \u2502 \u2502 \u2502 \u2502 <object> \u2502 \u2502 \u2502 \u2502 \u2502 <integer name=\"index\" format=\"1-indexed\"/> \u2502 \u2502 \u2502 \u2502 \u2502 <string name=\"name\" format=\"lower-case; two-words\"/> \u2502 \u2502 \u2502 \u2502 \u2502 <string name=\"explanation\" format=\"one-line\"/> \u2502 \u2502 \u2502 \u2502 \u2502 <float name=\"value\" format=\"percentage\"/> \u2502 \u2502 \u2502 \u2502 \u2502 </object> \u2502 \u2502 \u2502 \u2502 \u2502 </list> \u2502 \u2502 \u2502 \u2502 \u2502 <object name=\"interest_rates\" description=\"What are the interest rates offered by the bank on \u2502 \u2502 \u2502 \u2502 \u2502 savings and checking accounts, loans, and credit products?\"/> \u2502 \u2502 \u2502 \u2502 \u2502 </output> \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 ONLY return a valid JSON object (no other text is necessary). The JSON MUST conform to the XML format, \u2502 \u2502 \u2502 \u2502 \u2502 including any types and format requests e.g. requests for lists, objects and specific types. Be correct \u2502 \u2502 \u2502 \u2502 \u2502 and concise. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 JSON Output: \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Raw LLM Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 \"fees\": [ \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 \"index\": 1, \u2502 \u2502 \u2502 \u2502 \u2502 \"name\": \"annual membership\", \u2502 \u2502 \u2502 \u2502 \u2502 \"explanation\": \"Annual Membership Fee\", \u2502 \u2502 \u2502 \u2502 \u2502 \"value\": 0 \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 \"index\": 2, \u2502 \u2502 \u2502 \u2502 \u2502 \"name\": \"my chase plan\", \u2502 \u2502 \u2502 \u2502 \u2502 \"explanation\": \"My Chase Plan Fee (fixed finance charge)\", \u2502 \u2502 \u2502 \u2502 \u2502 \"value\": 1.72 \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 \"index\": 3, \u2502 \u2502 \u2502 \u2502 \u2502 \"name\": \"balance transfers\", \u2502 \u2502 \u2502 \u2502 \u2502 \"explanation\": \"Balance Transfers Intro fee of either $5 or 3% of the amount of each \u2502 \u2502 \u2502 \u2502 \u2502 transfer, whichever is greater, on transfers made within 60 days of account opening. After that: Either \u2502 \u2502 \u2502 \u2502 \u2502 $5 or 5% of the amount of each transfer, whichever is greater.\", \u2502 \u2502 \u2502 \u2502 \u2502 \"value\": 3 \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 \"index\": 4, \u2502 \u2502 \u2502 \u2502 \u2502 \"name\": \"cash advances\", \u2502 \u2502 \u2502 \u2502 \u2502 \"explanation\": \"Either $10 or 5% of the amount of each transaction, whichever is greater.\", \u2502 \u2502 \u2502 \u2502 \u2502 \"value\": 5 \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 \"index\": 5, \u2502 \u2502 \u2502 \u2502 \u2502 \"name\": \"foreign transactions\", \u2502 \u2502 \u2502 \u2502 \u2502 \"explanation\": \"Foreign Transactions 3% of the amount of each transaction in U.S. \u2502 \u2502 \u2502 \u2502 \u2502 dollars.\", \u2502 \u2502 \u2502 \u2502 \u2502 \"value\": 3 \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 \"index\": 6, \u2502 \u2502 \u2502 \u2502 \u2502 \"name\": \"late payment\", \u2502 \u2502 \u2502 \u2502 \u2502 \"explanation\": \"Late Payment Up to $40.\", \u2502 \u2502 \u2502 \u2502 \u2502 \"value\": 0 \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 \"index\": 7, \u2502 \u2502 \u2502 \u2502 \u2502 \"name\": \"over-the-credit-limit\", \u2502 \u2502 \u2502 \u2502 \u2502 \"explanation\": \"Over-the-Credit-Limit None\", \u2502 \u2502 \u2502 \u2502 \u2502 \"value\": 0 \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 \"index\": 8, \u2502 \u2502 \u2502 \u2502 \u2502 \"name\": \"return payment\", \u2502 \u2502 \u2502 \u2502 \u2502 \"explanation\": \"Return Payment Up to $40.\", \u2502 \u2502 \u2502 \u2502 \u2502 \"value\": 0 \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 \"index\": 9, \u2502 \u2502 \u2502 \u2502 \u2502 \"name\": \"return check\", \u2502 \u2502 \u2502 \u2502 \u2502 \"explanation\": \"Return Check None\", \u2502 \u2502 \u2502 \u2502 \u2502 \"value\": 0 \u2502 \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 \u2502 ], \u2502 \u2502 \u2502 \u2502 \u2502 \"interest_rates\": { \u2502 \u2502 \u2502 \u2502 \u2502 \"purchase\": { \u2502 \u2502 \u2502 \u2502 \u2502 \"apr\": 0, \u2502 \u2502 \u2502 \u2502 \u2502 \"after_apr\": 19.49 \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 \"my_chase_loan\": { \u2502 \u2502 \u2502 \u2502 \u2502 \"apr\": 19.49 \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 \"balance_transfer\": { \u2502 \u2502 \u2502 \u2502 \u2502 \"apr\": 0, \u2502 \u2502 \u2502 \u2502 \u2502 \"after_apr\": 19.49 \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 \"cash_advance\": { \u2502 \u2502 \u2502 \u2502 \u2502 \"apr\": 29.49 \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 \"penalty\": { \u2502 \u2502 \u2502 \u2502 \u2502 \"apr\": 0, \u2502 \u2502 \u2502 \u2502 \u2502 \"maximum_apr\": 29.99 \u2502 \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Validated Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 'fees': [ \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 'index': 1, \u2502 \u2502 \u2502 \u2502 \u2502 'name': 'annual membership', \u2502 \u2502 \u2502 \u2502 \u2502 'explanation': 'Annual Membership Fee', \u2502 \u2502 \u2502 \u2502 \u2502 'value': 0 \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 'index': 2, \u2502 \u2502 \u2502 \u2502 \u2502 'name': ReAsk( \u2502 \u2502 \u2502 \u2502 \u2502 incorrect_value='my chase plan', \u2502 \u2502 \u2502 \u2502 \u2502 error_message='must be exactly two words', \u2502 \u2502 \u2502 \u2502 \u2502 fix_value='my chase', \u2502 \u2502 \u2502 \u2502 \u2502 path=['fees', 1, 'name'] \u2502 \u2502 \u2502 \u2502 \u2502 ), \u2502 \u2502 \u2502 \u2502 \u2502 'explanation': 'My Chase Plan Fee (fixed finance charge)', \u2502 \u2502 \u2502 \u2502 \u2502 'value': 1.72 \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 'index': 3, \u2502 \u2502 \u2502 \u2502 \u2502 'name': 'balance transfers', \u2502 \u2502 \u2502 \u2502 \u2502 'explanation': 'Balance Transfers Intro fee of either $5 or 3% of the amount of each \u2502 \u2502 \u2502 \u2502 \u2502 transfer, whichever is greater, on transfers made within 60 days of account opening. After that: Either \u2502 \u2502 \u2502 \u2502 \u2502 $5 or 5% of the amount of each transfer, whichever is greater.', \u2502 \u2502 \u2502 \u2502 \u2502 'value': 3 \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 'index': 4, \u2502 \u2502 \u2502 \u2502 \u2502 'name': 'cash advances', \u2502 \u2502 \u2502 \u2502 \u2502 'explanation': 'Either $10 or 5% of the amount of each transaction, whichever is greater.', \u2502 \u2502 \u2502 \u2502 \u2502 'value': 5 \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 'index': 5, \u2502 \u2502 \u2502 \u2502 \u2502 'name': 'foreign transactions', \u2502 \u2502 \u2502 \u2502 \u2502 'explanation': 'Foreign Transactions 3% of the amount of each transaction in U.S. \u2502 \u2502 \u2502 \u2502 \u2502 dollars.', \u2502 \u2502 \u2502 \u2502 \u2502 'value': 3 \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 'index': 6, \u2502 \u2502 \u2502 \u2502 \u2502 'name': 'late payment', \u2502 \u2502 \u2502 \u2502 \u2502 'explanation': 'Late Payment Up to $40.', \u2502 \u2502 \u2502 \u2502 \u2502 'value': 0 \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 'index': 7, \u2502 \u2502 \u2502 \u2502 \u2502 'name': ReAsk( \u2502 \u2502 \u2502 \u2502 \u2502 incorrect_value='over-the-credit-limit', \u2502 \u2502 \u2502 \u2502 \u2502 error_message='must be exactly two words', \u2502 \u2502 \u2502 \u2502 \u2502 fix_value='over-the-credit-limit', \u2502 \u2502 \u2502 \u2502 \u2502 path=['fees', 6, 'name'] \u2502 \u2502 \u2502 \u2502 \u2502 ), \u2502 \u2502 \u2502 \u2502 \u2502 'explanation': 'Over-the-Credit-Limit None', \u2502 \u2502 \u2502 \u2502 \u2502 'value': 0 \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 'index': 8, \u2502 \u2502 \u2502 \u2502 \u2502 'name': 'return payment', \u2502 \u2502 \u2502 \u2502 \u2502 'explanation': 'Return Payment Up to $40.', \u2502 \u2502 \u2502 \u2502 \u2502 'value': 0 \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 'index': 9, \u2502 \u2502 \u2502 \u2502 \u2502 'name': 'return check', \u2502 \u2502 \u2502 \u2502 \u2502 'explanation': 'Return Check None', \u2502 \u2502 \u2502 \u2502 \u2502 'value': 0 \u2502 \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 \u2502 ], \u2502 \u2502 \u2502 \u2502 \u2502 'interest_rates': { \u2502 \u2502 \u2502 \u2502 \u2502 'purchase': {'apr': 0, 'after_apr': 19.49}, \u2502 \u2502 \u2502 \u2502 \u2502 'my_chase_loan': {'apr': 19.49}, \u2502 \u2502 \u2502 \u2502 \u2502 'balance_transfer': {'apr': 0, 'after_apr': 19.49}, \u2502 \u2502 \u2502 \u2502 \u2502 'cash_advance': {'apr': 29.49}, \u2502 \u2502 \u2502 \u2502 \u2502 'penalty': {'apr': 0, 'maximum_apr': 29.99} \u2502 \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2514\u2500\u2500 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Step 2 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Prompt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 I was given the following JSON response, which had problems due to incorrect values. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"fees\": [ \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"name\": { \u2502 \u2502 \u2502 \u2502 \"incorrect_value\": \"my chase plan\", \u2502 \u2502 \u2502 \u2502 \"error_message\": \"must be exactly two words\" \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"name\": { \u2502 \u2502 \u2502 \u2502 \"incorrect_value\": \"over-the-credit-limit\", \u2502 \u2502 \u2502 \u2502 \"error_message\": \"must be exactly two words\" \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 ] \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Help me correct the incorrect values based on the given error messages. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Given below is XML that describes the information to extract from this document and the tags to extract \u2502 \u2502 \u2502 \u2502 it into. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 <output> \u2502 \u2502 \u2502 \u2502 <list name=\"fees\" description=\"What fees and charges are associated with my account?\"> \u2502 \u2502 \u2502 \u2502 <object> \u2502 \u2502 \u2502 \u2502 <string name=\"name\" format=\"lower-case; two-words\"/> \u2502 \u2502 \u2502 \u2502 </object> \u2502 \u2502 \u2502 \u2502 </list> \u2502 \u2502 \u2502 \u2502 </output> \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 ONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the \u2502 \u2502 \u2502 \u2502 `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding \u2502 \u2502 \u2502 \u2502 XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. \u2502 \u2502 \u2502 \u2502 requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere, \u2502 \u2502 \u2502 \u2502 enter `None`. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Here are examples of simple (XML, JSON) pairs that show the expected behavior: \u2502 \u2502 \u2502 \u2502 - `<string name='foo' format='two-words lower-case' />` => `{{'foo': 'example one'}}` \u2502 \u2502 \u2502 \u2502 - `<list name='bar'><string format='upper-case' /></list>` => `{{\"bar\": ['STRING ONE', 'STRING TWO', \u2502 \u2502 \u2502 \u2502 etc.]}}` \u2502 \u2502 \u2502 \u2502 - `<object name='baz'><string name=\"foo\" format=\"capitalize two-words\" /><integer name=\"index\" \u2502 \u2502 \u2502 \u2502 format=\"1-indexed\" /></object>` => `{{'baz': {{'foo': 'Some String', 'index': 1}}}}` \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 JSON Object: \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Raw LLM Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"fees\": [ \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"name\": \"my-chase-plan\" \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"name\": \"over-credit-limit\" \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 ] \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Validated Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'fees': [ \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'index': 1, \u2502 \u2502 \u2502 \u2502 'name': 'annual membership', \u2502 \u2502 \u2502 \u2502 'explanation': 'Annual Membership Fee', \u2502 \u2502 \u2502 \u2502 'value': 0 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'index': 2, \u2502 \u2502 \u2502 \u2502 'name': 'my-chase-plan', \u2502 \u2502 \u2502 \u2502 'explanation': 'My Chase Plan Fee (fixed finance charge)', \u2502 \u2502 \u2502 \u2502 'value': 1.72 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'index': 3, \u2502 \u2502 \u2502 \u2502 'name': 'balance transfers', \u2502 \u2502 \u2502 \u2502 'explanation': 'Balance Transfers Intro fee of either $5 or 3% of the amount of each \u2502 \u2502 \u2502 \u2502 transfer, whichever is greater, on transfers made within 60 days of account opening. After that: Either \u2502 \u2502 \u2502 \u2502 $5 or 5% of the amount of each transfer, whichever is greater.', \u2502 \u2502 \u2502 \u2502 'value': 3 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'index': 4, \u2502 \u2502 \u2502 \u2502 'name': 'cash advances', \u2502 \u2502 \u2502 \u2502 'explanation': 'Either $10 or 5% of the amount of each transaction, whichever is greater.', \u2502 \u2502 \u2502 \u2502 'value': 5 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'index': 5, \u2502 \u2502 \u2502 \u2502 'name': 'foreign transactions', \u2502 \u2502 \u2502 \u2502 'explanation': 'Foreign Transactions 3% of the amount of each transaction in U.S. \u2502 \u2502 \u2502 \u2502 dollars.', \u2502 \u2502 \u2502 \u2502 'value': 3 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'index': 6, \u2502 \u2502 \u2502 \u2502 'name': 'late payment', \u2502 \u2502 \u2502 \u2502 'explanation': 'Late Payment Up to $40.', \u2502 \u2502 \u2502 \u2502 'value': 0 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'index': 7, \u2502 \u2502 \u2502 \u2502 'name': 'over-credit-limit', \u2502 \u2502 \u2502 \u2502 'explanation': 'Over-the-Credit-Limit None', \u2502 \u2502 \u2502 \u2502 'value': 0 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'index': 8, \u2502 \u2502 \u2502 \u2502 'name': 'return payment', \u2502 \u2502 \u2502 \u2502 'explanation': 'Return Payment Up to $40.', \u2502 \u2502 \u2502 \u2502 'value': 0 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'index': 9, \u2502 \u2502 \u2502 \u2502 'name': 'return check', \u2502 \u2502 \u2502 \u2502 'explanation': 'Return Check None', \u2502 \u2502 \u2502 \u2502 'value': 0 \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 ], \u2502 \u2502 \u2502 \u2502 'interest_rates': { \u2502 \u2502 \u2502 \u2502 'purchase': {'apr': 0, 'after_apr': 19.49}, \u2502 \u2502 \u2502 \u2502 'my_chase_loan': {'apr': 19.49}, \u2502 \u2502 \u2502 \u2502 'balance_transfer': {'apr': 0, 'after_apr': 19.49}, \u2502 \u2502 \u2502 \u2502 'cash_advance': {'apr': 29.49}, \u2502 \u2502 \u2502 \u2502 'penalty': {'apr': 0, 'maximum_apr': 29.99} \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"Step 3: Wrap the LLM API call with Guard"},{"location":"examples/generate_structured_data/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Generating Structured Synthetic Data Note To download this tutorial as a Jupyter notebook, click here . In this example, we'll generate structured dummy data for a pandas dataframe. We make the assumption that: We don't need any external libraries that are not already installed in the environment. We are able to execute the code in the environment. Objective We want to generate structured synthetic data, where each column has a specific data type. All rows in the dataset must respect the column data types. Additionally, we have some more constraints we want the data to respect: There should be exactly 10 rows in the dataset. Each user should have a first name and a last name. The number of orders associated with each user should be between 0 and 50. Each user should have a most recent order date. Step 1: Generating RAIL Spec Ordinarily, we could create a separate RAIL spec in a file. However, for the sake of this example, we will generate the RAIL spec in the notebook as a string. rail_str = \"\"\" <rail version=\"0.1\"> <output> <list name=\"user_orders\" description=\"Generate a list of user, and how many orders they have placed in the past.\" format=\"length: 10 10\" on-fail-length=\"noop\"> <object> <string name=\"user_id\" description=\"The user's id.\" format=\"1-indexed\" /> <string name=\"user_name\" description=\"The user's first name and last name\" format=\"two-words\" /> <integer name=\"num_orders\" description=\"The number of orders the user has placed\" format=\"valid-range: 0 50\" /> <date name=\"last_order_date\" description=\"Date of last order\" /> </object> </list> </output> <prompt> Generate a dataset of fake user orders. Each row of the dataset should be valid. @complete_json_suffix</prompt> </rail> \"\"\" Step 2: Create a Guard object with the RAIL Spec We create a gd.Guard object that will check, validate and correct the generated code. This object: Enforces the quality criteria specified in the RAIL spec (i.e. bug free code). Takes corrective action when the quality criteria are not met (i.e. reasking the LLM). Compiles the schema and type info from the RAIL spec and adds it to the prompt. import guardrails as gd from rich import print guard = gd . Guard . from_rail_string ( rail_str ) /Users/shreyarajpal/guardrails/guardrails/schema.py:187: UserWarning: Validator 1-indexed is not valid for element string. warnings.warn( The Guard object compiles the output schema and adds it to the prompt. We can see the final prompt below: print ( guard . base_prompt ) Generate a dataset of fake user orders. Each row of the dataset should be valid. Given below is XML that describes the information to extract from this document and the tags to extract it into. < output > <list name = \"user_orders\" description = \"Generate a list of user, and how many orders they have placed in the past.\" format = \"length: min=10 max=10\" > <object> <string name = \"user_id\" description = \"The user's id.\" format = \"1-indexed\" / > <string name = \"user_name\" description = \"The user's first name and last name\" format = \"two-words\" / > <integer name = \"num_orders\" description = \"The number of orders the user has placed\" format = \"valid-range: 0 50\" / > <date name = \"last_order_date\" description = \"Date of last order\" / > < / object > < / list > < / output > ONLY return a valid JSON object ( no other text is necessary ) , where the key of the field in JSON is the `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere, enter ` None `. Here are examples of simple ( XML, JSON ) pairs that show the expected behavior: - `<string name = 'foo' format = 'two-words lower-case' / >` => ` {{ 'foo' : 'example one' }} ` - `<list name = 'bar' ><string format = 'upper-case' / >< / list >` => ` {{ \"bar\" : [ 'STRING ONE' , 'STRING TWO' , etc. ]}} ` - `<object name = 'baz' ><string name = \"foo\" format = \"capitalize two-words\" / ><integer name = \"index\" format = \"1-indexed\" / >< / object >` = > ` {{ 'baz' : {{ 'foo' : 'Some String' , 'index' : 1 }}}} ` JSON Object: Step 3: Wrap the LLM API call with Guard import openai raw_llm_response , validated_response = guard ( openai . Completion . create , engine = \"text-davinci-003\" , max_tokens = 2048 , temperature = 0 ) /Users/shreyarajpal/anaconda3/envs/tiff-env/lib/python3.9/site-packages/eliot/json.py:22: FutureWarning: In the future `np.bool` will be defined as the corresponding NumPy scalar. (This may have returned Python scalars in past versions. if isinstance(o, (numpy.bool, numpy.bool_)): Running the cell above returns: 1. The raw LLM text output as a single string. 2. A dictionary where the key user_orders key contains a list of dictionaries, where each dictionary represents a row in the dataframe. print ( validated_response ) { 'user_orders' : [ { 'user_id' : 1 , 'user_name' : 'John Smith' , 'num_orders' : 10 , 'last_order_date' : '2020-01-01' } , { 'user_id' : 2 , 'user_name' : 'Jane Doe' , 'num_orders' : 5 , 'last_order_date' : '2020-02-01' } , { 'user_id' : 3 , 'user_name' : 'Bob Jones' , 'num_orders' : 25 , 'last_order_date' : '2020-03-01' } , { 'user_id' : 4 , 'user_name' : 'Alice Johnson' , 'num_orders' : 0 , 'last_order_date' : '2020-04-01' } , { 'user_id' : 5 , 'user_name' : 'John Doe' , 'num_orders' : 15 , 'last_order_date' : '2020-05-01' } , { 'user_id' : 6 , 'user_name' : 'Jane Smith' , 'num_orders' : 20 , 'last_order_date' : '2020-06-01' } , { 'user_id' : 7 , 'user_name' : 'Bob Johnson' , 'num_orders' : 10 , 'last_order_date' : '2020-07-01' } , { 'user_id' : 8 , 'user_name' : 'Alice Jones' , 'num_orders' : 30 , 'last_order_date' : '2020-08-01' } , { 'user_id' : 9 , 'user_name' : 'John Johnson' , 'num_orders' : 40 , 'last_order_date' : '2020-09-01' } , { 'user_id' : 10 , 'user_name' : 'Jane Jones' , 'num_orders' : 35 , 'last_order_date' : '2020-10-01' } ] } print ( guard . state . most_recent_call . tree ) Logs \u2514\u2500\u2500 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Step 1 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Prompt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Generate a dataset of fake user orders. Each row of the dataset should be valid. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Given below is XML that describes the information to extract from this document and the tags to extract \u2502 \u2502 \u2502 \u2502 it into. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 <output> \u2502 \u2502 \u2502 \u2502 <list name=\"user_orders\" description=\"Generate a list of user, and how many orders they have placed \u2502 \u2502 \u2502 \u2502 in the past.\" format=\"length: min=10 max=10\"> \u2502 \u2502 \u2502 \u2502 <object> \u2502 \u2502 \u2502 \u2502 <string name=\"user_id\" description=\"The user's id.\" format=\"1-indexed\"/> \u2502 \u2502 \u2502 \u2502 <string name=\"user_name\" description=\"The user's first name and last name\" \u2502 \u2502 \u2502 \u2502 format=\"two-words\"/> \u2502 \u2502 \u2502 \u2502 <integer name=\"num_orders\" description=\"The number of orders the user has placed\" \u2502 \u2502 \u2502 \u2502 format=\"valid-range: 0 50\"/> \u2502 \u2502 \u2502 \u2502 <date name=\"last_order_date\" description=\"Date of last order\"/> \u2502 \u2502 \u2502 \u2502 </object> \u2502 \u2502 \u2502 \u2502 </list> \u2502 \u2502 \u2502 \u2502 </output> \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 ONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the \u2502 \u2502 \u2502 \u2502 `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding \u2502 \u2502 \u2502 \u2502 XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. \u2502 \u2502 \u2502 \u2502 requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere, \u2502 \u2502 \u2502 \u2502 enter `None`. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Here are examples of simple (XML, JSON) pairs that show the expected behavior: \u2502 \u2502 \u2502 \u2502 - `<string name='foo' format='two-words lower-case' />` => `{'foo': 'example one'}` \u2502 \u2502 \u2502 \u2502 - `<list name='bar'><string format='upper-case' /></list>` => `{\"bar\": ['STRING ONE', 'STRING TWO', \u2502 \u2502 \u2502 \u2502 etc.]}` \u2502 \u2502 \u2502 \u2502 - `<object name='baz'><string name=\"foo\" format=\"capitalize two-words\" /><integer name=\"index\" \u2502 \u2502 \u2502 \u2502 format=\"1-indexed\" /></object>` => `{'baz': {'foo': 'Some String', 'index': 1}}` \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 JSON Object: \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Raw LLM Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"user_orders\": [ \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"user_id\": 1, \u2502 \u2502 \u2502 \u2502 \"user_name\": \"John Smith\", \u2502 \u2502 \u2502 \u2502 \"num_orders\": 10, \u2502 \u2502 \u2502 \u2502 \"last_order_date\": \"2020-01-01\" \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"user_id\": 2, \u2502 \u2502 \u2502 \u2502 \"user_name\": \"Jane Doe\", \u2502 \u2502 \u2502 \u2502 \"num_orders\": 5, \u2502 \u2502 \u2502 \u2502 \"last_order_date\": \"2020-02-01\" \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"user_id\": 3, \u2502 \u2502 \u2502 \u2502 \"user_name\": \"Bob Jones\", \u2502 \u2502 \u2502 \u2502 \"num_orders\": 25, \u2502 \u2502 \u2502 \u2502 \"last_order_date\": \"2020-03-01\" \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"user_id\": 4, \u2502 \u2502 \u2502 \u2502 \"user_name\": \"Alice Johnson\", \u2502 \u2502 \u2502 \u2502 \"num_orders\": 0, \u2502 \u2502 \u2502 \u2502 \"last_order_date\": \"2020-04-01\" \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"user_id\": 5, \u2502 \u2502 \u2502 \u2502 \"user_name\": \"John Doe\", \u2502 \u2502 \u2502 \u2502 \"num_orders\": 15, \u2502 \u2502 \u2502 \u2502 \"last_order_date\": \"2020-05-01\" \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"user_id\": 6, \u2502 \u2502 \u2502 \u2502 \"user_name\": \"Jane Smith\", \u2502 \u2502 \u2502 \u2502 \"num_orders\": 20, \u2502 \u2502 \u2502 \u2502 \"last_order_date\": \"2020-06-01\" \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"user_id\": 7, \u2502 \u2502 \u2502 \u2502 \"user_name\": \"Bob Johnson\", \u2502 \u2502 \u2502 \u2502 \"num_orders\": 10, \u2502 \u2502 \u2502 \u2502 \"last_order_date\": \"2020-07-01\" \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"user_id\": 8, \u2502 \u2502 \u2502 \u2502 \"user_name\": \"Alice Jones\", \u2502 \u2502 \u2502 \u2502 \"num_orders\": 30, \u2502 \u2502 \u2502 \u2502 \"last_order_date\": \"2020-08-01\" \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"user_id\": 9, \u2502 \u2502 \u2502 \u2502 \"user_name\": \"John Johnson\", \u2502 \u2502 \u2502 \u2502 \"num_orders\": 40, \u2502 \u2502 \u2502 \u2502 \"last_order_date\": \"2020-09-01\" \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"user_id\": 10, \u2502 \u2502 \u2502 \u2502 \"user_name\": \"Jane Jones\", \u2502 \u2502 \u2502 \u2502 \"num_orders\": 35, \u2502 \u2502 \u2502 \u2502 \"last_order_date\": \"2020-10-01\" \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 ] \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Validated Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'user_orders': [ \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'user_id': 1, \u2502 \u2502 \u2502 \u2502 'user_name': 'John Smith', \u2502 \u2502 \u2502 \u2502 'num_orders': 10, \u2502 \u2502 \u2502 \u2502 'last_order_date': '2020-01-01' \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'user_id': 2, \u2502 \u2502 \u2502 \u2502 'user_name': 'Jane Doe', \u2502 \u2502 \u2502 \u2502 'num_orders': 5, \u2502 \u2502 \u2502 \u2502 'last_order_date': '2020-02-01' \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'user_id': 3, \u2502 \u2502 \u2502 \u2502 'user_name': 'Bob Jones', \u2502 \u2502 \u2502 \u2502 'num_orders': 25, \u2502 \u2502 \u2502 \u2502 'last_order_date': '2020-03-01' \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'user_id': 4, \u2502 \u2502 \u2502 \u2502 'user_name': 'Alice Johnson', \u2502 \u2502 \u2502 \u2502 'num_orders': 0, \u2502 \u2502 \u2502 \u2502 'last_order_date': '2020-04-01' \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'user_id': 5, \u2502 \u2502 \u2502 \u2502 'user_name': 'John Doe', \u2502 \u2502 \u2502 \u2502 'num_orders': 15, \u2502 \u2502 \u2502 \u2502 'last_order_date': '2020-05-01' \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'user_id': 6, \u2502 \u2502 \u2502 \u2502 'user_name': 'Jane Smith', \u2502 \u2502 \u2502 \u2502 'num_orders': 20, \u2502 \u2502 \u2502 \u2502 'last_order_date': '2020-06-01' \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'user_id': 7, \u2502 \u2502 \u2502 \u2502 'user_name': 'Bob Johnson', \u2502 \u2502 \u2502 \u2502 'num_orders': 10, \u2502 \u2502 \u2502 \u2502 'last_order_date': '2020-07-01' \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'user_id': 8, \u2502 \u2502 \u2502 \u2502 'user_name': 'Alice Jones', \u2502 \u2502 \u2502 \u2502 'num_orders': 30, \u2502 \u2502 \u2502 \u2502 'last_order_date': '2020-08-01' \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'user_id': 9, \u2502 \u2502 \u2502 \u2502 'user_name': 'John Johnson', \u2502 \u2502 \u2502 \u2502 'num_orders': 40, \u2502 \u2502 \u2502 \u2502 'last_order_date': '2020-09-01' \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'user_id': 10, \u2502 \u2502 \u2502 \u2502 'user_name': 'Jane Jones', \u2502 \u2502 \u2502 \u2502 'num_orders': 35, \u2502 \u2502 \u2502 \u2502 'last_order_date': '2020-10-01' \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 ] \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"Generate structured synthetic data"},{"location":"examples/generate_structured_data/#generating-structured-synthetic-data","text":"Note To download this tutorial as a Jupyter notebook, click here . In this example, we'll generate structured dummy data for a pandas dataframe. We make the assumption that: We don't need any external libraries that are not already installed in the environment. We are able to execute the code in the environment.","title":"Generating Structured Synthetic Data"},{"location":"examples/generate_structured_data/#objective","text":"We want to generate structured synthetic data, where each column has a specific data type. All rows in the dataset must respect the column data types. Additionally, we have some more constraints we want the data to respect: There should be exactly 10 rows in the dataset. Each user should have a first name and a last name. The number of orders associated with each user should be between 0 and 50. Each user should have a most recent order date.","title":"Objective"},{"location":"examples/generate_structured_data/#step-1-generating-rail-spec","text":"Ordinarily, we could create a separate RAIL spec in a file. However, for the sake of this example, we will generate the RAIL spec in the notebook as a string. rail_str = \"\"\" <rail version=\"0.1\"> <output> <list name=\"user_orders\" description=\"Generate a list of user, and how many orders they have placed in the past.\" format=\"length: 10 10\" on-fail-length=\"noop\"> <object> <string name=\"user_id\" description=\"The user's id.\" format=\"1-indexed\" /> <string name=\"user_name\" description=\"The user's first name and last name\" format=\"two-words\" /> <integer name=\"num_orders\" description=\"The number of orders the user has placed\" format=\"valid-range: 0 50\" /> <date name=\"last_order_date\" description=\"Date of last order\" /> </object> </list> </output> <prompt> Generate a dataset of fake user orders. Each row of the dataset should be valid. @complete_json_suffix</prompt> </rail> \"\"\"","title":"Step 1: Generating RAIL Spec"},{"location":"examples/generate_structured_data/#step-2-create-a-guard-object-with-the-rail-spec","text":"We create a gd.Guard object that will check, validate and correct the generated code. This object: Enforces the quality criteria specified in the RAIL spec (i.e. bug free code). Takes corrective action when the quality criteria are not met (i.e. reasking the LLM). Compiles the schema and type info from the RAIL spec and adds it to the prompt. import guardrails as gd from rich import print guard = gd . Guard . from_rail_string ( rail_str ) /Users/shreyarajpal/guardrails/guardrails/schema.py:187: UserWarning: Validator 1-indexed is not valid for element string. warnings.warn( The Guard object compiles the output schema and adds it to the prompt. We can see the final prompt below: print ( guard . base_prompt ) Generate a dataset of fake user orders. Each row of the dataset should be valid. Given below is XML that describes the information to extract from this document and the tags to extract it into. < output > <list name = \"user_orders\" description = \"Generate a list of user, and how many orders they have placed in the past.\" format = \"length: min=10 max=10\" > <object> <string name = \"user_id\" description = \"The user's id.\" format = \"1-indexed\" / > <string name = \"user_name\" description = \"The user's first name and last name\" format = \"two-words\" / > <integer name = \"num_orders\" description = \"The number of orders the user has placed\" format = \"valid-range: 0 50\" / > <date name = \"last_order_date\" description = \"Date of last order\" / > < / object > < / list > < / output > ONLY return a valid JSON object ( no other text is necessary ) , where the key of the field in JSON is the `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere, enter ` None `. Here are examples of simple ( XML, JSON ) pairs that show the expected behavior: - `<string name = 'foo' format = 'two-words lower-case' / >` => ` {{ 'foo' : 'example one' }} ` - `<list name = 'bar' ><string format = 'upper-case' / >< / list >` => ` {{ \"bar\" : [ 'STRING ONE' , 'STRING TWO' , etc. ]}} ` - `<object name = 'baz' ><string name = \"foo\" format = \"capitalize two-words\" / ><integer name = \"index\" format = \"1-indexed\" / >< / object >` = > ` {{ 'baz' : {{ 'foo' : 'Some String' , 'index' : 1 }}}} ` JSON Object:","title":"Step 2: Create a Guard object with the RAIL Spec"},{"location":"examples/generate_structured_data/#step-3-wrap-the-llm-api-call-with-guard","text":"import openai raw_llm_response , validated_response = guard ( openai . Completion . create , engine = \"text-davinci-003\" , max_tokens = 2048 , temperature = 0 ) /Users/shreyarajpal/anaconda3/envs/tiff-env/lib/python3.9/site-packages/eliot/json.py:22: FutureWarning: In the future `np.bool` will be defined as the corresponding NumPy scalar. (This may have returned Python scalars in past versions. if isinstance(o, (numpy.bool, numpy.bool_)): Running the cell above returns: 1. The raw LLM text output as a single string. 2. A dictionary where the key user_orders key contains a list of dictionaries, where each dictionary represents a row in the dataframe. print ( validated_response ) { 'user_orders' : [ { 'user_id' : 1 , 'user_name' : 'John Smith' , 'num_orders' : 10 , 'last_order_date' : '2020-01-01' } , { 'user_id' : 2 , 'user_name' : 'Jane Doe' , 'num_orders' : 5 , 'last_order_date' : '2020-02-01' } , { 'user_id' : 3 , 'user_name' : 'Bob Jones' , 'num_orders' : 25 , 'last_order_date' : '2020-03-01' } , { 'user_id' : 4 , 'user_name' : 'Alice Johnson' , 'num_orders' : 0 , 'last_order_date' : '2020-04-01' } , { 'user_id' : 5 , 'user_name' : 'John Doe' , 'num_orders' : 15 , 'last_order_date' : '2020-05-01' } , { 'user_id' : 6 , 'user_name' : 'Jane Smith' , 'num_orders' : 20 , 'last_order_date' : '2020-06-01' } , { 'user_id' : 7 , 'user_name' : 'Bob Johnson' , 'num_orders' : 10 , 'last_order_date' : '2020-07-01' } , { 'user_id' : 8 , 'user_name' : 'Alice Jones' , 'num_orders' : 30 , 'last_order_date' : '2020-08-01' } , { 'user_id' : 9 , 'user_name' : 'John Johnson' , 'num_orders' : 40 , 'last_order_date' : '2020-09-01' } , { 'user_id' : 10 , 'user_name' : 'Jane Jones' , 'num_orders' : 35 , 'last_order_date' : '2020-10-01' } ] } print ( guard . state . most_recent_call . tree ) Logs \u2514\u2500\u2500 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Step 1 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Prompt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Generate a dataset of fake user orders. Each row of the dataset should be valid. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Given below is XML that describes the information to extract from this document and the tags to extract \u2502 \u2502 \u2502 \u2502 it into. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 <output> \u2502 \u2502 \u2502 \u2502 <list name=\"user_orders\" description=\"Generate a list of user, and how many orders they have placed \u2502 \u2502 \u2502 \u2502 in the past.\" format=\"length: min=10 max=10\"> \u2502 \u2502 \u2502 \u2502 <object> \u2502 \u2502 \u2502 \u2502 <string name=\"user_id\" description=\"The user's id.\" format=\"1-indexed\"/> \u2502 \u2502 \u2502 \u2502 <string name=\"user_name\" description=\"The user's first name and last name\" \u2502 \u2502 \u2502 \u2502 format=\"two-words\"/> \u2502 \u2502 \u2502 \u2502 <integer name=\"num_orders\" description=\"The number of orders the user has placed\" \u2502 \u2502 \u2502 \u2502 format=\"valid-range: 0 50\"/> \u2502 \u2502 \u2502 \u2502 <date name=\"last_order_date\" description=\"Date of last order\"/> \u2502 \u2502 \u2502 \u2502 </object> \u2502 \u2502 \u2502 \u2502 </list> \u2502 \u2502 \u2502 \u2502 </output> \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 ONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the \u2502 \u2502 \u2502 \u2502 `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding \u2502 \u2502 \u2502 \u2502 XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. \u2502 \u2502 \u2502 \u2502 requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere, \u2502 \u2502 \u2502 \u2502 enter `None`. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Here are examples of simple (XML, JSON) pairs that show the expected behavior: \u2502 \u2502 \u2502 \u2502 - `<string name='foo' format='two-words lower-case' />` => `{'foo': 'example one'}` \u2502 \u2502 \u2502 \u2502 - `<list name='bar'><string format='upper-case' /></list>` => `{\"bar\": ['STRING ONE', 'STRING TWO', \u2502 \u2502 \u2502 \u2502 etc.]}` \u2502 \u2502 \u2502 \u2502 - `<object name='baz'><string name=\"foo\" format=\"capitalize two-words\" /><integer name=\"index\" \u2502 \u2502 \u2502 \u2502 format=\"1-indexed\" /></object>` => `{'baz': {'foo': 'Some String', 'index': 1}}` \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 JSON Object: \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Raw LLM Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"user_orders\": [ \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"user_id\": 1, \u2502 \u2502 \u2502 \u2502 \"user_name\": \"John Smith\", \u2502 \u2502 \u2502 \u2502 \"num_orders\": 10, \u2502 \u2502 \u2502 \u2502 \"last_order_date\": \"2020-01-01\" \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"user_id\": 2, \u2502 \u2502 \u2502 \u2502 \"user_name\": \"Jane Doe\", \u2502 \u2502 \u2502 \u2502 \"num_orders\": 5, \u2502 \u2502 \u2502 \u2502 \"last_order_date\": \"2020-02-01\" \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"user_id\": 3, \u2502 \u2502 \u2502 \u2502 \"user_name\": \"Bob Jones\", \u2502 \u2502 \u2502 \u2502 \"num_orders\": 25, \u2502 \u2502 \u2502 \u2502 \"last_order_date\": \"2020-03-01\" \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"user_id\": 4, \u2502 \u2502 \u2502 \u2502 \"user_name\": \"Alice Johnson\", \u2502 \u2502 \u2502 \u2502 \"num_orders\": 0, \u2502 \u2502 \u2502 \u2502 \"last_order_date\": \"2020-04-01\" \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"user_id\": 5, \u2502 \u2502 \u2502 \u2502 \"user_name\": \"John Doe\", \u2502 \u2502 \u2502 \u2502 \"num_orders\": 15, \u2502 \u2502 \u2502 \u2502 \"last_order_date\": \"2020-05-01\" \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"user_id\": 6, \u2502 \u2502 \u2502 \u2502 \"user_name\": \"Jane Smith\", \u2502 \u2502 \u2502 \u2502 \"num_orders\": 20, \u2502 \u2502 \u2502 \u2502 \"last_order_date\": \"2020-06-01\" \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"user_id\": 7, \u2502 \u2502 \u2502 \u2502 \"user_name\": \"Bob Johnson\", \u2502 \u2502 \u2502 \u2502 \"num_orders\": 10, \u2502 \u2502 \u2502 \u2502 \"last_order_date\": \"2020-07-01\" \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"user_id\": 8, \u2502 \u2502 \u2502 \u2502 \"user_name\": \"Alice Jones\", \u2502 \u2502 \u2502 \u2502 \"num_orders\": 30, \u2502 \u2502 \u2502 \u2502 \"last_order_date\": \"2020-08-01\" \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"user_id\": 9, \u2502 \u2502 \u2502 \u2502 \"user_name\": \"John Johnson\", \u2502 \u2502 \u2502 \u2502 \"num_orders\": 40, \u2502 \u2502 \u2502 \u2502 \"last_order_date\": \"2020-09-01\" \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"user_id\": 10, \u2502 \u2502 \u2502 \u2502 \"user_name\": \"Jane Jones\", \u2502 \u2502 \u2502 \u2502 \"num_orders\": 35, \u2502 \u2502 \u2502 \u2502 \"last_order_date\": \"2020-10-01\" \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 ] \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Validated Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'user_orders': [ \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'user_id': 1, \u2502 \u2502 \u2502 \u2502 'user_name': 'John Smith', \u2502 \u2502 \u2502 \u2502 'num_orders': 10, \u2502 \u2502 \u2502 \u2502 'last_order_date': '2020-01-01' \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'user_id': 2, \u2502 \u2502 \u2502 \u2502 'user_name': 'Jane Doe', \u2502 \u2502 \u2502 \u2502 'num_orders': 5, \u2502 \u2502 \u2502 \u2502 'last_order_date': '2020-02-01' \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'user_id': 3, \u2502 \u2502 \u2502 \u2502 'user_name': 'Bob Jones', \u2502 \u2502 \u2502 \u2502 'num_orders': 25, \u2502 \u2502 \u2502 \u2502 'last_order_date': '2020-03-01' \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'user_id': 4, \u2502 \u2502 \u2502 \u2502 'user_name': 'Alice Johnson', \u2502 \u2502 \u2502 \u2502 'num_orders': 0, \u2502 \u2502 \u2502 \u2502 'last_order_date': '2020-04-01' \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'user_id': 5, \u2502 \u2502 \u2502 \u2502 'user_name': 'John Doe', \u2502 \u2502 \u2502 \u2502 'num_orders': 15, \u2502 \u2502 \u2502 \u2502 'last_order_date': '2020-05-01' \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'user_id': 6, \u2502 \u2502 \u2502 \u2502 'user_name': 'Jane Smith', \u2502 \u2502 \u2502 \u2502 'num_orders': 20, \u2502 \u2502 \u2502 \u2502 'last_order_date': '2020-06-01' \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'user_id': 7, \u2502 \u2502 \u2502 \u2502 'user_name': 'Bob Johnson', \u2502 \u2502 \u2502 \u2502 'num_orders': 10, \u2502 \u2502 \u2502 \u2502 'last_order_date': '2020-07-01' \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'user_id': 8, \u2502 \u2502 \u2502 \u2502 'user_name': 'Alice Jones', \u2502 \u2502 \u2502 \u2502 'num_orders': 30, \u2502 \u2502 \u2502 \u2502 'last_order_date': '2020-08-01' \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'user_id': 9, \u2502 \u2502 \u2502 \u2502 'user_name': 'John Johnson', \u2502 \u2502 \u2502 \u2502 'num_orders': 40, \u2502 \u2502 \u2502 \u2502 'last_order_date': '2020-09-01' \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'user_id': 10, \u2502 \u2502 \u2502 \u2502 'user_name': 'Jane Jones', \u2502 \u2502 \u2502 \u2502 'num_orders': 35, \u2502 \u2502 \u2502 \u2502 'last_order_date': '2020-10-01' \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 ] \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"Step 3: Wrap the LLM API call with Guard"},{"location":"examples/guardrails_with_chat_models/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Using Guardrails with Chat Models Note To download this example as a Jupyter notebook, click here . In this example, we will set up Guardrails with a chat model. Objective We retry the entity extraction example using a chat model. Step 0: Download PDF and load it as string To get started, download the document from here and save it in data/chase_card_agreement.pdf . Guardrails has some built-in functions to help with common tasks. Here, we will use the read_pdf function to load the PDF as a string. import guardrails as gd from rich import print content = gd . docs_utils . read_pdf ( \"data/chase_card_agreement.pdf\" ) print ( f \"Chase Credit Card Document: \\n\\n { content [: 275 ] } \\n ...\" ) Chase Credit Card Document: 2 / 25 / 23 , 7:59 PM about:blank about:blank 1 / 4 PRICING INFORMATION INTEREST RATES AND INTEREST CHARGES Purchase Annual Percentage Rate ( APR ) 0 % Intro APR for the first 18 months that your Account is open. After that, 19.49 %. This APR will vary with the market based on the Prim ... Step 1: Create the RAIL Spec with <instruction> tags In order to use Guardrails with a chat model, we need to add <instruction> tags to the RAIL spec. These tags will be used to generate the system message for the chat model. Ordinarily, everything that is contained in the <prompt> tag will be split across <prompt> and <instruction> tags. Here's an example illustrating the differences. RAIL Spec with instruction tag RAIL Spec without instruction tag <instructions> You are a helpful assistant only capable of communicating with valid JSON, and no other text. @json_suffix_prompt_examples </instructions> <prompt> Given the following document, answer the following questions. If the answer doesn't exist in the document, enter `null`. {{document}} Extract information from this document and return a JSON that follows the correct schema. @xml_prefix_prompt {output_schema} </prompt> <prompt> Given the following document, answer the following questions. If the answer doesn't exist in the document, enter `null`. {{document}} @xml_prefix_prompt {output_schema} @json_suffix_prompt_v2_wo_none </prompt> After materialization, the two specs will look like this: RAIL Spec with instruction tag RAIL Spec without instruction tag <instructions> You are a helpful assistant only capable of communicating with valid JSON, and no other text. ONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere, enter `None`. Here are examples of simple (XML, JSON) pairs that show the expected behavior: - ` <string name= 'foo' format= 'two-words lower-case' /> ` => `{'foo': 'example one'}` - ` <list name= 'bar' ><string format= 'upper-case' /></list> ` => `{\"bar\": ['STRING ONE', 'STRING TWO', etc.]}` - ` <object name= 'baz' ><string name= \"foo\" format= \"capitalize two-words\" /><integer name= \"index\" format= \"1-indexed\" /></object> ` => `{'baz': {'foo': 'Some String', 'index': 1}}` </instructions> <prompt> Given the following document, answer the following questions. If the answer doesn't exist in the document, enter `null`. {{document}} Extract information from this document and return a JSON that follows the correct schema. Given below is XML that describes the information to extract from this document and the tags to extract it into. {output_schema} </prompt> <prompt> Given the following document, answer the following questions. If the answer doesn't exist in the document, enter `null`. {{document}} Given below is XML that describes the information to extract from this document and the tags to extract it into. {output_schema} ONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere, enter `None`. Here are examples of simple (XML, JSON) pairs that show the expected behavior: - ` <string name= 'foo' format= 'two-words lower-case' /> ` => `{'foo': 'example one'}` - ` <list name= 'bar' ><string format= 'upper-case' /></list> ` => `{\"bar\": ['STRING ONE', 'STRING TWO', etc.]}` - ` <object name= 'baz' ><string name= \"foo\" format= \"capitalize two-words\" /><integer name= \"index\" format= \"1-indexed\" /></object> ` => `{'baz': {'foo': 'Some String', 'index': 1}}` </prompt> Here's the final RAIL spec: rail_str = \"\"\" <rail version=\"0.1\"> <output> <list name=\"fees\" description=\"What fees and charges are associated with my account?\"> <object> <integer name=\"index\" format=\"1-indexed\" /> <string name=\"name\" format=\"lower-case; two-words\" on-fail-lower-case=\"fix\" on-fail-two-words=\"reask\" /> <string name=\"explanation\" format=\"one-line\" /> <float name=\"value\" format=\"percentage\"/> </object> </list> <object name=\"interest_rates\" description=\"What are the interest rates offered by the bank on savings and checking accounts, loans, and credit products?\" /> </output> <instructions> You are a helpful assistant only capable of communicating with valid JSON, and no other text. @json_suffix_prompt_examples </instructions> <prompt> Given the following document, answer the following questions. If the answer doesn't exist in the document, enter `null`. {{document}} Extract information from this document and return a JSON that follows the correct schema. @xml_prefix_prompt {output_schema} </prompt> </rail> \"\"\" Step 2: Create a Guard object with the RAIL Spec We create a gd.Guard object that will check, validate and correct the output of the LLM. This object: Enforces the quality criteria specified in the RAIL spec. Takes corrective action when the quality criteria are not met. Compiles the schema and type info from the RAIL spec and adds it to the prompt. guard = gd . Guard . from_rail_string ( rail_str ) /Users/shreyarajpal/guardrails/guardrails/schema.py:197: UserWarning: Validator 1-indexed is not valid for element integer. warnings.warn( /Users/shreyarajpal/guardrails/guardrails/schema.py:197: UserWarning: Validator percentage is not valid for element float. warnings.warn( As we can see, a few formatters weren't supported. These formatters won't be enforced in the output, but this information can still be used to generate a prompt. We see the prompt that will be sent to the LLM. The {document} is substituted with the user provided value at runtime. print ( guard . base_prompt ) Given the following document, answer the following questions. If the answer doesn't exist in the document, enter `null`. { document } Extract information from this document and return a JSON that follows the correct schema. Given below is XML that describes the information to extract from this document and the tags to extract it into. < output > <list name = \"fees\" description = \"What fees and charges are associated with my account?\" > <object> <integer name = \"index\" format = \"1-indexed\" / > <string name = \"name\" format = \"lower-case; two-words\" / > <string name = \"explanation\" format = \"one-line\" / > <float name = \"value\" format = \"percentage\" / > < / object > < / list > <object name = \"interest_rates\" description = \"What are the interest rates offered by the bank on savings and checking accounts, loans, and credit products?\" / > < / output > Here's the formatted instructions sent as the system message to the LLM. print ( guard . instructions . source ) You are a helpful assistant only capable of communicating with valid JSON, and no other text. ONLY return a valid JSON object ( no other text is necessary ) , where the key of the field in JSON is the `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere, enter ` None `. Here are examples of simple ( XML, JSON ) pairs that show the expected behavior: - ` < string name = 'foo' format = 'two-words lower-case' / >` => ` {{ 'foo' : 'example one' }} ` - `<list name = 'bar' ><string format = 'upper-case' / >< / list >` => ` {{ \"bar\" : [ 'STRING ONE' , 'STRING TWO' , etc. ]}} ` - `<object name = 'baz' ><string name = \"foo\" format = \"capitalize two-words\" / ><integer name = \"index\" format = \"1-indexed\" / >< / object >` = > ` {{ 'baz' : {{ 'foo' : 'Some String' , 'index' : 1 }}}} ` Step 3: Wrap the LLM API call with Guard Compared to the entity extraction example , we call the OpenAI ChatCompletion API instead of the OpenAI Completion API. We also pass the model argument instead of the engine argument. import openai raw_llm_response , validated_response = guard ( openai . ChatCompletion . create , prompt_params = { \"document\" : content [: 6000 ]}, model = \"gpt-3.5-turbo\" , max_tokens = 2048 , temperature = 0 , ) /Users/shreyarajpal/anaconda3/envs/tiff-env/lib/python3.9/site-packages/eliot/json.py:22: FutureWarning: In the future `np.bool` will be defined as the corresponding NumPy scalar. (This may have returned Python scalars in past versions. if isinstance(o, (numpy.bool, numpy.bool_)): The guard wrapper returns the raw_llm_respose (which is a simple string), and the validated and corrected output (which is a dictionary). We can see that the output is a dictionary with the correct schema and types. print ( validated_response ) { 'fees' : [ { 'index' : 1 , 'name' : 'annual membership' , 'explanation' : 'None' , 'value' : 0.0 } , { 'index' : 2 , 'name' : 'My Chase' , 'explanation' : 'monthly fee of 0% of the amount of each eligible purchase transaction or amount selected to create a my chase plan while in the 0% intro purchase apr period. after that, monthly fee of 1.72% of the amount of each eligible purchase transaction or amount selected to create a my chase plan. the my chase plan fee will be determined at the time each my chase plan is created and will remain the same until the my chase plan is paid in full.' , 'value' : 1.72 } , { 'index' : 3 , 'name' : 'balance transfers' , 'explanation' : 'intro fee of either $5 or 3% of the amount of each transfer, whichever is greater, on transfers made within 60 days of account opening. after that: either $5 or 5% of the amount of each transfer, whichever is greater.' , 'value' : 5.0 } , { 'index' : 4 , 'name' : 'cash advances' , 'explanation' : 'Either $10 or 5% of the amount of each transaction, whichever is greater.' , 'value' : 5.0 } , { 'index' : 5 , 'name' : 'foreign transactions' , 'explanation' : '3% of the amount of each transaction in U.S. dollars.' , 'value' : 3.0 } , { 'index' : 6 , 'name' : 'Late Payment' , 'explanation' : 'Up to $40.' , 'value' : None } , { 'index' : 7 , 'name' : 'over-the-credit-limit penalty' , 'explanation' : 'None' , 'value' : None } , { 'index' : 8 , 'name' : 'Return Payment' , 'explanation' : 'Up to $40.' , 'value' : None } , { 'index' : 9 , 'name' : 'Return Check' , 'explanation' : 'None' , 'value' : None } ] , 'interest_rates' : { 'purchase annual percentage rate (apr)' : { 'introductory rate' : 0.0 , 'introductory period' : 'first 18 months' , 'standard rate' : 19.49 , 'variable' : True , 'description' : 'The interest rate charged on purchases made with the credit card.' } , 'my chase loan sm apr' : { 'rate' : 19.49 , 'variable' : True , 'description' : 'The interest rate charged on My Chase Loan balances.' } , 'balance transfer apr' : { 'introductory rate' : 0.0 , 'introductory period' : 'first 18 months' , 'standard rate' : 19.49 , 'variable' : True , 'description' : 'The interest rate charged on balances transferred to the credit card.' } , 'cash advance apr' : { 'rate' : 29.49 , 'variable' : True , 'description' : 'The interest rate charged on cash advances taken with the credit card.' } , 'penalty apr and when it applies' : { 'rate' : 'Up to 29.99%' , 'variable' : True , 'description' : 'The interest rate charged on the credit card when a penalty is applied.' } , 'maximum apr' : { 'rate' : 29.99 , 'variable' : True , 'description' : 'The highest interest rate that can be charged on the credit card.' } } } guard . state . most_recent_call . tree Logs \u251c\u2500\u2500 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Step 0 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Prompt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Given the following document, answer the following questions. If the answer doesn't exist in the \u2502 \u2502 \u2502 \u2502 \u2502 document, enter \u2502 \u2502 \u2502 \u2502 \u2502 `null`. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 2/25/23, 7:59 PM about:blank \u2502 \u2502 \u2502 \u2502 \u2502 about:blank 1/4 \u2502 \u2502 \u2502 \u2502 \u2502 PRICING INFORMATION \u2502 \u2502 \u2502 \u2502 \u2502 INTEREST RATES AND INTEREST CHARGES \u2502 \u2502 \u2502 \u2502 \u2502 Purchase Annual \u2502 \u2502 \u2502 \u2502 \u2502 Percentage Rate (APR) 0% Intro APR for the first 18 months that your Account is open. \u2502 \u2502 \u2502 \u2502 \u2502 After that, 19.49%. This APR will vary with the market based on the Prime \u2502 \u2502 \u2502 \u2502 \u2502 Rate. \u2502 \u2502 \u2502 \u2502 \u2502 a \u2502 \u2502 \u2502 \u2502 \u2502 My Chase Loan \u2502 \u2502 \u2502 \u2502 \u2502 SM APR 19.49%. This APR will vary with the market based on the Prime Rate. \u2502 \u2502 \u2502 \u2502 \u2502 a \u2502 \u2502 \u2502 \u2502 \u2502 Promotional offers with fixed APRs and varying durations may be available from \u2502 \u2502 \u2502 \u2502 \u2502 time to time on some accounts. \u2502 \u2502 \u2502 \u2502 \u2502 Balance Transfer APR 0% Intro APR for the first 18 months that your Account is open. \u2502 \u2502 \u2502 \u2502 \u2502 After that, 19.49%. This APR will vary with the market based on the Prime \u2502 \u2502 \u2502 \u2502 \u2502 Rate. \u2502 \u2502 \u2502 \u2502 \u2502 a \u2502 \u2502 \u2502 \u2502 \u2502 Cash Advance APR 29.49%. This APR will vary with the market based on the Prime Rate. \u2502 \u2502 \u2502 \u2502 \u2502 b \u2502 \u2502 \u2502 \u2502 \u2502 Penalty APR and When \u2502 \u2502 \u2502 \u2502 \u2502 It Applies \u2502 \u2502 \u2502 \u2502 \u2502 Up to 29.99%. This APR will vary with the market based on the Prime Rate. \u2502 \u2502 \u2502 \u2502 \u2502 c \u2502 \u2502 \u2502 \u2502 \u2502 We may apply the Penalty APR to your account if you: \u2502 \u2502 \u2502 \u2502 \u2502 fail to make a Minimum Payment by the date and time that it is due; or \u2502 \u2502 \u2502 \u2502 \u2502 make a payment to us that is returned unpaid. \u2502 \u2502 \u2502 \u2502 \u2502 How Long Will the Penalty APR Apply?: If we apply the Penalty APR for \u2502 \u2502 \u2502 \u2502 \u2502 either of these reasons, the Penalty APR could potentially remain in effect \u2502 \u2502 \u2502 \u2502 \u2502 indefinitely. \u2502 \u2502 \u2502 \u2502 \u2502 How to Avoid Paying \u2502 \u2502 \u2502 \u2502 \u2502 Interest on Purchases \u2502 \u2502 \u2502 \u2502 \u2502 Your due date will be a minimum of 21 days after the close of each billing cycle. \u2502 \u2502 \u2502 \u2502 \u2502 We will not charge you interest on new purchases if you pay your entire balance \u2502 \u2502 \u2502 \u2502 \u2502 or Interest Saving Balance by the due date each month. We will begin charging \u2502 \u2502 \u2502 \u2502 \u2502 interest on balance transfers and cash advances on the transaction date. \u2502 \u2502 \u2502 \u2502 \u2502 Minimum Interest \u2502 \u2502 \u2502 \u2502 \u2502 Charge \u2502 \u2502 \u2502 \u2502 \u2502 None \u2502 \u2502 \u2502 \u2502 \u2502 Credit Card Tips from \u2502 \u2502 \u2502 \u2502 \u2502 the Consumer Financial \u2502 \u2502 \u2502 \u2502 \u2502 Protection Bureau \u2502 \u2502 \u2502 \u2502 \u2502 To learn more about factors to consider when applying for or using a credit card, \u2502 \u2502 \u2502 \u2502 \u2502 visit the website of the Consumer Financial Protection Bureau at \u2502 \u2502 \u2502 \u2502 \u2502 http://www.consumerfinance.gov/learnmore. \u2502 \u2502 \u2502 \u2502 \u2502 FEES \u2502 \u2502 \u2502 \u2502 \u2502 Annual Membership \u2502 \u2502 \u2502 \u2502 \u2502 Fee \u2502 \u2502 \u2502 \u2502 \u2502 None \u2502 \u2502 \u2502 \u2502 \u2502 My Chase Plan \u2502 \u2502 \u2502 \u2502 \u2502 SM Fee \u2502 \u2502 \u2502 \u2502 \u2502 (fixed finance charge) \u2502 \u2502 \u2502 \u2502 \u2502 Monthly fee of 0% of the amount of each eligible purchase transaction or \u2502 \u2502 \u2502 \u2502 \u2502 amount selected to create a My Chase Plan while in the 0% Intro Purchase \u2502 \u2502 \u2502 \u2502 \u2502 APR period. \u2502 \u2502 \u2502 \u2502 \u2502 After that, monthly fee of 1.72% of the amount of each eligible purchase \u2502 \u2502 \u2502 \u2502 \u2502 transaction or amount selected to create a My Chase Plan. The My Chase Plan \u2502 \u2502 \u2502 \u2502 \u2502 Fee will be determined at the time each My Chase Plan is created and will \u2502 \u2502 \u2502 \u2502 \u2502 remain the same until the My Chase Plan is paid in full. \u2502 \u2502 \u2502 \u2502 \u2502 d \u2502 \u2502 \u2502 \u2502 \u2502 Transaction Fees \u2502 \u2502 \u2502 \u2502 \u2502 Balance Transfers Intro fee of either $5 or 3% of the amount of each transfer, whichever is greater, \u2502 \u2502 \u2502 \u2502 \u2502 on transfers made within 60 days of account opening. After that: Either $5 or 5% \u2502 \u2502 \u2502 \u2502 \u2502 of the amount of each transfer, whichever is greater. \u2502 \u2502 \u2502 \u2502 \u2502 Cash Advances Either $10 or 5% of the amount of each transaction, whichever is greater. \u2502 \u2502 \u2502 \u2502 \u2502 2/25/23, 7:59 PM about:blank \u2502 \u2502 \u2502 \u2502 \u2502 about:blank 2/4 \u2502 \u2502 \u2502 \u2502 \u2502 Foreign Transactions 3% of the amount of each transaction in U.S. dollars. \u2502 \u2502 \u2502 \u2502 \u2502 Penalty Fees \u2502 \u2502 \u2502 \u2502 \u2502 Late Payment Up to $40. \u2502 \u2502 \u2502 \u2502 \u2502 Over-the-Credit-Limit None \u2502 \u2502 \u2502 \u2502 \u2502 Return Payment Up to $40. \u2502 \u2502 \u2502 \u2502 \u2502 Return Check None \u2502 \u2502 \u2502 \u2502 \u2502 Note: This account may not be eligible for balance transfers. \u2502 \u2502 \u2502 \u2502 \u2502 Loss of Intro APR: We will end your introductory APR if any required Minimum Payment is 60 days late, \u2502 \u2502 \u2502 \u2502 \u2502 and \u2502 \u2502 \u2502 \u2502 \u2502 apply the Penalty APR. \u2502 \u2502 \u2502 \u2502 \u2502 How We Will Calculate Your Balance: We use the daily balance method (including new transactions). \u2502 \u2502 \u2502 \u2502 \u2502 Prime Rate: Variable APRs are based on the 7.75% Prime Rate as of 2/7/2023. \u2502 \u2502 \u2502 \u2502 \u2502 aWe add 11.74% to the Prime Rate to determine the Purchase/My Chase Loan/Balance Transfer APR. \u2502 \u2502 \u2502 \u2502 \u2502 Maximum APR 29.99%. \u2502 \u2502 \u2502 \u2502 \u2502 bWe add 21.74% to the Prime Rate to determine the Cash Advance APR. Maximum APR 29.99%. \u2502 \u2502 \u2502 \u2502 \u2502 cWe add up to 26.99% to the Prime Rate to determine the Penalty APR. Maximum APR 29.99%. \u2502 \u2502 \u2502 \u2502 \u2502 dMy Chase Plan Fee: The My Chase Plan Fee is calculated at the time each plan is created and is based \u2502 \u2502 \u2502 \u2502 \u2502 on \u2502 \u2502 \u2502 \u2502 \u2502 the amount of each purchase transaction or amount selected to create the plan, the number of billing \u2502 \u2502 \u2502 \u2502 \u2502 periods \u2502 \u2502 \u2502 \u2502 \u2502 you choose to pay the balance in full, and other factors. The monthly and aggregate dollar amount of \u2502 \u2502 \u2502 \u2502 \u2502 your My \u2502 \u2502 \u2502 \u2502 \u2502 Chase Plan Fee will be disclosed during the activation of each My Chase Plan. \u2502 \u2502 \u2502 \u2502 \u2502 MILITARY LENDING ACT NOTICE: Federal law provides important protections to members of the Armed \u2502 \u2502 \u2502 \u2502 \u2502 Forces and their dependents relating to extensions of consumer credit. In general, the cost of consumer \u2502 \u2502 \u2502 \u2502 \u2502 credit \u2502 \u2502 \u2502 \u2502 \u2502 to a member of the Armed Forces and his or her dependent may not exceed an annual percentage rate of 36 \u2502 \u2502 \u2502 \u2502 \u2502 percent. This rate must include, as applicable to the credit transaction or account: the costs \u2502 \u2502 \u2502 \u2502 \u2502 associated with \u2502 \u2502 \u2502 \u2502 \u2502 credit insurance premiums; fees for ancillary products sold in connection with the credit transaction; \u2502 \u2502 \u2502 \u2502 \u2502 any \u2502 \u2502 \u2502 \u2502 \u2502 application fee charged (other than certain application fees for specified credit transactions or \u2502 \u2502 \u2502 \u2502 \u2502 accounts); and \u2502 \u2502 \u2502 \u2502 \u2502 any participation fee charged (other than certain participation fees for a credit card account). To \u2502 \u2502 \u2502 \u2502 \u2502 receive this \u2502 \u2502 \u2502 \u2502 \u2502 information and a description of your payment obligation verbally, please call 1-800-235-9978. \u2502 \u2502 \u2502 \u2502 \u2502 TERMS & CONDITIONS \u2502 \u2502 \u2502 \u2502 \u2502 Authorization: When you respond to this credit card offer from JPMorgan Chase Bank, N.A., Member FDIC, \u2502 \u2502 \u2502 \u2502 \u2502 a \u2502 \u2502 \u2502 \u2502 \u2502 subsidiary of JPMorgan Chase & Co. (\"Chase\", \"we\", or \"us\"), you agree to the following: \u2502 \u2502 \u2502 \u2502 \u2502 1. You authorize us to obtain credit bureau reports, employment, and income information about you that \u2502 \u2502 \u2502 \u2502 \u2502 we \u2502 \u2502 \u2502 \u2502 \u2502 will use when considering your application for credit. We may obtain and use information about your \u2502 \u2502 \u2502 \u2502 \u2502 accounts with us and others such as Checking, Deposit, Investment, and Utility accounts from credit \u2502 \u2502 \u2502 \u2502 \u2502 bureaus and other entities. You also authorize us to obtain credit bureau reports and any other \u2502 \u2502 \u2502 \u2502 \u2502 information about you in connection with: 1) extensions of credit on your account; 2) the \u2502 \u2502 \u2502 \u2502 \u2502 administration, \u2502 \u2502 \u2502 \u2502 \u2502 review or collection of your account; and 3) offering you enhanced or additional products and services. \u2502 \u2502 \u2502 \u2502 \u2502 If \u2502 \u2502 \u2502 \u2502 \u2502 you ask, we will tell you the name and address of the credit bureau from which we obtained a report \u2502 \u2502 \u2502 \u2502 \u2502 about you. \u2502 \u2502 \u2502 \u2502 \u2502 2. If an account is opened, you will receive a Cardmember Agreement with your card(s). You agree to the \u2502 \u2502 \u2502 \u2502 \u2502 terms of this agreement by: using the account or any card, authorizing their use, or making any payment \u2502 \u2502 \u2502 \u2502 \u2502 on the account. \u2502 \u2502 \u2502 \u2502 \u2502 3. By providing your mobile ph \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Extract information from this document and return a JSON that follows the correct schema. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Given below is XML that describes the information to extract from this document and the tags to extract \u2502 \u2502 \u2502 \u2502 \u2502 it into. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 <output> \u2502 \u2502 \u2502 \u2502 \u2502 <list name=\"fees\" description=\"What fees and charges are associated with my account?\"> \u2502 \u2502 \u2502 \u2502 \u2502 <object> \u2502 \u2502 \u2502 \u2502 \u2502 <integer name=\"index\" format=\"1-indexed\"/> \u2502 \u2502 \u2502 \u2502 \u2502 <string name=\"name\" format=\"lower-case; two-words\"/> \u2502 \u2502 \u2502 \u2502 \u2502 <string name=\"explanation\" format=\"one-line\"/> \u2502 \u2502 \u2502 \u2502 \u2502 <float name=\"value\" format=\"percentage\"/> \u2502 \u2502 \u2502 \u2502 \u2502 </object> \u2502 \u2502 \u2502 \u2502 \u2502 </list> \u2502 \u2502 \u2502 \u2502 \u2502 <object name=\"interest_rates\" description=\"What are the interest rates offered by the bank on \u2502 \u2502 \u2502 \u2502 \u2502 savings and checking accounts, loans, and credit products?\"/> \u2502 \u2502 \u2502 \u2502 \u2502 </output> \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Instructions \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 You are a helpful assistant only capable of communicating with valid JSON, and no other text. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 ONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the \u2502 \u2502 \u2502 \u2502 \u2502 `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding \u2502 \u2502 \u2502 \u2502 \u2502 XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. \u2502 \u2502 \u2502 \u2502 \u2502 requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere, \u2502 \u2502 \u2502 \u2502 \u2502 enter `None`. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Here are examples of simple (XML, JSON) pairs that show the expected behavior: \u2502 \u2502 \u2502 \u2502 \u2502 - `<string name='foo' format='two-words lower-case' />` => `{'foo': 'example one'}` \u2502 \u2502 \u2502 \u2502 \u2502 - `<list name='bar'><string format='upper-case' /></list>` => `{\"bar\": ['STRING ONE', 'STRING TWO', \u2502 \u2502 \u2502 \u2502 \u2502 etc.]}` \u2502 \u2502 \u2502 \u2502 \u2502 - `<object name='baz'><string name=\"foo\" format=\"capitalize two-words\" /><integer name=\"index\" \u2502 \u2502 \u2502 \u2502 \u2502 format=\"1-indexed\" /></object>` => `{'baz': {'foo': 'Some String', 'index': 1}}` \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Raw LLM Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 \"fees\": [ \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 \"index\": 1, \u2502 \u2502 \u2502 \u2502 \u2502 \"name\": \"annual membership fee\", \u2502 \u2502 \u2502 \u2502 \u2502 \"explanation\": \"None\", \u2502 \u2502 \u2502 \u2502 \u2502 \"value\": 0.0 \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 \"index\": 2, \u2502 \u2502 \u2502 \u2502 \u2502 \"name\": \"my chase plan sm fee\", \u2502 \u2502 \u2502 \u2502 \u2502 \"explanation\": \"monthly fee of 0% of the amount of each eligible purchase transaction or \u2502 \u2502 \u2502 \u2502 \u2502 amount selected to create a my chase plan while in the 0% intro purchase apr period. after that, \u2502 \u2502 \u2502 \u2502 \u2502 monthly fee of 1.72% of the amount of each eligible purchase transaction or amount selected to create a \u2502 \u2502 \u2502 \u2502 \u2502 my chase plan. the my chase plan fee will be determined at the time each my chase plan is created and \u2502 \u2502 \u2502 \u2502 \u2502 will remain the same until the my chase plan is paid in full.\", \u2502 \u2502 \u2502 \u2502 \u2502 \"value\": 1.72 \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 \"index\": 3, \u2502 \u2502 \u2502 \u2502 \u2502 \"name\": \"balance transfers transaction fee\", \u2502 \u2502 \u2502 \u2502 \u2502 \"explanation\": \"intro fee of either $5 or 3% of the amount of each transfer, whichever is \u2502 \u2502 \u2502 \u2502 \u2502 greater, on transfers made within 60 days of account opening. after that: either $5 or 5% of the amount \u2502 \u2502 \u2502 \u2502 \u2502 of each transfer, whichever is greater.\", \u2502 \u2502 \u2502 \u2502 \u2502 \"value\": 5.0 \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 \"index\": 4, \u2502 \u2502 \u2502 \u2502 \u2502 \"name\": \"cash advances transaction fee\", \u2502 \u2502 \u2502 \u2502 \u2502 \"explanation\": \"Either $10 or 5% of the amount of each transaction, whichever is greater.\", \u2502 \u2502 \u2502 \u2502 \u2502 \"value\": 5.0 \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 \"index\": 5, \u2502 \u2502 \u2502 \u2502 \u2502 \"name\": \"foreign transactions transaction fee\", \u2502 \u2502 \u2502 \u2502 \u2502 \"explanation\": \"3% of the amount of each transaction in U.S. dollars.\", \u2502 \u2502 \u2502 \u2502 \u2502 \"value\": 3.0 \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 \"index\": 6, \u2502 \u2502 \u2502 \u2502 \u2502 \"name\": \"late payment penalty fee\", \u2502 \u2502 \u2502 \u2502 \u2502 \"explanation\": \"Up to $40.\", \u2502 \u2502 \u2502 \u2502 \u2502 \"value\": null \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 \"index\": 7, \u2502 \u2502 \u2502 \u2502 \u2502 \"name\": \"over-the-credit-limit penalty fee\", \u2502 \u2502 \u2502 \u2502 \u2502 \"explanation\": \"None\", \u2502 \u2502 \u2502 \u2502 \u2502 \"value\": null \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 \"index\": 8, \u2502 \u2502 \u2502 \u2502 \u2502 \"name\": \"return payment penalty fee\", \u2502 \u2502 \u2502 \u2502 \u2502 \"explanation\": \"Up to $40.\", \u2502 \u2502 \u2502 \u2502 \u2502 \"value\": null \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 \"index\": 9, \u2502 \u2502 \u2502 \u2502 \u2502 \"name\": \"return check penalty fee\", \u2502 \u2502 \u2502 \u2502 \u2502 \"explanation\": \"None\", \u2502 \u2502 \u2502 \u2502 \u2502 \"value\": null \u2502 \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 \u2502 ], \u2502 \u2502 \u2502 \u2502 \u2502 \"interest_rates\": { \u2502 \u2502 \u2502 \u2502 \u2502 \"purchase annual percentage rate (apr)\": { \u2502 \u2502 \u2502 \u2502 \u2502 \"introductory rate\": 0.0, \u2502 \u2502 \u2502 \u2502 \u2502 \"introductory period\": \"first 18 months\", \u2502 \u2502 \u2502 \u2502 \u2502 \"standard rate\": 19.49, \u2502 \u2502 \u2502 \u2502 \u2502 \"variable\": true, \u2502 \u2502 \u2502 \u2502 \u2502 \"description\": \"The interest rate charged on purchases made with the credit card.\" \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 \"my chase loan sm apr\": { \u2502 \u2502 \u2502 \u2502 \u2502 \"rate\": 19.49, \u2502 \u2502 \u2502 \u2502 \u2502 \"variable\": true, \u2502 \u2502 \u2502 \u2502 \u2502 \"description\": \"The interest rate charged on My Chase Loan balances.\" \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 \"balance transfer apr\": { \u2502 \u2502 \u2502 \u2502 \u2502 \"introductory rate\": 0.0, \u2502 \u2502 \u2502 \u2502 \u2502 \"introductory period\": \"first 18 months\", \u2502 \u2502 \u2502 \u2502 \u2502 \"standard rate\": 19.49, \u2502 \u2502 \u2502 \u2502 \u2502 \"variable\": true, \u2502 \u2502 \u2502 \u2502 \u2502 \"description\": \"The interest rate charged on balances transferred to the credit card.\" \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 \"cash advance apr\": { \u2502 \u2502 \u2502 \u2502 \u2502 \"rate\": 29.49, \u2502 \u2502 \u2502 \u2502 \u2502 \"variable\": true, \u2502 \u2502 \u2502 \u2502 \u2502 \"description\": \"The interest rate charged on cash advances taken with the credit card.\" \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 \"penalty apr and when it applies\": { \u2502 \u2502 \u2502 \u2502 \u2502 \"rate\": \"Up to 29.99%\", \u2502 \u2502 \u2502 \u2502 \u2502 \"variable\": true, \u2502 \u2502 \u2502 \u2502 \u2502 \"description\": \"The interest rate charged on the credit card when a penalty is applied.\" \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 \"maximum apr\": { \u2502 \u2502 \u2502 \u2502 \u2502 \"rate\": 29.99, \u2502 \u2502 \u2502 \u2502 \u2502 \"variable\": true, \u2502 \u2502 \u2502 \u2502 \u2502 \"description\": \"The highest interest rate that can be charged on the credit card.\" \u2502 \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Validated Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 'fees': [ \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 'index': 1, \u2502 \u2502 \u2502 \u2502 \u2502 'name': ReAsk( \u2502 \u2502 \u2502 \u2502 \u2502 incorrect_value='annual membership fee', \u2502 \u2502 \u2502 \u2502 \u2502 error_message='must be exactly two words', \u2502 \u2502 \u2502 \u2502 \u2502 fix_value='annual membership', \u2502 \u2502 \u2502 \u2502 \u2502 path=['fees', 0, 'name'] \u2502 \u2502 \u2502 \u2502 \u2502 ), \u2502 \u2502 \u2502 \u2502 \u2502 'explanation': 'None', \u2502 \u2502 \u2502 \u2502 \u2502 'value': 0.0 \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 'index': 2, \u2502 \u2502 \u2502 \u2502 \u2502 'name': ReAsk( \u2502 \u2502 \u2502 \u2502 \u2502 incorrect_value='my chase plan sm fee', \u2502 \u2502 \u2502 \u2502 \u2502 error_message='must be exactly two words', \u2502 \u2502 \u2502 \u2502 \u2502 fix_value='my chase', \u2502 \u2502 \u2502 \u2502 \u2502 path=['fees', 1, 'name'] \u2502 \u2502 \u2502 \u2502 \u2502 ), \u2502 \u2502 \u2502 \u2502 \u2502 'explanation': 'monthly fee of 0% of the amount of each eligible purchase transaction or \u2502 \u2502 \u2502 \u2502 \u2502 amount selected to create a my chase plan while in the 0% intro purchase apr period. after that, \u2502 \u2502 \u2502 \u2502 \u2502 monthly fee of 1.72% of the amount of each eligible purchase transaction or amount selected to create a \u2502 \u2502 \u2502 \u2502 \u2502 my chase plan. the my chase plan fee will be determined at the time each my chase plan is created and \u2502 \u2502 \u2502 \u2502 \u2502 will remain the same until the my chase plan is paid in full.', \u2502 \u2502 \u2502 \u2502 \u2502 'value': 1.72 \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 'index': 3, \u2502 \u2502 \u2502 \u2502 \u2502 'name': ReAsk( \u2502 \u2502 \u2502 \u2502 \u2502 incorrect_value='balance transfers transaction fee', \u2502 \u2502 \u2502 \u2502 \u2502 error_message='must be exactly two words', \u2502 \u2502 \u2502 \u2502 \u2502 fix_value='balance transfers', \u2502 \u2502 \u2502 \u2502 \u2502 path=['fees', 2, 'name'] \u2502 \u2502 \u2502 \u2502 \u2502 ), \u2502 \u2502 \u2502 \u2502 \u2502 'explanation': 'intro fee of either $5 or 3% of the amount of each transfer, whichever is \u2502 \u2502 \u2502 \u2502 \u2502 greater, on transfers made within 60 days of account opening. after that: either $5 or 5% of the amount \u2502 \u2502 \u2502 \u2502 \u2502 of each transfer, whichever is greater.', \u2502 \u2502 \u2502 \u2502 \u2502 'value': 5.0 \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 'index': 4, \u2502 \u2502 \u2502 \u2502 \u2502 'name': ReAsk( \u2502 \u2502 \u2502 \u2502 \u2502 incorrect_value='cash advances transaction fee', \u2502 \u2502 \u2502 \u2502 \u2502 error_message='must be exactly two words', \u2502 \u2502 \u2502 \u2502 \u2502 fix_value='cash advances', \u2502 \u2502 \u2502 \u2502 \u2502 path=['fees', 3, 'name'] \u2502 \u2502 \u2502 \u2502 \u2502 ), \u2502 \u2502 \u2502 \u2502 \u2502 'explanation': 'Either $10 or 5% of the amount of each transaction, whichever is greater.', \u2502 \u2502 \u2502 \u2502 \u2502 'value': 5.0 \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 'index': 5, \u2502 \u2502 \u2502 \u2502 \u2502 'name': ReAsk( \u2502 \u2502 \u2502 \u2502 \u2502 incorrect_value='foreign transactions transaction fee', \u2502 \u2502 \u2502 \u2502 \u2502 error_message='must be exactly two words', \u2502 \u2502 \u2502 \u2502 \u2502 fix_value='foreign transactions', \u2502 \u2502 \u2502 \u2502 \u2502 path=['fees', 4, 'name'] \u2502 \u2502 \u2502 \u2502 \u2502 ), \u2502 \u2502 \u2502 \u2502 \u2502 'explanation': '3% of the amount of each transaction in U.S. dollars.', \u2502 \u2502 \u2502 \u2502 \u2502 'value': 3.0 \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 'index': 6, \u2502 \u2502 \u2502 \u2502 \u2502 'name': ReAsk( \u2502 \u2502 \u2502 \u2502 \u2502 incorrect_value='late payment penalty fee', \u2502 \u2502 \u2502 \u2502 \u2502 error_message='must be exactly two words', \u2502 \u2502 \u2502 \u2502 \u2502 fix_value='late payment', \u2502 \u2502 \u2502 \u2502 \u2502 path=['fees', 5, 'name'] \u2502 \u2502 \u2502 \u2502 \u2502 ), \u2502 \u2502 \u2502 \u2502 \u2502 'explanation': 'Up to $40.', \u2502 \u2502 \u2502 \u2502 \u2502 'value': None \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 'index': 7, \u2502 \u2502 \u2502 \u2502 \u2502 'name': ReAsk( \u2502 \u2502 \u2502 \u2502 \u2502 incorrect_value='over-the-credit-limit penalty fee', \u2502 \u2502 \u2502 \u2502 \u2502 error_message='must be exactly two words', \u2502 \u2502 \u2502 \u2502 \u2502 fix_value='over-the-credit-limit penalty', \u2502 \u2502 \u2502 \u2502 \u2502 path=['fees', 6, 'name'] \u2502 \u2502 \u2502 \u2502 \u2502 ), \u2502 \u2502 \u2502 \u2502 \u2502 'explanation': 'None', \u2502 \u2502 \u2502 \u2502 \u2502 'value': None \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 'index': 8, \u2502 \u2502 \u2502 \u2502 \u2502 'name': ReAsk( \u2502 \u2502 \u2502 \u2502 \u2502 incorrect_value='return payment penalty fee', \u2502 \u2502 \u2502 \u2502 \u2502 error_message='must be exactly two words', \u2502 \u2502 \u2502 \u2502 \u2502 fix_value='return payment', \u2502 \u2502 \u2502 \u2502 \u2502 path=['fees', 7, 'name'] \u2502 \u2502 \u2502 \u2502 \u2502 ), \u2502 \u2502 \u2502 \u2502 \u2502 'explanation': 'Up to $40.', \u2502 \u2502 \u2502 \u2502 \u2502 'value': None \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 'index': 9, \u2502 \u2502 \u2502 \u2502 \u2502 'name': ReAsk( \u2502 \u2502 \u2502 \u2502 \u2502 incorrect_value='return check penalty fee', \u2502 \u2502 \u2502 \u2502 \u2502 error_message='must be exactly two words', \u2502 \u2502 \u2502 \u2502 \u2502 fix_value='return check', \u2502 \u2502 \u2502 \u2502 \u2502 path=['fees', 8, 'name'] \u2502 \u2502 \u2502 \u2502 \u2502 ), \u2502 \u2502 \u2502 \u2502 \u2502 'explanation': 'None', \u2502 \u2502 \u2502 \u2502 \u2502 'value': None \u2502 \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 \u2502 ], \u2502 \u2502 \u2502 \u2502 \u2502 'interest_rates': { \u2502 \u2502 \u2502 \u2502 \u2502 'purchase annual percentage rate (apr)': { \u2502 \u2502 \u2502 \u2502 \u2502 'introductory rate': 0.0, \u2502 \u2502 \u2502 \u2502 \u2502 'introductory period': 'first 18 months', \u2502 \u2502 \u2502 \u2502 \u2502 'standard rate': 19.49, \u2502 \u2502 \u2502 \u2502 \u2502 'variable': True, \u2502 \u2502 \u2502 \u2502 \u2502 'description': 'The interest rate charged on purchases made with the credit card.' \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 'my chase loan sm apr': { \u2502 \u2502 \u2502 \u2502 \u2502 'rate': 19.49, \u2502 \u2502 \u2502 \u2502 \u2502 'variable': True, \u2502 \u2502 \u2502 \u2502 \u2502 'description': 'The interest rate charged on My Chase Loan balances.' \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 'balance transfer apr': { \u2502 \u2502 \u2502 \u2502 \u2502 'introductory rate': 0.0, \u2502 \u2502 \u2502 \u2502 \u2502 'introductory period': 'first 18 months', \u2502 \u2502 \u2502 \u2502 \u2502 'standard rate': 19.49, \u2502 \u2502 \u2502 \u2502 \u2502 'variable': True, \u2502 \u2502 \u2502 \u2502 \u2502 'description': 'The interest rate charged on balances transferred to the credit card.' \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 'cash advance apr': { \u2502 \u2502 \u2502 \u2502 \u2502 'rate': 29.49, \u2502 \u2502 \u2502 \u2502 \u2502 'variable': True, \u2502 \u2502 \u2502 \u2502 \u2502 'description': 'The interest rate charged on cash advances taken with the credit card.' \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 'penalty apr and when it applies': { \u2502 \u2502 \u2502 \u2502 \u2502 'rate': 'Up to 29.99%', \u2502 \u2502 \u2502 \u2502 \u2502 'variable': True, \u2502 \u2502 \u2502 \u2502 \u2502 'description': 'The interest rate charged on the credit card when a penalty is applied.' \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 'maximum apr': { \u2502 \u2502 \u2502 \u2502 \u2502 'rate': 29.99, \u2502 \u2502 \u2502 \u2502 \u2502 'variable': True, \u2502 \u2502 \u2502 \u2502 \u2502 'description': 'The highest interest rate that can be charged on the credit card.' \u2502 \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2514\u2500\u2500 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Step 1 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Prompt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 I was given the following JSON response, which had problems due to incorrect values. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"fees\": [ \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"name\": { \u2502 \u2502 \u2502 \u2502 \"incorrect_value\": \"annual membership fee\", \u2502 \u2502 \u2502 \u2502 \"error_message\": \"must be exactly two words\" \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"name\": { \u2502 \u2502 \u2502 \u2502 \"incorrect_value\": \"my chase plan sm fee\", \u2502 \u2502 \u2502 \u2502 \"error_message\": \"must be exactly two words\" \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"name\": { \u2502 \u2502 \u2502 \u2502 \"incorrect_value\": \"balance transfers transaction fee\", \u2502 \u2502 \u2502 \u2502 \"error_message\": \"must be exactly two words\" \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"name\": { \u2502 \u2502 \u2502 \u2502 \"incorrect_value\": \"cash advances transaction fee\", \u2502 \u2502 \u2502 \u2502 \"error_message\": \"must be exactly two words\" \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"name\": { \u2502 \u2502 \u2502 \u2502 \"incorrect_value\": \"foreign transactions transaction fee\", \u2502 \u2502 \u2502 \u2502 \"error_message\": \"must be exactly two words\" \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"name\": { \u2502 \u2502 \u2502 \u2502 \"incorrect_value\": \"late payment penalty fee\", \u2502 \u2502 \u2502 \u2502 \"error_message\": \"must be exactly two words\" \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"name\": { \u2502 \u2502 \u2502 \u2502 \"incorrect_value\": \"over-the-credit-limit penalty fee\", \u2502 \u2502 \u2502 \u2502 \"error_message\": \"must be exactly two words\" \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"name\": { \u2502 \u2502 \u2502 \u2502 \"incorrect_value\": \"return payment penalty fee\", \u2502 \u2502 \u2502 \u2502 \"error_message\": \"must be exactly two words\" \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"name\": { \u2502 \u2502 \u2502 \u2502 \"incorrect_value\": \"return check penalty fee\", \u2502 \u2502 \u2502 \u2502 \"error_message\": \"must be exactly two words\" \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 ] \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Help me correct the incorrect values based on the given error messages. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Given below is XML that describes the information to extract from this document and the tags to extract \u2502 \u2502 \u2502 \u2502 it into. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 <output> \u2502 \u2502 \u2502 \u2502 <list name=\"fees\" description=\"What fees and charges are associated with my account?\"> \u2502 \u2502 \u2502 \u2502 <object> \u2502 \u2502 \u2502 \u2502 <string name=\"name\" format=\"lower-case; two-words\"/> \u2502 \u2502 \u2502 \u2502 </object> \u2502 \u2502 \u2502 \u2502 </list> \u2502 \u2502 \u2502 \u2502 </output> \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 ONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the \u2502 \u2502 \u2502 \u2502 `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding \u2502 \u2502 \u2502 \u2502 XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. \u2502 \u2502 \u2502 \u2502 requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere, \u2502 \u2502 \u2502 \u2502 enter `None`. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Here are examples of simple (XML, JSON) pairs that show the expected behavior: \u2502 \u2502 \u2502 \u2502 - `<string name='foo' format='two-words lower-case' />` => `{{'foo': 'example one'}}` \u2502 \u2502 \u2502 \u2502 - `<list name='bar'><string format='upper-case' /></list>` => `{{\"bar\": ['STRING ONE', 'STRING TWO', \u2502 \u2502 \u2502 \u2502 etc.]}}` \u2502 \u2502 \u2502 \u2502 - `<object name='baz'><string name=\"foo\" format=\"capitalize two-words\" /><integer name=\"index\" \u2502 \u2502 \u2502 \u2502 format=\"1-indexed\" /></object>` => `{{'baz': {{'foo': 'Some String', 'index': 1}}}}` \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Instructions \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 You are a helpful assistant only capable of communicating with valid JSON, and no other text. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 ONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the \u2502 \u2502 \u2502 \u2502 `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding \u2502 \u2502 \u2502 \u2502 XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. \u2502 \u2502 \u2502 \u2502 requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere, \u2502 \u2502 \u2502 \u2502 enter `None`. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Here are examples of simple (XML, JSON) pairs that show the expected behavior: \u2502 \u2502 \u2502 \u2502 - `<string name='foo' format='two-words lower-case' />` => `{'foo': 'example one'}` \u2502 \u2502 \u2502 \u2502 - `<list name='bar'><string format='upper-case' /></list>` => `{\"bar\": ['STRING ONE', 'STRING TWO', \u2502 \u2502 \u2502 \u2502 etc.]}` \u2502 \u2502 \u2502 \u2502 - `<object name='baz'><string name=\"foo\" format=\"capitalize two-words\" /><integer name=\"index\" \u2502 \u2502 \u2502 \u2502 format=\"1-indexed\" /></object>` => `{'baz': {'foo': 'Some String', 'index': 1}}` \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Raw LLM Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"fees\": [ \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"name\": \"Annual Membership\" \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"name\": \"My Chase Plan Sm\" \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"name\": \"Balance Transfers\" \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"name\": \"Cash Advances\" \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"name\": \"Foreign Transactions\" \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"name\": \"Late Payment Penalty\" \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"name\": \"Over-The-Credit-Limit Penalty\" \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"name\": \"Return Payment Penalty\" \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"name\": \"Return Check Penalty\" \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 ] \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Validated Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'fees': [ \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'index': 1, \u2502 \u2502 \u2502 \u2502 'name': 'annual membership', \u2502 \u2502 \u2502 \u2502 'explanation': 'None', \u2502 \u2502 \u2502 \u2502 'value': 0.0 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'index': 2, \u2502 \u2502 \u2502 \u2502 'name': 'My Chase', \u2502 \u2502 \u2502 \u2502 'explanation': 'monthly fee of 0% of the amount of each eligible purchase transaction or \u2502 \u2502 \u2502 \u2502 amount selected to create a my chase plan while in the 0% intro purchase apr period. after that, \u2502 \u2502 \u2502 \u2502 monthly fee of 1.72% of the amount of each eligible purchase transaction or amount selected to create a \u2502 \u2502 \u2502 \u2502 my chase plan. the my chase plan fee will be determined at the time each my chase plan is created and \u2502 \u2502 \u2502 \u2502 will remain the same until the my chase plan is paid in full.', \u2502 \u2502 \u2502 \u2502 'value': 1.72 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'index': 3, \u2502 \u2502 \u2502 \u2502 'name': 'balance transfers', \u2502 \u2502 \u2502 \u2502 'explanation': 'intro fee of either $5 or 3% of the amount of each transfer, whichever is \u2502 \u2502 \u2502 \u2502 greater, on transfers made within 60 days of account opening. after that: either $5 or 5% of the amount \u2502 \u2502 \u2502 \u2502 of each transfer, whichever is greater.', \u2502 \u2502 \u2502 \u2502 'value': 5.0 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'index': 4, \u2502 \u2502 \u2502 \u2502 'name': 'cash advances', \u2502 \u2502 \u2502 \u2502 'explanation': 'Either $10 or 5% of the amount of each transaction, whichever is greater.', \u2502 \u2502 \u2502 \u2502 'value': 5.0 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'index': 5, \u2502 \u2502 \u2502 \u2502 'name': 'foreign transactions', \u2502 \u2502 \u2502 \u2502 'explanation': '3% of the amount of each transaction in U.S. dollars.', \u2502 \u2502 \u2502 \u2502 'value': 3.0 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'index': 6, \u2502 \u2502 \u2502 \u2502 'name': 'Late Payment', \u2502 \u2502 \u2502 \u2502 'explanation': 'Up to $40.', \u2502 \u2502 \u2502 \u2502 'value': None \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'index': 7, \u2502 \u2502 \u2502 \u2502 'name': 'over-the-credit-limit penalty', \u2502 \u2502 \u2502 \u2502 'explanation': 'None', \u2502 \u2502 \u2502 \u2502 'value': None \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'index': 8, \u2502 \u2502 \u2502 \u2502 'name': 'Return Payment', \u2502 \u2502 \u2502 \u2502 'explanation': 'Up to $40.', \u2502 \u2502 \u2502 \u2502 'value': None \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'index': 9, \u2502 \u2502 \u2502 \u2502 'name': 'Return Check', \u2502 \u2502 \u2502 \u2502 'explanation': 'None', \u2502 \u2502 \u2502 \u2502 'value': None \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 ], \u2502 \u2502 \u2502 \u2502 'interest_rates': { \u2502 \u2502 \u2502 \u2502 'purchase annual percentage rate (apr)': { \u2502 \u2502 \u2502 \u2502 'introductory rate': 0.0, \u2502 \u2502 \u2502 \u2502 'introductory period': 'first 18 months', \u2502 \u2502 \u2502 \u2502 'standard rate': 19.49, \u2502 \u2502 \u2502 \u2502 'variable': True, \u2502 \u2502 \u2502 \u2502 'description': 'The interest rate charged on purchases made with the credit card.' \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 'my chase loan sm apr': { \u2502 \u2502 \u2502 \u2502 'rate': 19.49, \u2502 \u2502 \u2502 \u2502 'variable': True, \u2502 \u2502 \u2502 \u2502 'description': 'The interest rate charged on My Chase Loan balances.' \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 'balance transfer apr': { \u2502 \u2502 \u2502 \u2502 'introductory rate': 0.0, \u2502 \u2502 \u2502 \u2502 'introductory period': 'first 18 months', \u2502 \u2502 \u2502 \u2502 'standard rate': 19.49, \u2502 \u2502 \u2502 \u2502 'variable': True, \u2502 \u2502 \u2502 \u2502 'description': 'The interest rate charged on balances transferred to the credit card.' \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 'cash advance apr': { \u2502 \u2502 \u2502 \u2502 'rate': 29.49, \u2502 \u2502 \u2502 \u2502 'variable': True, \u2502 \u2502 \u2502 \u2502 'description': 'The interest rate charged on cash advances taken with the credit card.' \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 'penalty apr and when it applies': { \u2502 \u2502 \u2502 \u2502 'rate': 'Up to 29.99%', \u2502 \u2502 \u2502 \u2502 'variable': True, \u2502 \u2502 \u2502 \u2502 'description': 'The interest rate charged on the credit card when a penalty is applied.' \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 'maximum apr': { \u2502 \u2502 \u2502 \u2502 'rate': 29.99, \u2502 \u2502 \u2502 \u2502 'variable': True, \u2502 \u2502 \u2502 \u2502 'description': 'The highest interest rate that can be charged on the credit card.' \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"Use Guardrails with Chat Models"},{"location":"examples/guardrails_with_chat_models/#using-guardrails-with-chat-models","text":"Note To download this example as a Jupyter notebook, click here . In this example, we will set up Guardrails with a chat model.","title":"Using Guardrails with Chat Models"},{"location":"examples/guardrails_with_chat_models/#objective","text":"We retry the entity extraction example using a chat model.","title":"Objective"},{"location":"examples/guardrails_with_chat_models/#step-0-download-pdf-and-load-it-as-string","text":"To get started, download the document from here and save it in data/chase_card_agreement.pdf . Guardrails has some built-in functions to help with common tasks. Here, we will use the read_pdf function to load the PDF as a string. import guardrails as gd from rich import print content = gd . docs_utils . read_pdf ( \"data/chase_card_agreement.pdf\" ) print ( f \"Chase Credit Card Document: \\n\\n { content [: 275 ] } \\n ...\" ) Chase Credit Card Document: 2 / 25 / 23 , 7:59 PM about:blank about:blank 1 / 4 PRICING INFORMATION INTEREST RATES AND INTEREST CHARGES Purchase Annual Percentage Rate ( APR ) 0 % Intro APR for the first 18 months that your Account is open. After that, 19.49 %. This APR will vary with the market based on the Prim ...","title":"Step 0: Download PDF and load it as string"},{"location":"examples/guardrails_with_chat_models/#step-1-create-the-rail-spec-with-instruction-tags","text":"In order to use Guardrails with a chat model, we need to add <instruction> tags to the RAIL spec. These tags will be used to generate the system message for the chat model. Ordinarily, everything that is contained in the <prompt> tag will be split across <prompt> and <instruction> tags. Here's an example illustrating the differences. RAIL Spec with instruction tag RAIL Spec without instruction tag <instructions> You are a helpful assistant only capable of communicating with valid JSON, and no other text. @json_suffix_prompt_examples </instructions> <prompt> Given the following document, answer the following questions. If the answer doesn't exist in the document, enter `null`. {{document}} Extract information from this document and return a JSON that follows the correct schema. @xml_prefix_prompt {output_schema} </prompt> <prompt> Given the following document, answer the following questions. If the answer doesn't exist in the document, enter `null`. {{document}} @xml_prefix_prompt {output_schema} @json_suffix_prompt_v2_wo_none </prompt> After materialization, the two specs will look like this: RAIL Spec with instruction tag RAIL Spec without instruction tag <instructions> You are a helpful assistant only capable of communicating with valid JSON, and no other text. ONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere, enter `None`. Here are examples of simple (XML, JSON) pairs that show the expected behavior: - ` <string name= 'foo' format= 'two-words lower-case' /> ` => `{'foo': 'example one'}` - ` <list name= 'bar' ><string format= 'upper-case' /></list> ` => `{\"bar\": ['STRING ONE', 'STRING TWO', etc.]}` - ` <object name= 'baz' ><string name= \"foo\" format= \"capitalize two-words\" /><integer name= \"index\" format= \"1-indexed\" /></object> ` => `{'baz': {'foo': 'Some String', 'index': 1}}` </instructions> <prompt> Given the following document, answer the following questions. If the answer doesn't exist in the document, enter `null`. {{document}} Extract information from this document and return a JSON that follows the correct schema. Given below is XML that describes the information to extract from this document and the tags to extract it into. {output_schema} </prompt> <prompt> Given the following document, answer the following questions. If the answer doesn't exist in the document, enter `null`. {{document}} Given below is XML that describes the information to extract from this document and the tags to extract it into. {output_schema} ONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere, enter `None`. Here are examples of simple (XML, JSON) pairs that show the expected behavior: - ` <string name= 'foo' format= 'two-words lower-case' /> ` => `{'foo': 'example one'}` - ` <list name= 'bar' ><string format= 'upper-case' /></list> ` => `{\"bar\": ['STRING ONE', 'STRING TWO', etc.]}` - ` <object name= 'baz' ><string name= \"foo\" format= \"capitalize two-words\" /><integer name= \"index\" format= \"1-indexed\" /></object> ` => `{'baz': {'foo': 'Some String', 'index': 1}}` </prompt> Here's the final RAIL spec: rail_str = \"\"\" <rail version=\"0.1\"> <output> <list name=\"fees\" description=\"What fees and charges are associated with my account?\"> <object> <integer name=\"index\" format=\"1-indexed\" /> <string name=\"name\" format=\"lower-case; two-words\" on-fail-lower-case=\"fix\" on-fail-two-words=\"reask\" /> <string name=\"explanation\" format=\"one-line\" /> <float name=\"value\" format=\"percentage\"/> </object> </list> <object name=\"interest_rates\" description=\"What are the interest rates offered by the bank on savings and checking accounts, loans, and credit products?\" /> </output> <instructions> You are a helpful assistant only capable of communicating with valid JSON, and no other text. @json_suffix_prompt_examples </instructions> <prompt> Given the following document, answer the following questions. If the answer doesn't exist in the document, enter `null`. {{document}} Extract information from this document and return a JSON that follows the correct schema. @xml_prefix_prompt {output_schema} </prompt> </rail> \"\"\"","title":"Step 1: Create the RAIL Spec with &lt;instruction&gt; tags"},{"location":"examples/guardrails_with_chat_models/#step-2-create-a-guard-object-with-the-rail-spec","text":"We create a gd.Guard object that will check, validate and correct the output of the LLM. This object: Enforces the quality criteria specified in the RAIL spec. Takes corrective action when the quality criteria are not met. Compiles the schema and type info from the RAIL spec and adds it to the prompt. guard = gd . Guard . from_rail_string ( rail_str ) /Users/shreyarajpal/guardrails/guardrails/schema.py:197: UserWarning: Validator 1-indexed is not valid for element integer. warnings.warn( /Users/shreyarajpal/guardrails/guardrails/schema.py:197: UserWarning: Validator percentage is not valid for element float. warnings.warn( As we can see, a few formatters weren't supported. These formatters won't be enforced in the output, but this information can still be used to generate a prompt. We see the prompt that will be sent to the LLM. The {document} is substituted with the user provided value at runtime. print ( guard . base_prompt ) Given the following document, answer the following questions. If the answer doesn't exist in the document, enter `null`. { document } Extract information from this document and return a JSON that follows the correct schema. Given below is XML that describes the information to extract from this document and the tags to extract it into. < output > <list name = \"fees\" description = \"What fees and charges are associated with my account?\" > <object> <integer name = \"index\" format = \"1-indexed\" / > <string name = \"name\" format = \"lower-case; two-words\" / > <string name = \"explanation\" format = \"one-line\" / > <float name = \"value\" format = \"percentage\" / > < / object > < / list > <object name = \"interest_rates\" description = \"What are the interest rates offered by the bank on savings and checking accounts, loans, and credit products?\" / > < / output > Here's the formatted instructions sent as the system message to the LLM. print ( guard . instructions . source ) You are a helpful assistant only capable of communicating with valid JSON, and no other text. ONLY return a valid JSON object ( no other text is necessary ) , where the key of the field in JSON is the `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere, enter ` None `. Here are examples of simple ( XML, JSON ) pairs that show the expected behavior: - ` < string name = 'foo' format = 'two-words lower-case' / >` => ` {{ 'foo' : 'example one' }} ` - `<list name = 'bar' ><string format = 'upper-case' / >< / list >` => ` {{ \"bar\" : [ 'STRING ONE' , 'STRING TWO' , etc. ]}} ` - `<object name = 'baz' ><string name = \"foo\" format = \"capitalize two-words\" / ><integer name = \"index\" format = \"1-indexed\" / >< / object >` = > ` {{ 'baz' : {{ 'foo' : 'Some String' , 'index' : 1 }}}} `","title":"Step 2: Create a Guard object with the RAIL Spec"},{"location":"examples/guardrails_with_chat_models/#step-3-wrap-the-llm-api-call-with-guard","text":"Compared to the entity extraction example , we call the OpenAI ChatCompletion API instead of the OpenAI Completion API. We also pass the model argument instead of the engine argument. import openai raw_llm_response , validated_response = guard ( openai . ChatCompletion . create , prompt_params = { \"document\" : content [: 6000 ]}, model = \"gpt-3.5-turbo\" , max_tokens = 2048 , temperature = 0 , ) /Users/shreyarajpal/anaconda3/envs/tiff-env/lib/python3.9/site-packages/eliot/json.py:22: FutureWarning: In the future `np.bool` will be defined as the corresponding NumPy scalar. (This may have returned Python scalars in past versions. if isinstance(o, (numpy.bool, numpy.bool_)): The guard wrapper returns the raw_llm_respose (which is a simple string), and the validated and corrected output (which is a dictionary). We can see that the output is a dictionary with the correct schema and types. print ( validated_response ) { 'fees' : [ { 'index' : 1 , 'name' : 'annual membership' , 'explanation' : 'None' , 'value' : 0.0 } , { 'index' : 2 , 'name' : 'My Chase' , 'explanation' : 'monthly fee of 0% of the amount of each eligible purchase transaction or amount selected to create a my chase plan while in the 0% intro purchase apr period. after that, monthly fee of 1.72% of the amount of each eligible purchase transaction or amount selected to create a my chase plan. the my chase plan fee will be determined at the time each my chase plan is created and will remain the same until the my chase plan is paid in full.' , 'value' : 1.72 } , { 'index' : 3 , 'name' : 'balance transfers' , 'explanation' : 'intro fee of either $5 or 3% of the amount of each transfer, whichever is greater, on transfers made within 60 days of account opening. after that: either $5 or 5% of the amount of each transfer, whichever is greater.' , 'value' : 5.0 } , { 'index' : 4 , 'name' : 'cash advances' , 'explanation' : 'Either $10 or 5% of the amount of each transaction, whichever is greater.' , 'value' : 5.0 } , { 'index' : 5 , 'name' : 'foreign transactions' , 'explanation' : '3% of the amount of each transaction in U.S. dollars.' , 'value' : 3.0 } , { 'index' : 6 , 'name' : 'Late Payment' , 'explanation' : 'Up to $40.' , 'value' : None } , { 'index' : 7 , 'name' : 'over-the-credit-limit penalty' , 'explanation' : 'None' , 'value' : None } , { 'index' : 8 , 'name' : 'Return Payment' , 'explanation' : 'Up to $40.' , 'value' : None } , { 'index' : 9 , 'name' : 'Return Check' , 'explanation' : 'None' , 'value' : None } ] , 'interest_rates' : { 'purchase annual percentage rate (apr)' : { 'introductory rate' : 0.0 , 'introductory period' : 'first 18 months' , 'standard rate' : 19.49 , 'variable' : True , 'description' : 'The interest rate charged on purchases made with the credit card.' } , 'my chase loan sm apr' : { 'rate' : 19.49 , 'variable' : True , 'description' : 'The interest rate charged on My Chase Loan balances.' } , 'balance transfer apr' : { 'introductory rate' : 0.0 , 'introductory period' : 'first 18 months' , 'standard rate' : 19.49 , 'variable' : True , 'description' : 'The interest rate charged on balances transferred to the credit card.' } , 'cash advance apr' : { 'rate' : 29.49 , 'variable' : True , 'description' : 'The interest rate charged on cash advances taken with the credit card.' } , 'penalty apr and when it applies' : { 'rate' : 'Up to 29.99%' , 'variable' : True , 'description' : 'The interest rate charged on the credit card when a penalty is applied.' } , 'maximum apr' : { 'rate' : 29.99 , 'variable' : True , 'description' : 'The highest interest rate that can be charged on the credit card.' } } } guard . state . most_recent_call . tree Logs \u251c\u2500\u2500 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Step 0 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Prompt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Given the following document, answer the following questions. If the answer doesn't exist in the \u2502 \u2502 \u2502 \u2502 \u2502 document, enter \u2502 \u2502 \u2502 \u2502 \u2502 `null`. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 2/25/23, 7:59 PM about:blank \u2502 \u2502 \u2502 \u2502 \u2502 about:blank 1/4 \u2502 \u2502 \u2502 \u2502 \u2502 PRICING INFORMATION \u2502 \u2502 \u2502 \u2502 \u2502 INTEREST RATES AND INTEREST CHARGES \u2502 \u2502 \u2502 \u2502 \u2502 Purchase Annual \u2502 \u2502 \u2502 \u2502 \u2502 Percentage Rate (APR) 0% Intro APR for the first 18 months that your Account is open. \u2502 \u2502 \u2502 \u2502 \u2502 After that, 19.49%. This APR will vary with the market based on the Prime \u2502 \u2502 \u2502 \u2502 \u2502 Rate. \u2502 \u2502 \u2502 \u2502 \u2502 a \u2502 \u2502 \u2502 \u2502 \u2502 My Chase Loan \u2502 \u2502 \u2502 \u2502 \u2502 SM APR 19.49%. This APR will vary with the market based on the Prime Rate. \u2502 \u2502 \u2502 \u2502 \u2502 a \u2502 \u2502 \u2502 \u2502 \u2502 Promotional offers with fixed APRs and varying durations may be available from \u2502 \u2502 \u2502 \u2502 \u2502 time to time on some accounts. \u2502 \u2502 \u2502 \u2502 \u2502 Balance Transfer APR 0% Intro APR for the first 18 months that your Account is open. \u2502 \u2502 \u2502 \u2502 \u2502 After that, 19.49%. This APR will vary with the market based on the Prime \u2502 \u2502 \u2502 \u2502 \u2502 Rate. \u2502 \u2502 \u2502 \u2502 \u2502 a \u2502 \u2502 \u2502 \u2502 \u2502 Cash Advance APR 29.49%. This APR will vary with the market based on the Prime Rate. \u2502 \u2502 \u2502 \u2502 \u2502 b \u2502 \u2502 \u2502 \u2502 \u2502 Penalty APR and When \u2502 \u2502 \u2502 \u2502 \u2502 It Applies \u2502 \u2502 \u2502 \u2502 \u2502 Up to 29.99%. This APR will vary with the market based on the Prime Rate. \u2502 \u2502 \u2502 \u2502 \u2502 c \u2502 \u2502 \u2502 \u2502 \u2502 We may apply the Penalty APR to your account if you: \u2502 \u2502 \u2502 \u2502 \u2502 fail to make a Minimum Payment by the date and time that it is due; or \u2502 \u2502 \u2502 \u2502 \u2502 make a payment to us that is returned unpaid. \u2502 \u2502 \u2502 \u2502 \u2502 How Long Will the Penalty APR Apply?: If we apply the Penalty APR for \u2502 \u2502 \u2502 \u2502 \u2502 either of these reasons, the Penalty APR could potentially remain in effect \u2502 \u2502 \u2502 \u2502 \u2502 indefinitely. \u2502 \u2502 \u2502 \u2502 \u2502 How to Avoid Paying \u2502 \u2502 \u2502 \u2502 \u2502 Interest on Purchases \u2502 \u2502 \u2502 \u2502 \u2502 Your due date will be a minimum of 21 days after the close of each billing cycle. \u2502 \u2502 \u2502 \u2502 \u2502 We will not charge you interest on new purchases if you pay your entire balance \u2502 \u2502 \u2502 \u2502 \u2502 or Interest Saving Balance by the due date each month. We will begin charging \u2502 \u2502 \u2502 \u2502 \u2502 interest on balance transfers and cash advances on the transaction date. \u2502 \u2502 \u2502 \u2502 \u2502 Minimum Interest \u2502 \u2502 \u2502 \u2502 \u2502 Charge \u2502 \u2502 \u2502 \u2502 \u2502 None \u2502 \u2502 \u2502 \u2502 \u2502 Credit Card Tips from \u2502 \u2502 \u2502 \u2502 \u2502 the Consumer Financial \u2502 \u2502 \u2502 \u2502 \u2502 Protection Bureau \u2502 \u2502 \u2502 \u2502 \u2502 To learn more about factors to consider when applying for or using a credit card, \u2502 \u2502 \u2502 \u2502 \u2502 visit the website of the Consumer Financial Protection Bureau at \u2502 \u2502 \u2502 \u2502 \u2502 http://www.consumerfinance.gov/learnmore. \u2502 \u2502 \u2502 \u2502 \u2502 FEES \u2502 \u2502 \u2502 \u2502 \u2502 Annual Membership \u2502 \u2502 \u2502 \u2502 \u2502 Fee \u2502 \u2502 \u2502 \u2502 \u2502 None \u2502 \u2502 \u2502 \u2502 \u2502 My Chase Plan \u2502 \u2502 \u2502 \u2502 \u2502 SM Fee \u2502 \u2502 \u2502 \u2502 \u2502 (fixed finance charge) \u2502 \u2502 \u2502 \u2502 \u2502 Monthly fee of 0% of the amount of each eligible purchase transaction or \u2502 \u2502 \u2502 \u2502 \u2502 amount selected to create a My Chase Plan while in the 0% Intro Purchase \u2502 \u2502 \u2502 \u2502 \u2502 APR period. \u2502 \u2502 \u2502 \u2502 \u2502 After that, monthly fee of 1.72% of the amount of each eligible purchase \u2502 \u2502 \u2502 \u2502 \u2502 transaction or amount selected to create a My Chase Plan. The My Chase Plan \u2502 \u2502 \u2502 \u2502 \u2502 Fee will be determined at the time each My Chase Plan is created and will \u2502 \u2502 \u2502 \u2502 \u2502 remain the same until the My Chase Plan is paid in full. \u2502 \u2502 \u2502 \u2502 \u2502 d \u2502 \u2502 \u2502 \u2502 \u2502 Transaction Fees \u2502 \u2502 \u2502 \u2502 \u2502 Balance Transfers Intro fee of either $5 or 3% of the amount of each transfer, whichever is greater, \u2502 \u2502 \u2502 \u2502 \u2502 on transfers made within 60 days of account opening. After that: Either $5 or 5% \u2502 \u2502 \u2502 \u2502 \u2502 of the amount of each transfer, whichever is greater. \u2502 \u2502 \u2502 \u2502 \u2502 Cash Advances Either $10 or 5% of the amount of each transaction, whichever is greater. \u2502 \u2502 \u2502 \u2502 \u2502 2/25/23, 7:59 PM about:blank \u2502 \u2502 \u2502 \u2502 \u2502 about:blank 2/4 \u2502 \u2502 \u2502 \u2502 \u2502 Foreign Transactions 3% of the amount of each transaction in U.S. dollars. \u2502 \u2502 \u2502 \u2502 \u2502 Penalty Fees \u2502 \u2502 \u2502 \u2502 \u2502 Late Payment Up to $40. \u2502 \u2502 \u2502 \u2502 \u2502 Over-the-Credit-Limit None \u2502 \u2502 \u2502 \u2502 \u2502 Return Payment Up to $40. \u2502 \u2502 \u2502 \u2502 \u2502 Return Check None \u2502 \u2502 \u2502 \u2502 \u2502 Note: This account may not be eligible for balance transfers. \u2502 \u2502 \u2502 \u2502 \u2502 Loss of Intro APR: We will end your introductory APR if any required Minimum Payment is 60 days late, \u2502 \u2502 \u2502 \u2502 \u2502 and \u2502 \u2502 \u2502 \u2502 \u2502 apply the Penalty APR. \u2502 \u2502 \u2502 \u2502 \u2502 How We Will Calculate Your Balance: We use the daily balance method (including new transactions). \u2502 \u2502 \u2502 \u2502 \u2502 Prime Rate: Variable APRs are based on the 7.75% Prime Rate as of 2/7/2023. \u2502 \u2502 \u2502 \u2502 \u2502 aWe add 11.74% to the Prime Rate to determine the Purchase/My Chase Loan/Balance Transfer APR. \u2502 \u2502 \u2502 \u2502 \u2502 Maximum APR 29.99%. \u2502 \u2502 \u2502 \u2502 \u2502 bWe add 21.74% to the Prime Rate to determine the Cash Advance APR. Maximum APR 29.99%. \u2502 \u2502 \u2502 \u2502 \u2502 cWe add up to 26.99% to the Prime Rate to determine the Penalty APR. Maximum APR 29.99%. \u2502 \u2502 \u2502 \u2502 \u2502 dMy Chase Plan Fee: The My Chase Plan Fee is calculated at the time each plan is created and is based \u2502 \u2502 \u2502 \u2502 \u2502 on \u2502 \u2502 \u2502 \u2502 \u2502 the amount of each purchase transaction or amount selected to create the plan, the number of billing \u2502 \u2502 \u2502 \u2502 \u2502 periods \u2502 \u2502 \u2502 \u2502 \u2502 you choose to pay the balance in full, and other factors. The monthly and aggregate dollar amount of \u2502 \u2502 \u2502 \u2502 \u2502 your My \u2502 \u2502 \u2502 \u2502 \u2502 Chase Plan Fee will be disclosed during the activation of each My Chase Plan. \u2502 \u2502 \u2502 \u2502 \u2502 MILITARY LENDING ACT NOTICE: Federal law provides important protections to members of the Armed \u2502 \u2502 \u2502 \u2502 \u2502 Forces and their dependents relating to extensions of consumer credit. In general, the cost of consumer \u2502 \u2502 \u2502 \u2502 \u2502 credit \u2502 \u2502 \u2502 \u2502 \u2502 to a member of the Armed Forces and his or her dependent may not exceed an annual percentage rate of 36 \u2502 \u2502 \u2502 \u2502 \u2502 percent. This rate must include, as applicable to the credit transaction or account: the costs \u2502 \u2502 \u2502 \u2502 \u2502 associated with \u2502 \u2502 \u2502 \u2502 \u2502 credit insurance premiums; fees for ancillary products sold in connection with the credit transaction; \u2502 \u2502 \u2502 \u2502 \u2502 any \u2502 \u2502 \u2502 \u2502 \u2502 application fee charged (other than certain application fees for specified credit transactions or \u2502 \u2502 \u2502 \u2502 \u2502 accounts); and \u2502 \u2502 \u2502 \u2502 \u2502 any participation fee charged (other than certain participation fees for a credit card account). To \u2502 \u2502 \u2502 \u2502 \u2502 receive this \u2502 \u2502 \u2502 \u2502 \u2502 information and a description of your payment obligation verbally, please call 1-800-235-9978. \u2502 \u2502 \u2502 \u2502 \u2502 TERMS & CONDITIONS \u2502 \u2502 \u2502 \u2502 \u2502 Authorization: When you respond to this credit card offer from JPMorgan Chase Bank, N.A., Member FDIC, \u2502 \u2502 \u2502 \u2502 \u2502 a \u2502 \u2502 \u2502 \u2502 \u2502 subsidiary of JPMorgan Chase & Co. (\"Chase\", \"we\", or \"us\"), you agree to the following: \u2502 \u2502 \u2502 \u2502 \u2502 1. You authorize us to obtain credit bureau reports, employment, and income information about you that \u2502 \u2502 \u2502 \u2502 \u2502 we \u2502 \u2502 \u2502 \u2502 \u2502 will use when considering your application for credit. We may obtain and use information about your \u2502 \u2502 \u2502 \u2502 \u2502 accounts with us and others such as Checking, Deposit, Investment, and Utility accounts from credit \u2502 \u2502 \u2502 \u2502 \u2502 bureaus and other entities. You also authorize us to obtain credit bureau reports and any other \u2502 \u2502 \u2502 \u2502 \u2502 information about you in connection with: 1) extensions of credit on your account; 2) the \u2502 \u2502 \u2502 \u2502 \u2502 administration, \u2502 \u2502 \u2502 \u2502 \u2502 review or collection of your account; and 3) offering you enhanced or additional products and services. \u2502 \u2502 \u2502 \u2502 \u2502 If \u2502 \u2502 \u2502 \u2502 \u2502 you ask, we will tell you the name and address of the credit bureau from which we obtained a report \u2502 \u2502 \u2502 \u2502 \u2502 about you. \u2502 \u2502 \u2502 \u2502 \u2502 2. If an account is opened, you will receive a Cardmember Agreement with your card(s). You agree to the \u2502 \u2502 \u2502 \u2502 \u2502 terms of this agreement by: using the account or any card, authorizing their use, or making any payment \u2502 \u2502 \u2502 \u2502 \u2502 on the account. \u2502 \u2502 \u2502 \u2502 \u2502 3. By providing your mobile ph \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Extract information from this document and return a JSON that follows the correct schema. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Given below is XML that describes the information to extract from this document and the tags to extract \u2502 \u2502 \u2502 \u2502 \u2502 it into. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 <output> \u2502 \u2502 \u2502 \u2502 \u2502 <list name=\"fees\" description=\"What fees and charges are associated with my account?\"> \u2502 \u2502 \u2502 \u2502 \u2502 <object> \u2502 \u2502 \u2502 \u2502 \u2502 <integer name=\"index\" format=\"1-indexed\"/> \u2502 \u2502 \u2502 \u2502 \u2502 <string name=\"name\" format=\"lower-case; two-words\"/> \u2502 \u2502 \u2502 \u2502 \u2502 <string name=\"explanation\" format=\"one-line\"/> \u2502 \u2502 \u2502 \u2502 \u2502 <float name=\"value\" format=\"percentage\"/> \u2502 \u2502 \u2502 \u2502 \u2502 </object> \u2502 \u2502 \u2502 \u2502 \u2502 </list> \u2502 \u2502 \u2502 \u2502 \u2502 <object name=\"interest_rates\" description=\"What are the interest rates offered by the bank on \u2502 \u2502 \u2502 \u2502 \u2502 savings and checking accounts, loans, and credit products?\"/> \u2502 \u2502 \u2502 \u2502 \u2502 </output> \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Instructions \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 You are a helpful assistant only capable of communicating with valid JSON, and no other text. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 ONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the \u2502 \u2502 \u2502 \u2502 \u2502 `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding \u2502 \u2502 \u2502 \u2502 \u2502 XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. \u2502 \u2502 \u2502 \u2502 \u2502 requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere, \u2502 \u2502 \u2502 \u2502 \u2502 enter `None`. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Here are examples of simple (XML, JSON) pairs that show the expected behavior: \u2502 \u2502 \u2502 \u2502 \u2502 - `<string name='foo' format='two-words lower-case' />` => `{'foo': 'example one'}` \u2502 \u2502 \u2502 \u2502 \u2502 - `<list name='bar'><string format='upper-case' /></list>` => `{\"bar\": ['STRING ONE', 'STRING TWO', \u2502 \u2502 \u2502 \u2502 \u2502 etc.]}` \u2502 \u2502 \u2502 \u2502 \u2502 - `<object name='baz'><string name=\"foo\" format=\"capitalize two-words\" /><integer name=\"index\" \u2502 \u2502 \u2502 \u2502 \u2502 format=\"1-indexed\" /></object>` => `{'baz': {'foo': 'Some String', 'index': 1}}` \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Raw LLM Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 \"fees\": [ \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 \"index\": 1, \u2502 \u2502 \u2502 \u2502 \u2502 \"name\": \"annual membership fee\", \u2502 \u2502 \u2502 \u2502 \u2502 \"explanation\": \"None\", \u2502 \u2502 \u2502 \u2502 \u2502 \"value\": 0.0 \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 \"index\": 2, \u2502 \u2502 \u2502 \u2502 \u2502 \"name\": \"my chase plan sm fee\", \u2502 \u2502 \u2502 \u2502 \u2502 \"explanation\": \"monthly fee of 0% of the amount of each eligible purchase transaction or \u2502 \u2502 \u2502 \u2502 \u2502 amount selected to create a my chase plan while in the 0% intro purchase apr period. after that, \u2502 \u2502 \u2502 \u2502 \u2502 monthly fee of 1.72% of the amount of each eligible purchase transaction or amount selected to create a \u2502 \u2502 \u2502 \u2502 \u2502 my chase plan. the my chase plan fee will be determined at the time each my chase plan is created and \u2502 \u2502 \u2502 \u2502 \u2502 will remain the same until the my chase plan is paid in full.\", \u2502 \u2502 \u2502 \u2502 \u2502 \"value\": 1.72 \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 \"index\": 3, \u2502 \u2502 \u2502 \u2502 \u2502 \"name\": \"balance transfers transaction fee\", \u2502 \u2502 \u2502 \u2502 \u2502 \"explanation\": \"intro fee of either $5 or 3% of the amount of each transfer, whichever is \u2502 \u2502 \u2502 \u2502 \u2502 greater, on transfers made within 60 days of account opening. after that: either $5 or 5% of the amount \u2502 \u2502 \u2502 \u2502 \u2502 of each transfer, whichever is greater.\", \u2502 \u2502 \u2502 \u2502 \u2502 \"value\": 5.0 \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 \"index\": 4, \u2502 \u2502 \u2502 \u2502 \u2502 \"name\": \"cash advances transaction fee\", \u2502 \u2502 \u2502 \u2502 \u2502 \"explanation\": \"Either $10 or 5% of the amount of each transaction, whichever is greater.\", \u2502 \u2502 \u2502 \u2502 \u2502 \"value\": 5.0 \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 \"index\": 5, \u2502 \u2502 \u2502 \u2502 \u2502 \"name\": \"foreign transactions transaction fee\", \u2502 \u2502 \u2502 \u2502 \u2502 \"explanation\": \"3% of the amount of each transaction in U.S. dollars.\", \u2502 \u2502 \u2502 \u2502 \u2502 \"value\": 3.0 \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 \"index\": 6, \u2502 \u2502 \u2502 \u2502 \u2502 \"name\": \"late payment penalty fee\", \u2502 \u2502 \u2502 \u2502 \u2502 \"explanation\": \"Up to $40.\", \u2502 \u2502 \u2502 \u2502 \u2502 \"value\": null \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 \"index\": 7, \u2502 \u2502 \u2502 \u2502 \u2502 \"name\": \"over-the-credit-limit penalty fee\", \u2502 \u2502 \u2502 \u2502 \u2502 \"explanation\": \"None\", \u2502 \u2502 \u2502 \u2502 \u2502 \"value\": null \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 \"index\": 8, \u2502 \u2502 \u2502 \u2502 \u2502 \"name\": \"return payment penalty fee\", \u2502 \u2502 \u2502 \u2502 \u2502 \"explanation\": \"Up to $40.\", \u2502 \u2502 \u2502 \u2502 \u2502 \"value\": null \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 \"index\": 9, \u2502 \u2502 \u2502 \u2502 \u2502 \"name\": \"return check penalty fee\", \u2502 \u2502 \u2502 \u2502 \u2502 \"explanation\": \"None\", \u2502 \u2502 \u2502 \u2502 \u2502 \"value\": null \u2502 \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 \u2502 ], \u2502 \u2502 \u2502 \u2502 \u2502 \"interest_rates\": { \u2502 \u2502 \u2502 \u2502 \u2502 \"purchase annual percentage rate (apr)\": { \u2502 \u2502 \u2502 \u2502 \u2502 \"introductory rate\": 0.0, \u2502 \u2502 \u2502 \u2502 \u2502 \"introductory period\": \"first 18 months\", \u2502 \u2502 \u2502 \u2502 \u2502 \"standard rate\": 19.49, \u2502 \u2502 \u2502 \u2502 \u2502 \"variable\": true, \u2502 \u2502 \u2502 \u2502 \u2502 \"description\": \"The interest rate charged on purchases made with the credit card.\" \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 \"my chase loan sm apr\": { \u2502 \u2502 \u2502 \u2502 \u2502 \"rate\": 19.49, \u2502 \u2502 \u2502 \u2502 \u2502 \"variable\": true, \u2502 \u2502 \u2502 \u2502 \u2502 \"description\": \"The interest rate charged on My Chase Loan balances.\" \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 \"balance transfer apr\": { \u2502 \u2502 \u2502 \u2502 \u2502 \"introductory rate\": 0.0, \u2502 \u2502 \u2502 \u2502 \u2502 \"introductory period\": \"first 18 months\", \u2502 \u2502 \u2502 \u2502 \u2502 \"standard rate\": 19.49, \u2502 \u2502 \u2502 \u2502 \u2502 \"variable\": true, \u2502 \u2502 \u2502 \u2502 \u2502 \"description\": \"The interest rate charged on balances transferred to the credit card.\" \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 \"cash advance apr\": { \u2502 \u2502 \u2502 \u2502 \u2502 \"rate\": 29.49, \u2502 \u2502 \u2502 \u2502 \u2502 \"variable\": true, \u2502 \u2502 \u2502 \u2502 \u2502 \"description\": \"The interest rate charged on cash advances taken with the credit card.\" \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 \"penalty apr and when it applies\": { \u2502 \u2502 \u2502 \u2502 \u2502 \"rate\": \"Up to 29.99%\", \u2502 \u2502 \u2502 \u2502 \u2502 \"variable\": true, \u2502 \u2502 \u2502 \u2502 \u2502 \"description\": \"The interest rate charged on the credit card when a penalty is applied.\" \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 \"maximum apr\": { \u2502 \u2502 \u2502 \u2502 \u2502 \"rate\": 29.99, \u2502 \u2502 \u2502 \u2502 \u2502 \"variable\": true, \u2502 \u2502 \u2502 \u2502 \u2502 \"description\": \"The highest interest rate that can be charged on the credit card.\" \u2502 \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Validated Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 'fees': [ \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 'index': 1, \u2502 \u2502 \u2502 \u2502 \u2502 'name': ReAsk( \u2502 \u2502 \u2502 \u2502 \u2502 incorrect_value='annual membership fee', \u2502 \u2502 \u2502 \u2502 \u2502 error_message='must be exactly two words', \u2502 \u2502 \u2502 \u2502 \u2502 fix_value='annual membership', \u2502 \u2502 \u2502 \u2502 \u2502 path=['fees', 0, 'name'] \u2502 \u2502 \u2502 \u2502 \u2502 ), \u2502 \u2502 \u2502 \u2502 \u2502 'explanation': 'None', \u2502 \u2502 \u2502 \u2502 \u2502 'value': 0.0 \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 'index': 2, \u2502 \u2502 \u2502 \u2502 \u2502 'name': ReAsk( \u2502 \u2502 \u2502 \u2502 \u2502 incorrect_value='my chase plan sm fee', \u2502 \u2502 \u2502 \u2502 \u2502 error_message='must be exactly two words', \u2502 \u2502 \u2502 \u2502 \u2502 fix_value='my chase', \u2502 \u2502 \u2502 \u2502 \u2502 path=['fees', 1, 'name'] \u2502 \u2502 \u2502 \u2502 \u2502 ), \u2502 \u2502 \u2502 \u2502 \u2502 'explanation': 'monthly fee of 0% of the amount of each eligible purchase transaction or \u2502 \u2502 \u2502 \u2502 \u2502 amount selected to create a my chase plan while in the 0% intro purchase apr period. after that, \u2502 \u2502 \u2502 \u2502 \u2502 monthly fee of 1.72% of the amount of each eligible purchase transaction or amount selected to create a \u2502 \u2502 \u2502 \u2502 \u2502 my chase plan. the my chase plan fee will be determined at the time each my chase plan is created and \u2502 \u2502 \u2502 \u2502 \u2502 will remain the same until the my chase plan is paid in full.', \u2502 \u2502 \u2502 \u2502 \u2502 'value': 1.72 \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 'index': 3, \u2502 \u2502 \u2502 \u2502 \u2502 'name': ReAsk( \u2502 \u2502 \u2502 \u2502 \u2502 incorrect_value='balance transfers transaction fee', \u2502 \u2502 \u2502 \u2502 \u2502 error_message='must be exactly two words', \u2502 \u2502 \u2502 \u2502 \u2502 fix_value='balance transfers', \u2502 \u2502 \u2502 \u2502 \u2502 path=['fees', 2, 'name'] \u2502 \u2502 \u2502 \u2502 \u2502 ), \u2502 \u2502 \u2502 \u2502 \u2502 'explanation': 'intro fee of either $5 or 3% of the amount of each transfer, whichever is \u2502 \u2502 \u2502 \u2502 \u2502 greater, on transfers made within 60 days of account opening. after that: either $5 or 5% of the amount \u2502 \u2502 \u2502 \u2502 \u2502 of each transfer, whichever is greater.', \u2502 \u2502 \u2502 \u2502 \u2502 'value': 5.0 \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 'index': 4, \u2502 \u2502 \u2502 \u2502 \u2502 'name': ReAsk( \u2502 \u2502 \u2502 \u2502 \u2502 incorrect_value='cash advances transaction fee', \u2502 \u2502 \u2502 \u2502 \u2502 error_message='must be exactly two words', \u2502 \u2502 \u2502 \u2502 \u2502 fix_value='cash advances', \u2502 \u2502 \u2502 \u2502 \u2502 path=['fees', 3, 'name'] \u2502 \u2502 \u2502 \u2502 \u2502 ), \u2502 \u2502 \u2502 \u2502 \u2502 'explanation': 'Either $10 or 5% of the amount of each transaction, whichever is greater.', \u2502 \u2502 \u2502 \u2502 \u2502 'value': 5.0 \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 'index': 5, \u2502 \u2502 \u2502 \u2502 \u2502 'name': ReAsk( \u2502 \u2502 \u2502 \u2502 \u2502 incorrect_value='foreign transactions transaction fee', \u2502 \u2502 \u2502 \u2502 \u2502 error_message='must be exactly two words', \u2502 \u2502 \u2502 \u2502 \u2502 fix_value='foreign transactions', \u2502 \u2502 \u2502 \u2502 \u2502 path=['fees', 4, 'name'] \u2502 \u2502 \u2502 \u2502 \u2502 ), \u2502 \u2502 \u2502 \u2502 \u2502 'explanation': '3% of the amount of each transaction in U.S. dollars.', \u2502 \u2502 \u2502 \u2502 \u2502 'value': 3.0 \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 'index': 6, \u2502 \u2502 \u2502 \u2502 \u2502 'name': ReAsk( \u2502 \u2502 \u2502 \u2502 \u2502 incorrect_value='late payment penalty fee', \u2502 \u2502 \u2502 \u2502 \u2502 error_message='must be exactly two words', \u2502 \u2502 \u2502 \u2502 \u2502 fix_value='late payment', \u2502 \u2502 \u2502 \u2502 \u2502 path=['fees', 5, 'name'] \u2502 \u2502 \u2502 \u2502 \u2502 ), \u2502 \u2502 \u2502 \u2502 \u2502 'explanation': 'Up to $40.', \u2502 \u2502 \u2502 \u2502 \u2502 'value': None \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 'index': 7, \u2502 \u2502 \u2502 \u2502 \u2502 'name': ReAsk( \u2502 \u2502 \u2502 \u2502 \u2502 incorrect_value='over-the-credit-limit penalty fee', \u2502 \u2502 \u2502 \u2502 \u2502 error_message='must be exactly two words', \u2502 \u2502 \u2502 \u2502 \u2502 fix_value='over-the-credit-limit penalty', \u2502 \u2502 \u2502 \u2502 \u2502 path=['fees', 6, 'name'] \u2502 \u2502 \u2502 \u2502 \u2502 ), \u2502 \u2502 \u2502 \u2502 \u2502 'explanation': 'None', \u2502 \u2502 \u2502 \u2502 \u2502 'value': None \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 'index': 8, \u2502 \u2502 \u2502 \u2502 \u2502 'name': ReAsk( \u2502 \u2502 \u2502 \u2502 \u2502 incorrect_value='return payment penalty fee', \u2502 \u2502 \u2502 \u2502 \u2502 error_message='must be exactly two words', \u2502 \u2502 \u2502 \u2502 \u2502 fix_value='return payment', \u2502 \u2502 \u2502 \u2502 \u2502 path=['fees', 7, 'name'] \u2502 \u2502 \u2502 \u2502 \u2502 ), \u2502 \u2502 \u2502 \u2502 \u2502 'explanation': 'Up to $40.', \u2502 \u2502 \u2502 \u2502 \u2502 'value': None \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \u2502 'index': 9, \u2502 \u2502 \u2502 \u2502 \u2502 'name': ReAsk( \u2502 \u2502 \u2502 \u2502 \u2502 incorrect_value='return check penalty fee', \u2502 \u2502 \u2502 \u2502 \u2502 error_message='must be exactly two words', \u2502 \u2502 \u2502 \u2502 \u2502 fix_value='return check', \u2502 \u2502 \u2502 \u2502 \u2502 path=['fees', 8, 'name'] \u2502 \u2502 \u2502 \u2502 \u2502 ), \u2502 \u2502 \u2502 \u2502 \u2502 'explanation': 'None', \u2502 \u2502 \u2502 \u2502 \u2502 'value': None \u2502 \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 \u2502 ], \u2502 \u2502 \u2502 \u2502 \u2502 'interest_rates': { \u2502 \u2502 \u2502 \u2502 \u2502 'purchase annual percentage rate (apr)': { \u2502 \u2502 \u2502 \u2502 \u2502 'introductory rate': 0.0, \u2502 \u2502 \u2502 \u2502 \u2502 'introductory period': 'first 18 months', \u2502 \u2502 \u2502 \u2502 \u2502 'standard rate': 19.49, \u2502 \u2502 \u2502 \u2502 \u2502 'variable': True, \u2502 \u2502 \u2502 \u2502 \u2502 'description': 'The interest rate charged on purchases made with the credit card.' \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 'my chase loan sm apr': { \u2502 \u2502 \u2502 \u2502 \u2502 'rate': 19.49, \u2502 \u2502 \u2502 \u2502 \u2502 'variable': True, \u2502 \u2502 \u2502 \u2502 \u2502 'description': 'The interest rate charged on My Chase Loan balances.' \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 'balance transfer apr': { \u2502 \u2502 \u2502 \u2502 \u2502 'introductory rate': 0.0, \u2502 \u2502 \u2502 \u2502 \u2502 'introductory period': 'first 18 months', \u2502 \u2502 \u2502 \u2502 \u2502 'standard rate': 19.49, \u2502 \u2502 \u2502 \u2502 \u2502 'variable': True, \u2502 \u2502 \u2502 \u2502 \u2502 'description': 'The interest rate charged on balances transferred to the credit card.' \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 'cash advance apr': { \u2502 \u2502 \u2502 \u2502 \u2502 'rate': 29.49, \u2502 \u2502 \u2502 \u2502 \u2502 'variable': True, \u2502 \u2502 \u2502 \u2502 \u2502 'description': 'The interest rate charged on cash advances taken with the credit card.' \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 'penalty apr and when it applies': { \u2502 \u2502 \u2502 \u2502 \u2502 'rate': 'Up to 29.99%', \u2502 \u2502 \u2502 \u2502 \u2502 'variable': True, \u2502 \u2502 \u2502 \u2502 \u2502 'description': 'The interest rate charged on the credit card when a penalty is applied.' \u2502 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 \u2502 'maximum apr': { \u2502 \u2502 \u2502 \u2502 \u2502 'rate': 29.99, \u2502 \u2502 \u2502 \u2502 \u2502 'variable': True, \u2502 \u2502 \u2502 \u2502 \u2502 'description': 'The highest interest rate that can be charged on the credit card.' \u2502 \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2514\u2500\u2500 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Step 1 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Prompt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 I was given the following JSON response, which had problems due to incorrect values. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"fees\": [ \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"name\": { \u2502 \u2502 \u2502 \u2502 \"incorrect_value\": \"annual membership fee\", \u2502 \u2502 \u2502 \u2502 \"error_message\": \"must be exactly two words\" \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"name\": { \u2502 \u2502 \u2502 \u2502 \"incorrect_value\": \"my chase plan sm fee\", \u2502 \u2502 \u2502 \u2502 \"error_message\": \"must be exactly two words\" \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"name\": { \u2502 \u2502 \u2502 \u2502 \"incorrect_value\": \"balance transfers transaction fee\", \u2502 \u2502 \u2502 \u2502 \"error_message\": \"must be exactly two words\" \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"name\": { \u2502 \u2502 \u2502 \u2502 \"incorrect_value\": \"cash advances transaction fee\", \u2502 \u2502 \u2502 \u2502 \"error_message\": \"must be exactly two words\" \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"name\": { \u2502 \u2502 \u2502 \u2502 \"incorrect_value\": \"foreign transactions transaction fee\", \u2502 \u2502 \u2502 \u2502 \"error_message\": \"must be exactly two words\" \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"name\": { \u2502 \u2502 \u2502 \u2502 \"incorrect_value\": \"late payment penalty fee\", \u2502 \u2502 \u2502 \u2502 \"error_message\": \"must be exactly two words\" \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"name\": { \u2502 \u2502 \u2502 \u2502 \"incorrect_value\": \"over-the-credit-limit penalty fee\", \u2502 \u2502 \u2502 \u2502 \"error_message\": \"must be exactly two words\" \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"name\": { \u2502 \u2502 \u2502 \u2502 \"incorrect_value\": \"return payment penalty fee\", \u2502 \u2502 \u2502 \u2502 \"error_message\": \"must be exactly two words\" \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"name\": { \u2502 \u2502 \u2502 \u2502 \"incorrect_value\": \"return check penalty fee\", \u2502 \u2502 \u2502 \u2502 \"error_message\": \"must be exactly two words\" \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 ] \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Help me correct the incorrect values based on the given error messages. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Given below is XML that describes the information to extract from this document and the tags to extract \u2502 \u2502 \u2502 \u2502 it into. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 <output> \u2502 \u2502 \u2502 \u2502 <list name=\"fees\" description=\"What fees and charges are associated with my account?\"> \u2502 \u2502 \u2502 \u2502 <object> \u2502 \u2502 \u2502 \u2502 <string name=\"name\" format=\"lower-case; two-words\"/> \u2502 \u2502 \u2502 \u2502 </object> \u2502 \u2502 \u2502 \u2502 </list> \u2502 \u2502 \u2502 \u2502 </output> \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 ONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the \u2502 \u2502 \u2502 \u2502 `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding \u2502 \u2502 \u2502 \u2502 XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. \u2502 \u2502 \u2502 \u2502 requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere, \u2502 \u2502 \u2502 \u2502 enter `None`. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Here are examples of simple (XML, JSON) pairs that show the expected behavior: \u2502 \u2502 \u2502 \u2502 - `<string name='foo' format='two-words lower-case' />` => `{{'foo': 'example one'}}` \u2502 \u2502 \u2502 \u2502 - `<list name='bar'><string format='upper-case' /></list>` => `{{\"bar\": ['STRING ONE', 'STRING TWO', \u2502 \u2502 \u2502 \u2502 etc.]}}` \u2502 \u2502 \u2502 \u2502 - `<object name='baz'><string name=\"foo\" format=\"capitalize two-words\" /><integer name=\"index\" \u2502 \u2502 \u2502 \u2502 format=\"1-indexed\" /></object>` => `{{'baz': {{'foo': 'Some String', 'index': 1}}}}` \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Instructions \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 You are a helpful assistant only capable of communicating with valid JSON, and no other text. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 ONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the \u2502 \u2502 \u2502 \u2502 `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding \u2502 \u2502 \u2502 \u2502 XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. \u2502 \u2502 \u2502 \u2502 requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere, \u2502 \u2502 \u2502 \u2502 enter `None`. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Here are examples of simple (XML, JSON) pairs that show the expected behavior: \u2502 \u2502 \u2502 \u2502 - `<string name='foo' format='two-words lower-case' />` => `{'foo': 'example one'}` \u2502 \u2502 \u2502 \u2502 - `<list name='bar'><string format='upper-case' /></list>` => `{\"bar\": ['STRING ONE', 'STRING TWO', \u2502 \u2502 \u2502 \u2502 etc.]}` \u2502 \u2502 \u2502 \u2502 - `<object name='baz'><string name=\"foo\" format=\"capitalize two-words\" /><integer name=\"index\" \u2502 \u2502 \u2502 \u2502 format=\"1-indexed\" /></object>` => `{'baz': {'foo': 'Some String', 'index': 1}}` \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Raw LLM Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"fees\": [ \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"name\": \"Annual Membership\" \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"name\": \"My Chase Plan Sm\" \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"name\": \"Balance Transfers\" \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"name\": \"Cash Advances\" \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"name\": \"Foreign Transactions\" \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"name\": \"Late Payment Penalty\" \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"name\": \"Over-The-Credit-Limit Penalty\" \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"name\": \"Return Payment Penalty\" \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"name\": \"Return Check Penalty\" \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 ] \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Validated Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'fees': [ \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'index': 1, \u2502 \u2502 \u2502 \u2502 'name': 'annual membership', \u2502 \u2502 \u2502 \u2502 'explanation': 'None', \u2502 \u2502 \u2502 \u2502 'value': 0.0 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'index': 2, \u2502 \u2502 \u2502 \u2502 'name': 'My Chase', \u2502 \u2502 \u2502 \u2502 'explanation': 'monthly fee of 0% of the amount of each eligible purchase transaction or \u2502 \u2502 \u2502 \u2502 amount selected to create a my chase plan while in the 0% intro purchase apr period. after that, \u2502 \u2502 \u2502 \u2502 monthly fee of 1.72% of the amount of each eligible purchase transaction or amount selected to create a \u2502 \u2502 \u2502 \u2502 my chase plan. the my chase plan fee will be determined at the time each my chase plan is created and \u2502 \u2502 \u2502 \u2502 will remain the same until the my chase plan is paid in full.', \u2502 \u2502 \u2502 \u2502 'value': 1.72 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'index': 3, \u2502 \u2502 \u2502 \u2502 'name': 'balance transfers', \u2502 \u2502 \u2502 \u2502 'explanation': 'intro fee of either $5 or 3% of the amount of each transfer, whichever is \u2502 \u2502 \u2502 \u2502 greater, on transfers made within 60 days of account opening. after that: either $5 or 5% of the amount \u2502 \u2502 \u2502 \u2502 of each transfer, whichever is greater.', \u2502 \u2502 \u2502 \u2502 'value': 5.0 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'index': 4, \u2502 \u2502 \u2502 \u2502 'name': 'cash advances', \u2502 \u2502 \u2502 \u2502 'explanation': 'Either $10 or 5% of the amount of each transaction, whichever is greater.', \u2502 \u2502 \u2502 \u2502 'value': 5.0 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'index': 5, \u2502 \u2502 \u2502 \u2502 'name': 'foreign transactions', \u2502 \u2502 \u2502 \u2502 'explanation': '3% of the amount of each transaction in U.S. dollars.', \u2502 \u2502 \u2502 \u2502 'value': 3.0 \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'index': 6, \u2502 \u2502 \u2502 \u2502 'name': 'Late Payment', \u2502 \u2502 \u2502 \u2502 'explanation': 'Up to $40.', \u2502 \u2502 \u2502 \u2502 'value': None \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'index': 7, \u2502 \u2502 \u2502 \u2502 'name': 'over-the-credit-limit penalty', \u2502 \u2502 \u2502 \u2502 'explanation': 'None', \u2502 \u2502 \u2502 \u2502 'value': None \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'index': 8, \u2502 \u2502 \u2502 \u2502 'name': 'Return Payment', \u2502 \u2502 \u2502 \u2502 'explanation': 'Up to $40.', \u2502 \u2502 \u2502 \u2502 'value': None \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'index': 9, \u2502 \u2502 \u2502 \u2502 'name': 'Return Check', \u2502 \u2502 \u2502 \u2502 'explanation': 'None', \u2502 \u2502 \u2502 \u2502 'value': None \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 ], \u2502 \u2502 \u2502 \u2502 'interest_rates': { \u2502 \u2502 \u2502 \u2502 'purchase annual percentage rate (apr)': { \u2502 \u2502 \u2502 \u2502 'introductory rate': 0.0, \u2502 \u2502 \u2502 \u2502 'introductory period': 'first 18 months', \u2502 \u2502 \u2502 \u2502 'standard rate': 19.49, \u2502 \u2502 \u2502 \u2502 'variable': True, \u2502 \u2502 \u2502 \u2502 'description': 'The interest rate charged on purchases made with the credit card.' \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 'my chase loan sm apr': { \u2502 \u2502 \u2502 \u2502 'rate': 19.49, \u2502 \u2502 \u2502 \u2502 'variable': True, \u2502 \u2502 \u2502 \u2502 'description': 'The interest rate charged on My Chase Loan balances.' \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 'balance transfer apr': { \u2502 \u2502 \u2502 \u2502 'introductory rate': 0.0, \u2502 \u2502 \u2502 \u2502 'introductory period': 'first 18 months', \u2502 \u2502 \u2502 \u2502 'standard rate': 19.49, \u2502 \u2502 \u2502 \u2502 'variable': True, \u2502 \u2502 \u2502 \u2502 'description': 'The interest rate charged on balances transferred to the credit card.' \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 'cash advance apr': { \u2502 \u2502 \u2502 \u2502 'rate': 29.49, \u2502 \u2502 \u2502 \u2502 'variable': True, \u2502 \u2502 \u2502 \u2502 'description': 'The interest rate charged on cash advances taken with the credit card.' \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 'penalty apr and when it applies': { \u2502 \u2502 \u2502 \u2502 'rate': 'Up to 29.99%', \u2502 \u2502 \u2502 \u2502 'variable': True, \u2502 \u2502 \u2502 \u2502 'description': 'The interest rate charged on the credit card when a penalty is applied.' \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 'maximum apr': { \u2502 \u2502 \u2502 \u2502 'rate': 29.99, \u2502 \u2502 \u2502 \u2502 'variable': True, \u2502 \u2502 \u2502 \u2502 'description': 'The highest interest rate that can be charged on the credit card.' \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"Step 3: Wrap the LLM API call with Guard"},{"location":"examples/no_secrets_in_generated_text/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Generating strings that don't have any secrets Note To download this example as a Jupyter notebook, click here . In this example, we will use Guardrails to generate strings that don't have any secrets. This is also a good example to show how to use the script element of the RAIL specification. In this case, we will use the script element to create a custom Validator that checks if a string has any secrets. Objective We want to ask help with an API, but make sure that the generated text has no secrets. Step 1: Create the RAIL Spec Ordinarily, we would create an RAIL spec in a separate file. For the purposes of this example, we will create the spec in this notebook as a string following the RAIL syntax. For more information on RAIL, see the RAIL documentation . In this RAIL spec, we: Create a script element that creates a custom Validator that checks if a string has any secrets. This is a simple example, but you can use this to create more complex Validators. For more information on creating custom Validators, see the Validators documentation . Create a output schema that returns an object with a api_help key. rail_str = \"\"\" <rail version=\"0.1\"> <script language='python'> from dataclasses import dataclass from guardrails.validators import Validator, EventDetail, register_validator import re from typing import Dict, List OPENAI_KEY_PATTERN = re.compile(r\"sk-[a-zA-Z0-9] {24} \") @register_validator(name=\"no-code-secrets\", data_type=\"string\") class NoCodeSecrets(Validator): def validate(self, key, value, schema) -> Dict: global OPENAI_KEY_PATTERN if re.search(OPENAI_KEY_PATTERN, value) is not None: # Corrected value should replace the OpenAI API key with \"sk-xxx\" correct_value = re.sub(OPENAI_KEY_PATTERN, \"sk-xxx\", value) raise EventDetail( key, value, schema, f\"Value {value} is an OpenAI API key.\", correct_value, ) return schema </script> <output> <string name=\"api_help\" description=\"Show an example curl command for using openai Completion API\" format=\"no-code-secrets\" on-fail-no-code-secrets=\"fix\" /> </output> <prompt> How do I use OpenAI's Completion API? @complete_json_suffix </prompt> </rail> \"\"\" Step 2: Create a Guard object with the RAIL Spec We create a gd.Guard object that will check, validate and correct the output of the LLM. This object: Enforces the quality criteria specified in the RAIL spec. Takes corrective action when the quality criteria are not met. Compiles the schema and type info from the RAIL spec and adds it to the prompt. import guardrails as gd from rich import print guard = gd . Guard . from_rail_string ( rail_str ) We see the prompt that will be sent to the LLM. print ( guard . base_prompt ) How do I use OpenAI's Completion API? Given below is XML that describes the information to extract from this document and the tags to extract it into. < output > <string name = \"api_help\" description = \"Show an example curl command for using openai Completion API\" format = \"no-code-secrets: \" / > < / output > ONLY return a valid JSON object ( no other text is necessary ) , where the key of the field in JSON is the `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere, enter ` None `. Here are examples of simple ( XML, JSON ) pairs that show the expected behavior: - `<string name = 'foo' format = 'two-words lower-case' / >` => ` {{ 'foo' : 'example one' }} ` - `<list name = 'bar' ><string format = 'upper-case' / >< / list >` => ` {{ \"bar\" : [ 'STRING ONE' , 'STRING TWO' , etc. ]}} ` - `<object name = 'baz' ><string name = \"foo\" format = \"capitalize two-words\" / ><integer name = \"index\" format = \"1-indexed\" / >< / object >` = > ` {{ 'baz' : {{ 'foo' : 'Some String' , 'index' : 1 }}}} ` JSON Object: Step 3: Wrap the LLM API call with Guard import openai raw_llm_response , validated_response = guard ( openai . Completion . create , engine = \"text-davinci-003\" , max_tokens = 2048 , temperature = 0 ) /Users/shreyarajpal/anaconda3/envs/tiff-env/lib/python3.9/site-packages/eliot/json.py:22: FutureWarning: In the future `np.bool` will be defined as the corresponding NumPy scalar. (This may have returned Python scalars in past versions. if isinstance(o, (numpy.bool, numpy.bool_)): The guard wrapper returns the raw_llm_respose (which is a simple string), and the validated and corrected output (which is a dictionary). We can see that the output is a dictionary with the correct schema and types. print ( validated_response ) { 'api_help' : 'curl -X POST -H \\'Content-Type: application/json\\' -d \\'{\"prompt\": \"The quick brown fox\", \"max_tokens\": 10}\\' https://api.openai.com/v1/engines/completion/completions' } print ( guard . state . most_recent_call . tree ) Logs \u2514\u2500\u2500 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Step 1 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Prompt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 How do I use OpenAI's Completion API? \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Given below is XML that describes the information to extract from this document and the tags to extract \u2502 \u2502 \u2502 \u2502 it into. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 <output> \u2502 \u2502 \u2502 \u2502 <string name=\"api_help\" description=\"Show an example curl command for using openai Completion API\" \u2502 \u2502 \u2502 \u2502 format=\"no-code-secrets: \"/> \u2502 \u2502 \u2502 \u2502 </output> \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 ONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the \u2502 \u2502 \u2502 \u2502 `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding \u2502 \u2502 \u2502 \u2502 XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. \u2502 \u2502 \u2502 \u2502 requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere, \u2502 \u2502 \u2502 \u2502 enter `None`. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Here are examples of simple (XML, JSON) pairs that show the expected behavior: \u2502 \u2502 \u2502 \u2502 - `<string name='foo' format='two-words lower-case' />` => `{'foo': 'example one'}` \u2502 \u2502 \u2502 \u2502 - `<list name='bar'><string format='upper-case' /></list>` => `{\"bar\": ['STRING ONE', 'STRING TWO', \u2502 \u2502 \u2502 \u2502 etc.]}` \u2502 \u2502 \u2502 \u2502 - `<object name='baz'><string name=\"foo\" format=\"capitalize two-words\" /><integer name=\"index\" \u2502 \u2502 \u2502 \u2502 format=\"1-indexed\" /></object>` => `{'baz': {'foo': 'Some String', 'index': 1}}` \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 JSON Object: \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Raw LLM Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 {\"api_help\": \"curl -X POST -H 'Content-Type: application/json' -d '{\\\"prompt\\\": \\\"The quick brown \u2502 \u2502 \u2502 \u2502 fox\\\", \\\"max_tokens\\\": 10}' https://api.openai.com/v1/engines/completion/completions\"} \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Validated Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'api_help': 'curl -X POST -H \\'Content-Type: application/json\\' -d \\'{\"prompt\": \"The quick brown \u2502 \u2502 \u2502 \u2502 fox\", \"max_tokens\": 10}\\' https://api.openai.com/v1/engines/completion/completions' \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"No secrets in generated text"},{"location":"examples/no_secrets_in_generated_text/#generating-strings-that-dont-have-any-secrets","text":"Note To download this example as a Jupyter notebook, click here . In this example, we will use Guardrails to generate strings that don't have any secrets. This is also a good example to show how to use the script element of the RAIL specification. In this case, we will use the script element to create a custom Validator that checks if a string has any secrets.","title":"Generating strings that don't have any secrets"},{"location":"examples/no_secrets_in_generated_text/#objective","text":"We want to ask help with an API, but make sure that the generated text has no secrets.","title":"Objective"},{"location":"examples/no_secrets_in_generated_text/#step-1-create-the-rail-spec","text":"Ordinarily, we would create an RAIL spec in a separate file. For the purposes of this example, we will create the spec in this notebook as a string following the RAIL syntax. For more information on RAIL, see the RAIL documentation . In this RAIL spec, we: Create a script element that creates a custom Validator that checks if a string has any secrets. This is a simple example, but you can use this to create more complex Validators. For more information on creating custom Validators, see the Validators documentation . Create a output schema that returns an object with a api_help key. rail_str = \"\"\" <rail version=\"0.1\"> <script language='python'> from dataclasses import dataclass from guardrails.validators import Validator, EventDetail, register_validator import re from typing import Dict, List OPENAI_KEY_PATTERN = re.compile(r\"sk-[a-zA-Z0-9] {24} \") @register_validator(name=\"no-code-secrets\", data_type=\"string\") class NoCodeSecrets(Validator): def validate(self, key, value, schema) -> Dict: global OPENAI_KEY_PATTERN if re.search(OPENAI_KEY_PATTERN, value) is not None: # Corrected value should replace the OpenAI API key with \"sk-xxx\" correct_value = re.sub(OPENAI_KEY_PATTERN, \"sk-xxx\", value) raise EventDetail( key, value, schema, f\"Value {value} is an OpenAI API key.\", correct_value, ) return schema </script> <output> <string name=\"api_help\" description=\"Show an example curl command for using openai Completion API\" format=\"no-code-secrets\" on-fail-no-code-secrets=\"fix\" /> </output> <prompt> How do I use OpenAI's Completion API? @complete_json_suffix </prompt> </rail> \"\"\"","title":"Step 1: Create the RAIL Spec"},{"location":"examples/no_secrets_in_generated_text/#step-2-create-a-guard-object-with-the-rail-spec","text":"We create a gd.Guard object that will check, validate and correct the output of the LLM. This object: Enforces the quality criteria specified in the RAIL spec. Takes corrective action when the quality criteria are not met. Compiles the schema and type info from the RAIL spec and adds it to the prompt. import guardrails as gd from rich import print guard = gd . Guard . from_rail_string ( rail_str ) We see the prompt that will be sent to the LLM. print ( guard . base_prompt ) How do I use OpenAI's Completion API? Given below is XML that describes the information to extract from this document and the tags to extract it into. < output > <string name = \"api_help\" description = \"Show an example curl command for using openai Completion API\" format = \"no-code-secrets: \" / > < / output > ONLY return a valid JSON object ( no other text is necessary ) , where the key of the field in JSON is the `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere, enter ` None `. Here are examples of simple ( XML, JSON ) pairs that show the expected behavior: - `<string name = 'foo' format = 'two-words lower-case' / >` => ` {{ 'foo' : 'example one' }} ` - `<list name = 'bar' ><string format = 'upper-case' / >< / list >` => ` {{ \"bar\" : [ 'STRING ONE' , 'STRING TWO' , etc. ]}} ` - `<object name = 'baz' ><string name = \"foo\" format = \"capitalize two-words\" / ><integer name = \"index\" format = \"1-indexed\" / >< / object >` = > ` {{ 'baz' : {{ 'foo' : 'Some String' , 'index' : 1 }}}} ` JSON Object:","title":"Step 2: Create a Guard object with the RAIL Spec"},{"location":"examples/no_secrets_in_generated_text/#step-3-wrap-the-llm-api-call-with-guard","text":"import openai raw_llm_response , validated_response = guard ( openai . Completion . create , engine = \"text-davinci-003\" , max_tokens = 2048 , temperature = 0 ) /Users/shreyarajpal/anaconda3/envs/tiff-env/lib/python3.9/site-packages/eliot/json.py:22: FutureWarning: In the future `np.bool` will be defined as the corresponding NumPy scalar. (This may have returned Python scalars in past versions. if isinstance(o, (numpy.bool, numpy.bool_)): The guard wrapper returns the raw_llm_respose (which is a simple string), and the validated and corrected output (which is a dictionary). We can see that the output is a dictionary with the correct schema and types. print ( validated_response ) { 'api_help' : 'curl -X POST -H \\'Content-Type: application/json\\' -d \\'{\"prompt\": \"The quick brown fox\", \"max_tokens\": 10}\\' https://api.openai.com/v1/engines/completion/completions' } print ( guard . state . most_recent_call . tree ) Logs \u2514\u2500\u2500 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Step 1 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Prompt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 How do I use OpenAI's Completion API? \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Given below is XML that describes the information to extract from this document and the tags to extract \u2502 \u2502 \u2502 \u2502 it into. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 <output> \u2502 \u2502 \u2502 \u2502 <string name=\"api_help\" description=\"Show an example curl command for using openai Completion API\" \u2502 \u2502 \u2502 \u2502 format=\"no-code-secrets: \"/> \u2502 \u2502 \u2502 \u2502 </output> \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 ONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the \u2502 \u2502 \u2502 \u2502 `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding \u2502 \u2502 \u2502 \u2502 XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. \u2502 \u2502 \u2502 \u2502 requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere, \u2502 \u2502 \u2502 \u2502 enter `None`. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Here are examples of simple (XML, JSON) pairs that show the expected behavior: \u2502 \u2502 \u2502 \u2502 - `<string name='foo' format='two-words lower-case' />` => `{'foo': 'example one'}` \u2502 \u2502 \u2502 \u2502 - `<list name='bar'><string format='upper-case' /></list>` => `{\"bar\": ['STRING ONE', 'STRING TWO', \u2502 \u2502 \u2502 \u2502 etc.]}` \u2502 \u2502 \u2502 \u2502 - `<object name='baz'><string name=\"foo\" format=\"capitalize two-words\" /><integer name=\"index\" \u2502 \u2502 \u2502 \u2502 format=\"1-indexed\" /></object>` => `{'baz': {'foo': 'Some String', 'index': 1}}` \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 JSON Object: \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Raw LLM Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 {\"api_help\": \"curl -X POST -H 'Content-Type: application/json' -d '{\\\"prompt\\\": \\\"The quick brown \u2502 \u2502 \u2502 \u2502 fox\\\", \\\"max_tokens\\\": 10}' https://api.openai.com/v1/engines/completion/completions\"} \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Validated Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'api_help': 'curl -X POST -H \\'Content-Type: application/json\\' -d \\'{\"prompt\": \"The quick brown \u2502 \u2502 \u2502 \u2502 fox\", \"max_tokens\": 10}\\' https://api.openai.com/v1/engines/completion/completions' \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"Step 3: Wrap the LLM API call with Guard"},{"location":"examples/recipe_generation/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Generating Vegan Recipes Note To download this example as a Jupyter notebook, click here . In this example, we will use Guardrails to generate vegan mac and cheese recipe. Objective We want to generate a vegan Mac-n-Cheese recipe as a list of ingredients and instructions. We will use Guardrails to make sure the recipe is vegan. import guardrails as gd from rich import print Step 1: Create the RAIL Spec Ordinarily, we would create an RAIL spec in a separate file. For the purposes of this example, we will create the spec in this notebook as a string following the RAIL syntax. For more information on RAIL, see the RAIL documentation . Here, we request: rail_str = \"\"\" <rail version=\"0.1\"> <script language='python'> from dataclasses import dataclass from guardrails.validators import Validator, EventDetail, register_validator import re from typing import Dict, List NON_VEGAN_INGREDIENTS = [\"butter\", \"milk\", \"eggs\", \"cheese\", \"cream\", \"yogurt\"] SUBSTITUTIONS = { \"butter\": \"margarine\", \"milk\": \"soy milk\", \"eggs\": \"flax eggs\", \"cheese\": \"vegan cheese\", \"cream\": \"soy cream\", \"yogurt\": \"soy yogurt\", } @register_validator(name=\"is-vegan\", data_type=\"string\") class IsVegan(Validator): def validate(self, key, value, schema) -> Dict: global NON_VEGAN_INGREDIENTS, SUBSTITUTIONS # Make sure the ingredient is not in the list of non-vegan ingredients. if value.lower() in NON_VEGAN_INGREDIENTS: raise EventDetail( key, value, schema, f\"Value {value} is not vegan.\", # Programmatically fix the value by replacing it with a vegan # substitute. SUBSTITUTIONS[value.lower()], ) return schema </script> <output> <list name=\"ingredients\" description=\"What are the ingredients for the recipe?\"> <object> <integer name=\"index\" format=\"1-indexed\" /> <string name=\"name\" format=\"is-vegan\" on-fail-is-vegan=\"fix\" /> <string name=\"brand\" description=\"Suggested brand for the ingredient (if any)\" /> <bool name=\"optional\" description=\"Is the ingredient necessary?\" /> <float name=\"quantity\" format=\"units-imperial\" /> <string name=\"units\" format=\"units-imperial\" /> </object> </list> <list name=\"instructions\" description=\"What are the instructions for the recipe?\"> <object> <integer name=\"index\" format=\"1-indexed\" /> <string name=\"step\" /> </object> </list> </output> <prompt> Generate a recipe for vegan mac and cheese. @complete_json_suffix </prompt> </rail> \"\"\" Note Here, we create a custom IsVegan validator that checks if the ingredient is vegan. We also set on-fail-is-vegan to fix , which in this case means that programatically we will replace the ingredient with a vegan substitute. Step 2: Create a Guard object with the RAIL Spec We create a gd.Guard object that will check, validate and correct the output of the LLM. This object: Enforces the quality criteria specified in the RAIL spec. Takes corrective action when the quality criteria are not met. Compiles the schema and type info from the RAIL spec and adds it to the prompt. guard = gd . Guard . from_rail_string ( rail_str ) /Users/shreyarajpal/guardrails/guardrails/schema.py:187: UserWarning: Validator 1-indexed is not valid for element integer. warnings.warn( /Users/shreyarajpal/guardrails/guardrails/schema.py:187: UserWarning: Validator units-imperial is not valid for element float. warnings.warn( /Users/shreyarajpal/guardrails/guardrails/schema.py:187: UserWarning: Validator units-imperial is not valid for element string. warnings.warn( As we can see, a few formatters weren't supported. These formatters won't be enforced in the output, but this information can still be used to generate a prompt. We see the prompt that will be sent to the LLM. The {document} is substituted with the user provided value at runtime. print ( guard . base_prompt ) Generate a recipe for vegan mac and cheese. Given below is XML that describes the information to extract from this document and the tags to extract it into. < output > <list name = \"ingredients\" description = \"What are the ingredients for the recipe?\" > <object> <integer name = \"index\" format = \"1-indexed\" / > <string name = \"name\" format = \"is-vegan\" / > <string name = \"brand\" description = \"Suggested brand for the ingredient (if any)\" / > <bool name = \"optional\" description = \"Is the ingredient necessary?\" / > <float name = \"quantity\" format = \"units-imperial\" / > <string name = \"units\" format = \"units-imperial\" / > < / object > < / list > <list name = \"instructions\" description = \"What are the instructions for the recipe?\" > <object> <integer name = \"index\" format = \"1-indexed\" / > <string name = \"step\" / > < / object > < / list > < / output > ONLY return a valid JSON object ( no other text is necessary ) , where the key of the field in JSON is the `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere, enter ` None `. Here are examples of simple ( XML, JSON ) pairs that show the expected behavior: - `<string name = 'foo' format = 'two-words lower-case' / >` => ` {{ 'foo' : 'example one' }} ` - `<list name = 'bar' ><string format = 'upper-case' / >< / list >` => ` {{ \"bar\" : [ 'STRING ONE' , 'STRING TWO' , etc. ]}} ` - `<object name = 'baz' ><string name = \"foo\" format = \"capitalize two-words\" / ><integer name = \"index\" format = \"1-indexed\" / >< / object >` = > ` {{ 'baz' : {{ 'foo' : 'Some String' , 'index' : 1 }}}} ` JSON Object: Step 3: Wrap the LLM API call with Guard import openai raw_llm_response , validated_response = guard ( openai . Completion . create , engine = \"text-davinci-003\" , max_tokens = 2048 , temperature = 0 ) /Users/shreyarajpal/anaconda3/envs/tiff-env/lib/python3.9/site-packages/eliot/json.py:22: FutureWarning: In the future `np.bool` will be defined as the corresponding NumPy scalar. (This may have returned Python scalars in past versions. if isinstance(o, (numpy.bool, numpy.bool_)): The guard wrapper returns the raw_llm_respose (which is a simple string), and the validated and corrected output (which is a dictionary). We can see that the output is a dictionary with the correct schema and types. print ( validated_response ) { 'ingredients' : [ { 'index' : 1 , 'name' : 'macaroni' , 'brand' : 'Barilla' , 'optional' : False , 'quantity' : 8.0 , 'units' : 'oz' } , { 'index' : 2 , 'name' : 'vegan butter' , 'brand' : 'Earth Balance' , 'optional' : False , 'quantity' : 2.0 , 'units' : 'tbsp' } , { 'index' : 3 , 'name' : 'all-purpose flour' , 'brand' : 'Gold Medal' , 'optional' : False , 'quantity' : 2.0 , 'units' : 'tbsp' } , { 'index' : 4 , 'name' : 'vegan milk' , 'brand' : 'Oatly' , 'optional' : False , 'quantity' : 2.0 , 'units' : 'cups' } , { 'index' : 5 , 'name' : 'vegan cheese' , 'brand' : 'Daiya' , 'optional' : False , 'quantity' : 8.0 , 'units' : 'oz' } , { 'index' : 6 , 'name' : 'nutritional yeast' , 'brand' : \"Bob's Red Mill\" , 'optional' : False , 'quantity' : 2.0 , 'units' : 'tbsp' } , { 'index' : 7 , 'name' : 'garlic powder' , 'brand' : 'McCormick' , 'optional' : False , 'quantity' : 1.0 , 'units' : 'tsp' } , { 'index' : 8 , 'name' : 'onion powder' , 'brand' : 'McCormick' , 'optional' : False , 'quantity' : 1.0 , 'units' : 'tsp' } , { 'index' : 9 , 'name' : 'salt' , 'brand' : 'Morton' , 'optional' : False , 'quantity' : 1.0 , 'units' : 'tsp' } , { 'index' : 10 , 'name' : 'black pepper' , 'brand' : 'McCormick' , 'optional' : False , 'quantity' : 0.5 , 'units' : 'tsp' } ] , 'instructions' : [ { 'index' : 1 , 'step' : 'Bring a large pot of salted water to a boil. Add the macaroni and cook according to package instructions.' } , { 'index' : 2 , 'step' : 'Drain the macaroni and set aside.' } , { 'index' : 3 , 'step' : 'In a medium saucepan, melt the vegan butter over medium heat. Add the flour and whisk until combined and bubbly.' } , { 'index' : 4 , 'step' : 'Slowly add the vegan milk, whisking constantly until the mixture is smooth and thickened.' } , { 'index' : 5 , 'step' : 'Add the vegan cheese, nutritional yeast, garlic powder, onion powder, salt, and pepper. Stir until the cheese is melted and the sauce is smooth.' } , { 'index' : 6 , 'step' : 'Add the cooked macaroni to the sauce and stir until combined.' } , { 'index' : 7 , 'step' : 'Serve the vegan mac and cheese warm.' } ] } print ( guard . state . most_recent_call . tree ) Logs \u2514\u2500\u2500 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Step 1 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Prompt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Generate a recipe for vegan mac and cheese. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Given below is XML that describes the information to extract from this document and the tags to extract \u2502 \u2502 \u2502 \u2502 it into. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 <output> \u2502 \u2502 \u2502 \u2502 <list name=\"ingredients\" description=\"What are the ingredients for the recipe?\"> \u2502 \u2502 \u2502 \u2502 <object> \u2502 \u2502 \u2502 \u2502 <integer name=\"index\" format=\"1-indexed\"/> \u2502 \u2502 \u2502 \u2502 <string name=\"name\" format=\"is-vegan\"/> \u2502 \u2502 \u2502 \u2502 <string name=\"brand\" description=\"Suggested brand for the ingredient (if any)\"/> \u2502 \u2502 \u2502 \u2502 <bool name=\"optional\" description=\"Is the ingredient necessary?\"/> \u2502 \u2502 \u2502 \u2502 <float name=\"quantity\" format=\"units-imperial\"/> \u2502 \u2502 \u2502 \u2502 <string name=\"units\" format=\"units-imperial\"/> \u2502 \u2502 \u2502 \u2502 </object> \u2502 \u2502 \u2502 \u2502 </list> \u2502 \u2502 \u2502 \u2502 <list name=\"instructions\" description=\"What are the instructions for the recipe?\"> \u2502 \u2502 \u2502 \u2502 <object> \u2502 \u2502 \u2502 \u2502 <integer name=\"index\" format=\"1-indexed\"/> \u2502 \u2502 \u2502 \u2502 <string name=\"step\"/> \u2502 \u2502 \u2502 \u2502 </object> \u2502 \u2502 \u2502 \u2502 </list> \u2502 \u2502 \u2502 \u2502 </output> \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 ONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the \u2502 \u2502 \u2502 \u2502 `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding \u2502 \u2502 \u2502 \u2502 XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. \u2502 \u2502 \u2502 \u2502 requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere, \u2502 \u2502 \u2502 \u2502 enter `None`. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Here are examples of simple (XML, JSON) pairs that show the expected behavior: \u2502 \u2502 \u2502 \u2502 - `<string name='foo' format='two-words lower-case' />` => `{'foo': 'example one'}` \u2502 \u2502 \u2502 \u2502 - `<list name='bar'><string format='upper-case' /></list>` => `{\"bar\": ['STRING ONE', 'STRING TWO', \u2502 \u2502 \u2502 \u2502 etc.]}` \u2502 \u2502 \u2502 \u2502 - `<object name='baz'><string name=\"foo\" format=\"capitalize two-words\" /><integer name=\"index\" \u2502 \u2502 \u2502 \u2502 format=\"1-indexed\" /></object>` => `{'baz': {'foo': 'Some String', 'index': 1}}` \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 JSON Object: \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Raw LLM Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"ingredients\": [ \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"index\": 1, \u2502 \u2502 \u2502 \u2502 \"name\": \"macaroni\", \u2502 \u2502 \u2502 \u2502 \"brand\": \"Barilla\", \u2502 \u2502 \u2502 \u2502 \"optional\": false, \u2502 \u2502 \u2502 \u2502 \"quantity\": 8.0, \u2502 \u2502 \u2502 \u2502 \"units\": \"oz\" \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"index\": 2, \u2502 \u2502 \u2502 \u2502 \"name\": \"vegan butter\", \u2502 \u2502 \u2502 \u2502 \"brand\": \"Earth Balance\", \u2502 \u2502 \u2502 \u2502 \"optional\": false, \u2502 \u2502 \u2502 \u2502 \"quantity\": 2.0, \u2502 \u2502 \u2502 \u2502 \"units\": \"tbsp\" \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"index\": 3, \u2502 \u2502 \u2502 \u2502 \"name\": \"all-purpose flour\", \u2502 \u2502 \u2502 \u2502 \"brand\": \"Gold Medal\", \u2502 \u2502 \u2502 \u2502 \"optional\": false, \u2502 \u2502 \u2502 \u2502 \"quantity\": 2.0, \u2502 \u2502 \u2502 \u2502 \"units\": \"tbsp\" \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"index\": 4, \u2502 \u2502 \u2502 \u2502 \"name\": \"vegan milk\", \u2502 \u2502 \u2502 \u2502 \"brand\": \"Oatly\", \u2502 \u2502 \u2502 \u2502 \"optional\": false, \u2502 \u2502 \u2502 \u2502 \"quantity\": 2.0, \u2502 \u2502 \u2502 \u2502 \"units\": \"cups\" \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"index\": 5, \u2502 \u2502 \u2502 \u2502 \"name\": \"vegan cheese\", \u2502 \u2502 \u2502 \u2502 \"brand\": \"Daiya\", \u2502 \u2502 \u2502 \u2502 \"optional\": false, \u2502 \u2502 \u2502 \u2502 \"quantity\": 8.0, \u2502 \u2502 \u2502 \u2502 \"units\": \"oz\" \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"index\": 6, \u2502 \u2502 \u2502 \u2502 \"name\": \"nutritional yeast\", \u2502 \u2502 \u2502 \u2502 \"brand\": \"Bob's Red Mill\", \u2502 \u2502 \u2502 \u2502 \"optional\": false, \u2502 \u2502 \u2502 \u2502 \"quantity\": 2.0, \u2502 \u2502 \u2502 \u2502 \"units\": \"tbsp\" \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"index\": 7, \u2502 \u2502 \u2502 \u2502 \"name\": \"garlic powder\", \u2502 \u2502 \u2502 \u2502 \"brand\": \"McCormick\", \u2502 \u2502 \u2502 \u2502 \"optional\": false, \u2502 \u2502 \u2502 \u2502 \"quantity\": 1.0, \u2502 \u2502 \u2502 \u2502 \"units\": \"tsp\" \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"index\": 8, \u2502 \u2502 \u2502 \u2502 \"name\": \"onion powder\", \u2502 \u2502 \u2502 \u2502 \"brand\": \"McCormick\", \u2502 \u2502 \u2502 \u2502 \"optional\": false, \u2502 \u2502 \u2502 \u2502 \"quantity\": 1.0, \u2502 \u2502 \u2502 \u2502 \"units\": \"tsp\" \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"index\": 9, \u2502 \u2502 \u2502 \u2502 \"name\": \"salt\", \u2502 \u2502 \u2502 \u2502 \"brand\": \"Morton\", \u2502 \u2502 \u2502 \u2502 \"optional\": false, \u2502 \u2502 \u2502 \u2502 \"quantity\": 1.0, \u2502 \u2502 \u2502 \u2502 \"units\": \"tsp\" \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"index\": 10, \u2502 \u2502 \u2502 \u2502 \"name\": \"black pepper\", \u2502 \u2502 \u2502 \u2502 \"brand\": \"McCormick\", \u2502 \u2502 \u2502 \u2502 \"optional\": false, \u2502 \u2502 \u2502 \u2502 \"quantity\": 0.5, \u2502 \u2502 \u2502 \u2502 \"units\": \"tsp\" \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 ], \u2502 \u2502 \u2502 \u2502 \"instructions\": [ \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"index\": 1, \u2502 \u2502 \u2502 \u2502 \"step\": \"Bring a large pot of salted water to a boil. Add the macaroni and cook according \u2502 \u2502 \u2502 \u2502 to package instructions.\" \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"index\": 2, \u2502 \u2502 \u2502 \u2502 \"step\": \"Drain the macaroni and set aside.\" \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"index\": 3, \u2502 \u2502 \u2502 \u2502 \"step\": \"In a medium saucepan, melt the vegan butter over medium heat. Add the flour and \u2502 \u2502 \u2502 \u2502 whisk until combined and bubbly.\" \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"index\": 4, \u2502 \u2502 \u2502 \u2502 \"step\": \"Slowly add the vegan milk, whisking constantly until the mixture is smooth and \u2502 \u2502 \u2502 \u2502 thickened.\" \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"index\": 5, \u2502 \u2502 \u2502 \u2502 \"step\": \"Add the vegan cheese, nutritional yeast, garlic powder, onion powder, salt, and \u2502 \u2502 \u2502 \u2502 pepper. Stir until the cheese is melted and the sauce is smooth.\" \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"index\": 6, \u2502 \u2502 \u2502 \u2502 \"step\": \"Add the cooked macaroni to the sauce and stir until combined.\" \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"index\": 7, \u2502 \u2502 \u2502 \u2502 \"step\": \"Serve the vegan mac and cheese warm.\" \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 ] \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Validated Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'ingredients': [ \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'index': 1, \u2502 \u2502 \u2502 \u2502 'name': 'macaroni', \u2502 \u2502 \u2502 \u2502 'brand': 'Barilla', \u2502 \u2502 \u2502 \u2502 'optional': False, \u2502 \u2502 \u2502 \u2502 'quantity': 8.0, \u2502 \u2502 \u2502 \u2502 'units': 'oz' \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'index': 2, \u2502 \u2502 \u2502 \u2502 'name': 'vegan butter', \u2502 \u2502 \u2502 \u2502 'brand': 'Earth Balance', \u2502 \u2502 \u2502 \u2502 'optional': False, \u2502 \u2502 \u2502 \u2502 'quantity': 2.0, \u2502 \u2502 \u2502 \u2502 'units': 'tbsp' \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'index': 3, \u2502 \u2502 \u2502 \u2502 'name': 'all-purpose flour', \u2502 \u2502 \u2502 \u2502 'brand': 'Gold Medal', \u2502 \u2502 \u2502 \u2502 'optional': False, \u2502 \u2502 \u2502 \u2502 'quantity': 2.0, \u2502 \u2502 \u2502 \u2502 'units': 'tbsp' \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'index': 4, \u2502 \u2502 \u2502 \u2502 'name': 'vegan milk', \u2502 \u2502 \u2502 \u2502 'brand': 'Oatly', \u2502 \u2502 \u2502 \u2502 'optional': False, \u2502 \u2502 \u2502 \u2502 'quantity': 2.0, \u2502 \u2502 \u2502 \u2502 'units': 'cups' \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'index': 5, \u2502 \u2502 \u2502 \u2502 'name': 'vegan cheese', \u2502 \u2502 \u2502 \u2502 'brand': 'Daiya', \u2502 \u2502 \u2502 \u2502 'optional': False, \u2502 \u2502 \u2502 \u2502 'quantity': 8.0, \u2502 \u2502 \u2502 \u2502 'units': 'oz' \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'index': 6, \u2502 \u2502 \u2502 \u2502 'name': 'nutritional yeast', \u2502 \u2502 \u2502 \u2502 'brand': \"Bob's Red Mill\", \u2502 \u2502 \u2502 \u2502 'optional': False, \u2502 \u2502 \u2502 \u2502 'quantity': 2.0, \u2502 \u2502 \u2502 \u2502 'units': 'tbsp' \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'index': 7, \u2502 \u2502 \u2502 \u2502 'name': 'garlic powder', \u2502 \u2502 \u2502 \u2502 'brand': 'McCormick', \u2502 \u2502 \u2502 \u2502 'optional': False, \u2502 \u2502 \u2502 \u2502 'quantity': 1.0, \u2502 \u2502 \u2502 \u2502 'units': 'tsp' \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'index': 8, \u2502 \u2502 \u2502 \u2502 'name': 'onion powder', \u2502 \u2502 \u2502 \u2502 'brand': 'McCormick', \u2502 \u2502 \u2502 \u2502 'optional': False, \u2502 \u2502 \u2502 \u2502 'quantity': 1.0, \u2502 \u2502 \u2502 \u2502 'units': 'tsp' \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'index': 9, \u2502 \u2502 \u2502 \u2502 'name': 'salt', \u2502 \u2502 \u2502 \u2502 'brand': 'Morton', \u2502 \u2502 \u2502 \u2502 'optional': False, \u2502 \u2502 \u2502 \u2502 'quantity': 1.0, \u2502 \u2502 \u2502 \u2502 'units': 'tsp' \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'index': 10, \u2502 \u2502 \u2502 \u2502 'name': 'black pepper', \u2502 \u2502 \u2502 \u2502 'brand': 'McCormick', \u2502 \u2502 \u2502 \u2502 'optional': False, \u2502 \u2502 \u2502 \u2502 'quantity': 0.5, \u2502 \u2502 \u2502 \u2502 'units': 'tsp' \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 ], \u2502 \u2502 \u2502 \u2502 'instructions': [ \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'index': 1, \u2502 \u2502 \u2502 \u2502 'step': 'Bring a large pot of salted water to a boil. Add the macaroni and cook according \u2502 \u2502 \u2502 \u2502 to package instructions.' \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 {'index': 2, 'step': 'Drain the macaroni and set aside.'}, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'index': 3, \u2502 \u2502 \u2502 \u2502 'step': 'In a medium saucepan, melt the vegan butter over medium heat. Add the flour and \u2502 \u2502 \u2502 \u2502 whisk until combined and bubbly.' \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'index': 4, \u2502 \u2502 \u2502 \u2502 'step': 'Slowly add the vegan milk, whisking constantly until the mixture is smooth and \u2502 \u2502 \u2502 \u2502 thickened.' \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'index': 5, \u2502 \u2502 \u2502 \u2502 'step': 'Add the vegan cheese, nutritional yeast, garlic powder, onion powder, salt, and \u2502 \u2502 \u2502 \u2502 pepper. Stir until the cheese is melted and the sauce is smooth.' \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'index': 6, \u2502 \u2502 \u2502 \u2502 'step': 'Add the cooked macaroni to the sauce and stir until combined.' \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 {'index': 7, 'step': 'Serve the vegan mac and cheese warm.'} \u2502 \u2502 \u2502 \u2502 ] \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"Vegan Mac & Cheese Recipe Generator"},{"location":"examples/recipe_generation/#generating-vegan-recipes","text":"Note To download this example as a Jupyter notebook, click here . In this example, we will use Guardrails to generate vegan mac and cheese recipe.","title":"Generating Vegan Recipes"},{"location":"examples/recipe_generation/#objective","text":"We want to generate a vegan Mac-n-Cheese recipe as a list of ingredients and instructions. We will use Guardrails to make sure the recipe is vegan. import guardrails as gd from rich import print","title":"Objective"},{"location":"examples/recipe_generation/#step-1-create-the-rail-spec","text":"Ordinarily, we would create an RAIL spec in a separate file. For the purposes of this example, we will create the spec in this notebook as a string following the RAIL syntax. For more information on RAIL, see the RAIL documentation . Here, we request: rail_str = \"\"\" <rail version=\"0.1\"> <script language='python'> from dataclasses import dataclass from guardrails.validators import Validator, EventDetail, register_validator import re from typing import Dict, List NON_VEGAN_INGREDIENTS = [\"butter\", \"milk\", \"eggs\", \"cheese\", \"cream\", \"yogurt\"] SUBSTITUTIONS = { \"butter\": \"margarine\", \"milk\": \"soy milk\", \"eggs\": \"flax eggs\", \"cheese\": \"vegan cheese\", \"cream\": \"soy cream\", \"yogurt\": \"soy yogurt\", } @register_validator(name=\"is-vegan\", data_type=\"string\") class IsVegan(Validator): def validate(self, key, value, schema) -> Dict: global NON_VEGAN_INGREDIENTS, SUBSTITUTIONS # Make sure the ingredient is not in the list of non-vegan ingredients. if value.lower() in NON_VEGAN_INGREDIENTS: raise EventDetail( key, value, schema, f\"Value {value} is not vegan.\", # Programmatically fix the value by replacing it with a vegan # substitute. SUBSTITUTIONS[value.lower()], ) return schema </script> <output> <list name=\"ingredients\" description=\"What are the ingredients for the recipe?\"> <object> <integer name=\"index\" format=\"1-indexed\" /> <string name=\"name\" format=\"is-vegan\" on-fail-is-vegan=\"fix\" /> <string name=\"brand\" description=\"Suggested brand for the ingredient (if any)\" /> <bool name=\"optional\" description=\"Is the ingredient necessary?\" /> <float name=\"quantity\" format=\"units-imperial\" /> <string name=\"units\" format=\"units-imperial\" /> </object> </list> <list name=\"instructions\" description=\"What are the instructions for the recipe?\"> <object> <integer name=\"index\" format=\"1-indexed\" /> <string name=\"step\" /> </object> </list> </output> <prompt> Generate a recipe for vegan mac and cheese. @complete_json_suffix </prompt> </rail> \"\"\" Note Here, we create a custom IsVegan validator that checks if the ingredient is vegan. We also set on-fail-is-vegan to fix , which in this case means that programatically we will replace the ingredient with a vegan substitute.","title":"Step 1: Create the RAIL Spec"},{"location":"examples/recipe_generation/#step-2-create-a-guard-object-with-the-rail-spec","text":"We create a gd.Guard object that will check, validate and correct the output of the LLM. This object: Enforces the quality criteria specified in the RAIL spec. Takes corrective action when the quality criteria are not met. Compiles the schema and type info from the RAIL spec and adds it to the prompt. guard = gd . Guard . from_rail_string ( rail_str ) /Users/shreyarajpal/guardrails/guardrails/schema.py:187: UserWarning: Validator 1-indexed is not valid for element integer. warnings.warn( /Users/shreyarajpal/guardrails/guardrails/schema.py:187: UserWarning: Validator units-imperial is not valid for element float. warnings.warn( /Users/shreyarajpal/guardrails/guardrails/schema.py:187: UserWarning: Validator units-imperial is not valid for element string. warnings.warn( As we can see, a few formatters weren't supported. These formatters won't be enforced in the output, but this information can still be used to generate a prompt. We see the prompt that will be sent to the LLM. The {document} is substituted with the user provided value at runtime. print ( guard . base_prompt ) Generate a recipe for vegan mac and cheese. Given below is XML that describes the information to extract from this document and the tags to extract it into. < output > <list name = \"ingredients\" description = \"What are the ingredients for the recipe?\" > <object> <integer name = \"index\" format = \"1-indexed\" / > <string name = \"name\" format = \"is-vegan\" / > <string name = \"brand\" description = \"Suggested brand for the ingredient (if any)\" / > <bool name = \"optional\" description = \"Is the ingredient necessary?\" / > <float name = \"quantity\" format = \"units-imperial\" / > <string name = \"units\" format = \"units-imperial\" / > < / object > < / list > <list name = \"instructions\" description = \"What are the instructions for the recipe?\" > <object> <integer name = \"index\" format = \"1-indexed\" / > <string name = \"step\" / > < / object > < / list > < / output > ONLY return a valid JSON object ( no other text is necessary ) , where the key of the field in JSON is the `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere, enter ` None `. Here are examples of simple ( XML, JSON ) pairs that show the expected behavior: - `<string name = 'foo' format = 'two-words lower-case' / >` => ` {{ 'foo' : 'example one' }} ` - `<list name = 'bar' ><string format = 'upper-case' / >< / list >` => ` {{ \"bar\" : [ 'STRING ONE' , 'STRING TWO' , etc. ]}} ` - `<object name = 'baz' ><string name = \"foo\" format = \"capitalize two-words\" / ><integer name = \"index\" format = \"1-indexed\" / >< / object >` = > ` {{ 'baz' : {{ 'foo' : 'Some String' , 'index' : 1 }}}} ` JSON Object:","title":"Step 2: Create a Guard object with the RAIL Spec"},{"location":"examples/recipe_generation/#step-3-wrap-the-llm-api-call-with-guard","text":"import openai raw_llm_response , validated_response = guard ( openai . Completion . create , engine = \"text-davinci-003\" , max_tokens = 2048 , temperature = 0 ) /Users/shreyarajpal/anaconda3/envs/tiff-env/lib/python3.9/site-packages/eliot/json.py:22: FutureWarning: In the future `np.bool` will be defined as the corresponding NumPy scalar. (This may have returned Python scalars in past versions. if isinstance(o, (numpy.bool, numpy.bool_)): The guard wrapper returns the raw_llm_respose (which is a simple string), and the validated and corrected output (which is a dictionary). We can see that the output is a dictionary with the correct schema and types. print ( validated_response ) { 'ingredients' : [ { 'index' : 1 , 'name' : 'macaroni' , 'brand' : 'Barilla' , 'optional' : False , 'quantity' : 8.0 , 'units' : 'oz' } , { 'index' : 2 , 'name' : 'vegan butter' , 'brand' : 'Earth Balance' , 'optional' : False , 'quantity' : 2.0 , 'units' : 'tbsp' } , { 'index' : 3 , 'name' : 'all-purpose flour' , 'brand' : 'Gold Medal' , 'optional' : False , 'quantity' : 2.0 , 'units' : 'tbsp' } , { 'index' : 4 , 'name' : 'vegan milk' , 'brand' : 'Oatly' , 'optional' : False , 'quantity' : 2.0 , 'units' : 'cups' } , { 'index' : 5 , 'name' : 'vegan cheese' , 'brand' : 'Daiya' , 'optional' : False , 'quantity' : 8.0 , 'units' : 'oz' } , { 'index' : 6 , 'name' : 'nutritional yeast' , 'brand' : \"Bob's Red Mill\" , 'optional' : False , 'quantity' : 2.0 , 'units' : 'tbsp' } , { 'index' : 7 , 'name' : 'garlic powder' , 'brand' : 'McCormick' , 'optional' : False , 'quantity' : 1.0 , 'units' : 'tsp' } , { 'index' : 8 , 'name' : 'onion powder' , 'brand' : 'McCormick' , 'optional' : False , 'quantity' : 1.0 , 'units' : 'tsp' } , { 'index' : 9 , 'name' : 'salt' , 'brand' : 'Morton' , 'optional' : False , 'quantity' : 1.0 , 'units' : 'tsp' } , { 'index' : 10 , 'name' : 'black pepper' , 'brand' : 'McCormick' , 'optional' : False , 'quantity' : 0.5 , 'units' : 'tsp' } ] , 'instructions' : [ { 'index' : 1 , 'step' : 'Bring a large pot of salted water to a boil. Add the macaroni and cook according to package instructions.' } , { 'index' : 2 , 'step' : 'Drain the macaroni and set aside.' } , { 'index' : 3 , 'step' : 'In a medium saucepan, melt the vegan butter over medium heat. Add the flour and whisk until combined and bubbly.' } , { 'index' : 4 , 'step' : 'Slowly add the vegan milk, whisking constantly until the mixture is smooth and thickened.' } , { 'index' : 5 , 'step' : 'Add the vegan cheese, nutritional yeast, garlic powder, onion powder, salt, and pepper. Stir until the cheese is melted and the sauce is smooth.' } , { 'index' : 6 , 'step' : 'Add the cooked macaroni to the sauce and stir until combined.' } , { 'index' : 7 , 'step' : 'Serve the vegan mac and cheese warm.' } ] } print ( guard . state . most_recent_call . tree ) Logs \u2514\u2500\u2500 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Step 1 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Prompt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Generate a recipe for vegan mac and cheese. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Given below is XML that describes the information to extract from this document and the tags to extract \u2502 \u2502 \u2502 \u2502 it into. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 <output> \u2502 \u2502 \u2502 \u2502 <list name=\"ingredients\" description=\"What are the ingredients for the recipe?\"> \u2502 \u2502 \u2502 \u2502 <object> \u2502 \u2502 \u2502 \u2502 <integer name=\"index\" format=\"1-indexed\"/> \u2502 \u2502 \u2502 \u2502 <string name=\"name\" format=\"is-vegan\"/> \u2502 \u2502 \u2502 \u2502 <string name=\"brand\" description=\"Suggested brand for the ingredient (if any)\"/> \u2502 \u2502 \u2502 \u2502 <bool name=\"optional\" description=\"Is the ingredient necessary?\"/> \u2502 \u2502 \u2502 \u2502 <float name=\"quantity\" format=\"units-imperial\"/> \u2502 \u2502 \u2502 \u2502 <string name=\"units\" format=\"units-imperial\"/> \u2502 \u2502 \u2502 \u2502 </object> \u2502 \u2502 \u2502 \u2502 </list> \u2502 \u2502 \u2502 \u2502 <list name=\"instructions\" description=\"What are the instructions for the recipe?\"> \u2502 \u2502 \u2502 \u2502 <object> \u2502 \u2502 \u2502 \u2502 <integer name=\"index\" format=\"1-indexed\"/> \u2502 \u2502 \u2502 \u2502 <string name=\"step\"/> \u2502 \u2502 \u2502 \u2502 </object> \u2502 \u2502 \u2502 \u2502 </list> \u2502 \u2502 \u2502 \u2502 </output> \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 ONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the \u2502 \u2502 \u2502 \u2502 `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding \u2502 \u2502 \u2502 \u2502 XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. \u2502 \u2502 \u2502 \u2502 requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere, \u2502 \u2502 \u2502 \u2502 enter `None`. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Here are examples of simple (XML, JSON) pairs that show the expected behavior: \u2502 \u2502 \u2502 \u2502 - `<string name='foo' format='two-words lower-case' />` => `{'foo': 'example one'}` \u2502 \u2502 \u2502 \u2502 - `<list name='bar'><string format='upper-case' /></list>` => `{\"bar\": ['STRING ONE', 'STRING TWO', \u2502 \u2502 \u2502 \u2502 etc.]}` \u2502 \u2502 \u2502 \u2502 - `<object name='baz'><string name=\"foo\" format=\"capitalize two-words\" /><integer name=\"index\" \u2502 \u2502 \u2502 \u2502 format=\"1-indexed\" /></object>` => `{'baz': {'foo': 'Some String', 'index': 1}}` \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 JSON Object: \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Raw LLM Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"ingredients\": [ \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"index\": 1, \u2502 \u2502 \u2502 \u2502 \"name\": \"macaroni\", \u2502 \u2502 \u2502 \u2502 \"brand\": \"Barilla\", \u2502 \u2502 \u2502 \u2502 \"optional\": false, \u2502 \u2502 \u2502 \u2502 \"quantity\": 8.0, \u2502 \u2502 \u2502 \u2502 \"units\": \"oz\" \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"index\": 2, \u2502 \u2502 \u2502 \u2502 \"name\": \"vegan butter\", \u2502 \u2502 \u2502 \u2502 \"brand\": \"Earth Balance\", \u2502 \u2502 \u2502 \u2502 \"optional\": false, \u2502 \u2502 \u2502 \u2502 \"quantity\": 2.0, \u2502 \u2502 \u2502 \u2502 \"units\": \"tbsp\" \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"index\": 3, \u2502 \u2502 \u2502 \u2502 \"name\": \"all-purpose flour\", \u2502 \u2502 \u2502 \u2502 \"brand\": \"Gold Medal\", \u2502 \u2502 \u2502 \u2502 \"optional\": false, \u2502 \u2502 \u2502 \u2502 \"quantity\": 2.0, \u2502 \u2502 \u2502 \u2502 \"units\": \"tbsp\" \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"index\": 4, \u2502 \u2502 \u2502 \u2502 \"name\": \"vegan milk\", \u2502 \u2502 \u2502 \u2502 \"brand\": \"Oatly\", \u2502 \u2502 \u2502 \u2502 \"optional\": false, \u2502 \u2502 \u2502 \u2502 \"quantity\": 2.0, \u2502 \u2502 \u2502 \u2502 \"units\": \"cups\" \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"index\": 5, \u2502 \u2502 \u2502 \u2502 \"name\": \"vegan cheese\", \u2502 \u2502 \u2502 \u2502 \"brand\": \"Daiya\", \u2502 \u2502 \u2502 \u2502 \"optional\": false, \u2502 \u2502 \u2502 \u2502 \"quantity\": 8.0, \u2502 \u2502 \u2502 \u2502 \"units\": \"oz\" \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"index\": 6, \u2502 \u2502 \u2502 \u2502 \"name\": \"nutritional yeast\", \u2502 \u2502 \u2502 \u2502 \"brand\": \"Bob's Red Mill\", \u2502 \u2502 \u2502 \u2502 \"optional\": false, \u2502 \u2502 \u2502 \u2502 \"quantity\": 2.0, \u2502 \u2502 \u2502 \u2502 \"units\": \"tbsp\" \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"index\": 7, \u2502 \u2502 \u2502 \u2502 \"name\": \"garlic powder\", \u2502 \u2502 \u2502 \u2502 \"brand\": \"McCormick\", \u2502 \u2502 \u2502 \u2502 \"optional\": false, \u2502 \u2502 \u2502 \u2502 \"quantity\": 1.0, \u2502 \u2502 \u2502 \u2502 \"units\": \"tsp\" \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"index\": 8, \u2502 \u2502 \u2502 \u2502 \"name\": \"onion powder\", \u2502 \u2502 \u2502 \u2502 \"brand\": \"McCormick\", \u2502 \u2502 \u2502 \u2502 \"optional\": false, \u2502 \u2502 \u2502 \u2502 \"quantity\": 1.0, \u2502 \u2502 \u2502 \u2502 \"units\": \"tsp\" \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"index\": 9, \u2502 \u2502 \u2502 \u2502 \"name\": \"salt\", \u2502 \u2502 \u2502 \u2502 \"brand\": \"Morton\", \u2502 \u2502 \u2502 \u2502 \"optional\": false, \u2502 \u2502 \u2502 \u2502 \"quantity\": 1.0, \u2502 \u2502 \u2502 \u2502 \"units\": \"tsp\" \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"index\": 10, \u2502 \u2502 \u2502 \u2502 \"name\": \"black pepper\", \u2502 \u2502 \u2502 \u2502 \"brand\": \"McCormick\", \u2502 \u2502 \u2502 \u2502 \"optional\": false, \u2502 \u2502 \u2502 \u2502 \"quantity\": 0.5, \u2502 \u2502 \u2502 \u2502 \"units\": \"tsp\" \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 ], \u2502 \u2502 \u2502 \u2502 \"instructions\": [ \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"index\": 1, \u2502 \u2502 \u2502 \u2502 \"step\": \"Bring a large pot of salted water to a boil. Add the macaroni and cook according \u2502 \u2502 \u2502 \u2502 to package instructions.\" \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"index\": 2, \u2502 \u2502 \u2502 \u2502 \"step\": \"Drain the macaroni and set aside.\" \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"index\": 3, \u2502 \u2502 \u2502 \u2502 \"step\": \"In a medium saucepan, melt the vegan butter over medium heat. Add the flour and \u2502 \u2502 \u2502 \u2502 whisk until combined and bubbly.\" \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"index\": 4, \u2502 \u2502 \u2502 \u2502 \"step\": \"Slowly add the vegan milk, whisking constantly until the mixture is smooth and \u2502 \u2502 \u2502 \u2502 thickened.\" \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"index\": 5, \u2502 \u2502 \u2502 \u2502 \"step\": \"Add the vegan cheese, nutritional yeast, garlic powder, onion powder, salt, and \u2502 \u2502 \u2502 \u2502 pepper. Stir until the cheese is melted and the sauce is smooth.\" \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"index\": 6, \u2502 \u2502 \u2502 \u2502 \"step\": \"Add the cooked macaroni to the sauce and stir until combined.\" \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 \"index\": 7, \u2502 \u2502 \u2502 \u2502 \"step\": \"Serve the vegan mac and cheese warm.\" \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 ] \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Validated Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'ingredients': [ \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'index': 1, \u2502 \u2502 \u2502 \u2502 'name': 'macaroni', \u2502 \u2502 \u2502 \u2502 'brand': 'Barilla', \u2502 \u2502 \u2502 \u2502 'optional': False, \u2502 \u2502 \u2502 \u2502 'quantity': 8.0, \u2502 \u2502 \u2502 \u2502 'units': 'oz' \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'index': 2, \u2502 \u2502 \u2502 \u2502 'name': 'vegan butter', \u2502 \u2502 \u2502 \u2502 'brand': 'Earth Balance', \u2502 \u2502 \u2502 \u2502 'optional': False, \u2502 \u2502 \u2502 \u2502 'quantity': 2.0, \u2502 \u2502 \u2502 \u2502 'units': 'tbsp' \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'index': 3, \u2502 \u2502 \u2502 \u2502 'name': 'all-purpose flour', \u2502 \u2502 \u2502 \u2502 'brand': 'Gold Medal', \u2502 \u2502 \u2502 \u2502 'optional': False, \u2502 \u2502 \u2502 \u2502 'quantity': 2.0, \u2502 \u2502 \u2502 \u2502 'units': 'tbsp' \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'index': 4, \u2502 \u2502 \u2502 \u2502 'name': 'vegan milk', \u2502 \u2502 \u2502 \u2502 'brand': 'Oatly', \u2502 \u2502 \u2502 \u2502 'optional': False, \u2502 \u2502 \u2502 \u2502 'quantity': 2.0, \u2502 \u2502 \u2502 \u2502 'units': 'cups' \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'index': 5, \u2502 \u2502 \u2502 \u2502 'name': 'vegan cheese', \u2502 \u2502 \u2502 \u2502 'brand': 'Daiya', \u2502 \u2502 \u2502 \u2502 'optional': False, \u2502 \u2502 \u2502 \u2502 'quantity': 8.0, \u2502 \u2502 \u2502 \u2502 'units': 'oz' \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'index': 6, \u2502 \u2502 \u2502 \u2502 'name': 'nutritional yeast', \u2502 \u2502 \u2502 \u2502 'brand': \"Bob's Red Mill\", \u2502 \u2502 \u2502 \u2502 'optional': False, \u2502 \u2502 \u2502 \u2502 'quantity': 2.0, \u2502 \u2502 \u2502 \u2502 'units': 'tbsp' \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'index': 7, \u2502 \u2502 \u2502 \u2502 'name': 'garlic powder', \u2502 \u2502 \u2502 \u2502 'brand': 'McCormick', \u2502 \u2502 \u2502 \u2502 'optional': False, \u2502 \u2502 \u2502 \u2502 'quantity': 1.0, \u2502 \u2502 \u2502 \u2502 'units': 'tsp' \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'index': 8, \u2502 \u2502 \u2502 \u2502 'name': 'onion powder', \u2502 \u2502 \u2502 \u2502 'brand': 'McCormick', \u2502 \u2502 \u2502 \u2502 'optional': False, \u2502 \u2502 \u2502 \u2502 'quantity': 1.0, \u2502 \u2502 \u2502 \u2502 'units': 'tsp' \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'index': 9, \u2502 \u2502 \u2502 \u2502 'name': 'salt', \u2502 \u2502 \u2502 \u2502 'brand': 'Morton', \u2502 \u2502 \u2502 \u2502 'optional': False, \u2502 \u2502 \u2502 \u2502 'quantity': 1.0, \u2502 \u2502 \u2502 \u2502 'units': 'tsp' \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'index': 10, \u2502 \u2502 \u2502 \u2502 'name': 'black pepper', \u2502 \u2502 \u2502 \u2502 'brand': 'McCormick', \u2502 \u2502 \u2502 \u2502 'optional': False, \u2502 \u2502 \u2502 \u2502 'quantity': 0.5, \u2502 \u2502 \u2502 \u2502 'units': 'tsp' \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2502 ], \u2502 \u2502 \u2502 \u2502 'instructions': [ \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'index': 1, \u2502 \u2502 \u2502 \u2502 'step': 'Bring a large pot of salted water to a boil. Add the macaroni and cook according \u2502 \u2502 \u2502 \u2502 to package instructions.' \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 {'index': 2, 'step': 'Drain the macaroni and set aside.'}, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'index': 3, \u2502 \u2502 \u2502 \u2502 'step': 'In a medium saucepan, melt the vegan butter over medium heat. Add the flour and \u2502 \u2502 \u2502 \u2502 whisk until combined and bubbly.' \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'index': 4, \u2502 \u2502 \u2502 \u2502 'step': 'Slowly add the vegan milk, whisking constantly until the mixture is smooth and \u2502 \u2502 \u2502 \u2502 thickened.' \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'index': 5, \u2502 \u2502 \u2502 \u2502 'step': 'Add the vegan cheese, nutritional yeast, garlic powder, onion powder, salt, and \u2502 \u2502 \u2502 \u2502 pepper. Stir until the cheese is melted and the sauce is smooth.' \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'index': 6, \u2502 \u2502 \u2502 \u2502 'step': 'Add the cooked macaroni to the sauce and stir until combined.' \u2502 \u2502 \u2502 \u2502 }, \u2502 \u2502 \u2502 \u2502 {'index': 7, 'step': 'Serve the vegan mac and cheese warm.'} \u2502 \u2502 \u2502 \u2502 ] \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"Step 3: Wrap the LLM API call with Guard"},{"location":"examples/select_choice_based_on_action/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Enforcing Guardrails on Choice Selection Note To download this tutorial as a Jupyter notebook, click here . In this example, we want the LLM to pick an action (e.g. fight or flight ), and based on that action we want to return different JSON objects. For example, if the action is fight , we want to return a JSON object that contains the weapon field. If the action is flight , we want to return a JSON object that contains the direction and distance fields. We make the assumption that: We don't need any external libraries that are not already installed in the environment. We are able to execute the code in the environment. Objective We want the LLM to play an RP game where it can choose to either fight or flight . If it chooses to fight , the LLM should choose a weapon and an enemy . If the player chooses flight , the LLM shoudl choose a direction and a distance . Step 1: Generating RAIL Spec Ordinarily, we could create a separate RAIL spec in a file. However, for the sake of this example, we will generate the RAIL spec in the notebook as a string. rail_str = \"\"\" <rail version=\"0.1\"> <output> <choice name=\"action\" on-fail-choice=\"reask\"> <case name=\"fight\"> <string name=\"weapon\" format=\"valid-choices: {['crossbow', 'machine gun']}\" on-fail-valid-choices=\"reask\" /> </case> <case name=\"flight\"> <object name=\"flight\"> <string name=\"flight_direction\" format=\"valid-choices: {['north','south','east','west']}\" on-fail-valid-choices=\"exception\" /> <integer name=\"distance\" format=\"valid-choices: {[1,2,3,4]}\" on-fail-valid-choices=\"exception\" /> </object> </case> </choice> </output> <prompt> You are a human in an enchanted forest. You come across opponents of different types, and you should fight smaller opponents and run away from bigger ones. You run into a {{opp_type}}. What do you do? @complete_json_suffix_v2</prompt> </rail> \"\"\" Step 2: Create a Guard object with the RAIL Spec We create a gd.Guard object that will check, validate and correct the generated code. This object: Enforces the quality criteria specified in the RAIL spec (i.e. bug free code). Takes corrective action when the quality criteria are not met (i.e. reasking the LLM). Compiles the schema and type info from the RAIL spec and adds it to the prompt. import guardrails as gd from rich import print guard = gd . Guard . from_rail_string ( rail_str ) The Guard object compiles the output schema and adds it to the prompt. We can see the final prompt below: print ( guard . base_prompt ) You are a human in an enchanted forest. You come across opponents of different types, and you should fight smaller opponents and run away from bigger ones. You run into a { opp_type } . What do you do? Given below is XML that describes the information to extract from this document and the tags to extract it into. < output > <string name = \"action\" choices = \"fight,flight\" / > <string format = \"valid-choices: choices=['crossbow', 'machine gun']\" name = \"fight\" if = \"action==fight\" / > <object name = \"flight\" if = \"action==flight\" > <string name = \"flight_direction\" format = \"valid-choices: choices=['north', 'south', 'east', 'west']\" / > <integer name = \"distance\" format = \"valid-choices: choices=[1, 2, 3, 4]\" / > < / object > < / output > ONLY return a valid JSON object ( no other text is necessary ) , where the key of the field in JSON is the `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. requests for lists, objects and specific types. Be correct and concise. Here are examples of simple ( XML, JSON ) pairs that show the expected behavior: - `<string name = 'foo' format = 'two-words lower-case' / >` => ` {{ 'foo' : 'example one' }} ` - `<list name = 'bar' ><string format = 'upper-case' / >< / list >` => ` {{ \"bar\" : [ 'STRING ONE' , 'STRING TWO' , etc. ]}} ` - `<object name = 'baz' ><string name = \"foo\" format = \"capitalize two-words\" / ><integer name = \"index\" format = \"1-indexed\" / >< / object >` => ` {{ 'baz' : {{ 'foo' : 'Some String' , 'index' : 1 }}}} ` - `<string name = \"foo\" choices = \"bar,baz\" / ><case name = \"bar\" on = \"foo\" ><string format = \"valid-choices: ['a', 'b']\" / >< / case ><case name = \"baz\" on = \"foo\" ><object><string name = \"qux\" format = \"valid-choices: ['corge', 'grault']\" / ><integer name = \"quux\" format = \"valid-choices: [1, 2, 3, 4]\" / >< / object >< / case >` = > ` {{ 'foo' : 'baz' , 'baz' : {{ 'qux' : 'corge' , 'quux' : 1 }}}} ` JSON Object: Step 3: Wrap the LLM API call with Guard We can now wrap the LsLM API call with the Guard object. This will ensure that the LLM generates an output that is compliant with the RAIL spec. To start, we test with a 'giant' as an opponent, and look at the output. import openai raw_llm_response , validated_response = guard ( openai . Completion . create , prompt_params = { 'opp_type' : 'giant' }, engine = \"text-davinci-003\" , max_tokens = 256 , temperature = 0.0 , ) Running the cell above returns: 1. The raw LLM text output as a single string. 2. A dictionary where the key is python_code and the value is the generated code. We can see that if the LLM chooses flight , the output is a dictionary with flight_direction and distance fields. print ( validated_response ) { 'action' : 'flight' , 'flight' : { 'flight_direction' : 'north' , 'distance' : 1 }} We can inspect the logs of the guard object to see the quality criteria that were checked and the corrective actions that were taken. print ( guard . state . most_recent_call . tree ) Logs \u2514\u2500\u2500 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Step 0 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Prompt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 You are a human in an enchanted forest. You come across opponents of different types, and you should \u2502 \u2502 \u2502 \u2502 fight smaller opponents and run away from bigger ones. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 You run into a giant. What do you do? \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Given below is XML that describes the information to extract from this document and the tags to extract \u2502 \u2502 \u2502 \u2502 it into. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 <output> \u2502 \u2502 \u2502 \u2502 <string name=\"action\" choices=\"fight,flight\"/> \u2502 \u2502 \u2502 \u2502 <string format=\"valid-choices: choices=['crossbow', 'machine gun']\" name=\"fight\" \u2502 \u2502 \u2502 \u2502 if=\"action==fight\"/> \u2502 \u2502 \u2502 \u2502 <object name=\"flight\" if=\"action==flight\"> \u2502 \u2502 \u2502 \u2502 <string name=\"flight_direction\" format=\"valid-choices: choices=['north', 'south', 'east', \u2502 \u2502 \u2502 \u2502 'west']\"/> \u2502 \u2502 \u2502 \u2502 <integer name=\"distance\" format=\"valid-choices: choices=[1, 2, 3, 4]\"/> \u2502 \u2502 \u2502 \u2502 </object> \u2502 \u2502 \u2502 \u2502 </output> \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 ONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the \u2502 \u2502 \u2502 \u2502 `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding \u2502 \u2502 \u2502 \u2502 XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. \u2502 \u2502 \u2502 \u2502 requests for lists, objects and specific types. Be correct and concise. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Here are examples of simple (XML, JSON) pairs that show the expected behavior: \u2502 \u2502 \u2502 \u2502 - `<string name='foo' format='two-words lower-case' />` => `{'foo': 'example one'}` \u2502 \u2502 \u2502 \u2502 - `<list name='bar'><string format='upper-case' /></list>` => `{\"bar\": ['STRING ONE', 'STRING TWO', \u2502 \u2502 \u2502 \u2502 etc.]}` \u2502 \u2502 \u2502 \u2502 - `<object name='baz'><string name=\"foo\" format=\"capitalize two-words\" /><integer name=\"index\" \u2502 \u2502 \u2502 \u2502 format=\"1-indexed\" /></object>` => `{'baz': {'foo': 'Some String', 'index': 1}}` \u2502 \u2502 \u2502 \u2502 - `<string name=\"foo\" choices=\"bar,baz\"/><case name=\"bar\" on=\"foo\"><string format=\"valid-choices: ['a', \u2502 \u2502 \u2502 \u2502 'b']\"/></case><case name=\"baz\" on=\"foo\"><object><string name=\"qux\" format=\"valid-choices: ['corge', \u2502 \u2502 \u2502 \u2502 'grault']\"/><integer name=\"quux\" format=\"valid-choices: [1, 2, 3, 4]\"/></object></case>` => `{'foo': \u2502 \u2502 \u2502 \u2502 'baz', 'baz': {'qux': 'corge', 'quux': 1}}` \u2502 \u2502 \u2502 \u2502 JSON Object: \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Raw LLM Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 {\"action\": \"flight\", \"flight\": {\"flight_direction\": \"north\", \"distance\": 1}} \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Validated Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 {'action': 'flight', 'flight': {'flight_direction': 'north', 'distance': 1}} \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f Now, let's test with a goblin as an opponent. We can see that the LLM chose to fight and the output is a choice of weapon . raw_llm_response , validated_response = guard ( openai . Completion . create , prompt_params = { 'opp_type' : 'goblin' }, engine = \"text-davinci-003\" , max_tokens = 256 , temperature = 0.0 , ) print ( validated_response ) { 'action' : 'fight' , 'fight' : 'crossbow' } We can inspect the state of the guard after each call to see what happened. print ( guard . state . most_recent_call . tree ) Logs \u2514\u2500\u2500 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Step 0 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Prompt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 You are a human in an enchanted forest. You come across opponents of different types, and you should \u2502 \u2502 \u2502 \u2502 fight smaller opponents and run away from bigger ones. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 You run into a goblin. What do you do? \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Given below is XML that describes the information to extract from this document and the tags to extract \u2502 \u2502 \u2502 \u2502 it into. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 <output> \u2502 \u2502 \u2502 \u2502 <string name=\"action\" choices=\"fight,flight\"/> \u2502 \u2502 \u2502 \u2502 <string format=\"valid-choices: choices=['crossbow', 'machine gun']\" name=\"fight\" \u2502 \u2502 \u2502 \u2502 if=\"action==fight\"/> \u2502 \u2502 \u2502 \u2502 <object name=\"flight\" if=\"action==flight\"> \u2502 \u2502 \u2502 \u2502 <string name=\"flight_direction\" format=\"valid-choices: choices=['north', 'south', 'east', \u2502 \u2502 \u2502 \u2502 'west']\"/> \u2502 \u2502 \u2502 \u2502 <integer name=\"distance\" format=\"valid-choices: choices=[1, 2, 3, 4]\"/> \u2502 \u2502 \u2502 \u2502 </object> \u2502 \u2502 \u2502 \u2502 </output> \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 ONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the \u2502 \u2502 \u2502 \u2502 `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding \u2502 \u2502 \u2502 \u2502 XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. \u2502 \u2502 \u2502 \u2502 requests for lists, objects and specific types. Be correct and concise. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Here are examples of simple (XML, JSON) pairs that show the expected behavior: \u2502 \u2502 \u2502 \u2502 - `<string name='foo' format='two-words lower-case' />` => `{'foo': 'example one'}` \u2502 \u2502 \u2502 \u2502 - `<list name='bar'><string format='upper-case' /></list>` => `{\"bar\": ['STRING ONE', 'STRING TWO', \u2502 \u2502 \u2502 \u2502 etc.]}` \u2502 \u2502 \u2502 \u2502 - `<object name='baz'><string name=\"foo\" format=\"capitalize two-words\" /><integer name=\"index\" \u2502 \u2502 \u2502 \u2502 format=\"1-indexed\" /></object>` => `{'baz': {'foo': 'Some String', 'index': 1}}` \u2502 \u2502 \u2502 \u2502 - `<string name=\"foo\" choices=\"bar,baz\"/><case name=\"bar\" on=\"foo\"><string format=\"valid-choices: ['a', \u2502 \u2502 \u2502 \u2502 'b']\"/></case><case name=\"baz\" on=\"foo\"><object><string name=\"qux\" format=\"valid-choices: ['corge', \u2502 \u2502 \u2502 \u2502 'grault']\"/><integer name=\"quux\" format=\"valid-choices: [1, 2, 3, 4]\"/></object></case>` => `{'foo': \u2502 \u2502 \u2502 \u2502 'baz', 'baz': {'qux': 'corge', 'quux': 1}}` \u2502 \u2502 \u2502 \u2502 JSON Object: \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Raw LLM Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 {\"action\": \"fight\", \"fight\": \"crossbow\"} \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Validated Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 {'action': 'fight', 'fight': 'crossbow'} \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"Select choice based on action"},{"location":"examples/select_choice_based_on_action/#enforcing-guardrails-on-choice-selection","text":"Note To download this tutorial as a Jupyter notebook, click here . In this example, we want the LLM to pick an action (e.g. fight or flight ), and based on that action we want to return different JSON objects. For example, if the action is fight , we want to return a JSON object that contains the weapon field. If the action is flight , we want to return a JSON object that contains the direction and distance fields. We make the assumption that: We don't need any external libraries that are not already installed in the environment. We are able to execute the code in the environment.","title":"Enforcing Guardrails on Choice Selection"},{"location":"examples/select_choice_based_on_action/#objective","text":"We want the LLM to play an RP game where it can choose to either fight or flight . If it chooses to fight , the LLM should choose a weapon and an enemy . If the player chooses flight , the LLM shoudl choose a direction and a distance .","title":"Objective"},{"location":"examples/select_choice_based_on_action/#step-1-generating-rail-spec","text":"Ordinarily, we could create a separate RAIL spec in a file. However, for the sake of this example, we will generate the RAIL spec in the notebook as a string. rail_str = \"\"\" <rail version=\"0.1\"> <output> <choice name=\"action\" on-fail-choice=\"reask\"> <case name=\"fight\"> <string name=\"weapon\" format=\"valid-choices: {['crossbow', 'machine gun']}\" on-fail-valid-choices=\"reask\" /> </case> <case name=\"flight\"> <object name=\"flight\"> <string name=\"flight_direction\" format=\"valid-choices: {['north','south','east','west']}\" on-fail-valid-choices=\"exception\" /> <integer name=\"distance\" format=\"valid-choices: {[1,2,3,4]}\" on-fail-valid-choices=\"exception\" /> </object> </case> </choice> </output> <prompt> You are a human in an enchanted forest. You come across opponents of different types, and you should fight smaller opponents and run away from bigger ones. You run into a {{opp_type}}. What do you do? @complete_json_suffix_v2</prompt> </rail> \"\"\"","title":"Step 1: Generating RAIL Spec"},{"location":"examples/select_choice_based_on_action/#step-2-create-a-guard-object-with-the-rail-spec","text":"We create a gd.Guard object that will check, validate and correct the generated code. This object: Enforces the quality criteria specified in the RAIL spec (i.e. bug free code). Takes corrective action when the quality criteria are not met (i.e. reasking the LLM). Compiles the schema and type info from the RAIL spec and adds it to the prompt. import guardrails as gd from rich import print guard = gd . Guard . from_rail_string ( rail_str ) The Guard object compiles the output schema and adds it to the prompt. We can see the final prompt below: print ( guard . base_prompt ) You are a human in an enchanted forest. You come across opponents of different types, and you should fight smaller opponents and run away from bigger ones. You run into a { opp_type } . What do you do? Given below is XML that describes the information to extract from this document and the tags to extract it into. < output > <string name = \"action\" choices = \"fight,flight\" / > <string format = \"valid-choices: choices=['crossbow', 'machine gun']\" name = \"fight\" if = \"action==fight\" / > <object name = \"flight\" if = \"action==flight\" > <string name = \"flight_direction\" format = \"valid-choices: choices=['north', 'south', 'east', 'west']\" / > <integer name = \"distance\" format = \"valid-choices: choices=[1, 2, 3, 4]\" / > < / object > < / output > ONLY return a valid JSON object ( no other text is necessary ) , where the key of the field in JSON is the `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. requests for lists, objects and specific types. Be correct and concise. Here are examples of simple ( XML, JSON ) pairs that show the expected behavior: - `<string name = 'foo' format = 'two-words lower-case' / >` => ` {{ 'foo' : 'example one' }} ` - `<list name = 'bar' ><string format = 'upper-case' / >< / list >` => ` {{ \"bar\" : [ 'STRING ONE' , 'STRING TWO' , etc. ]}} ` - `<object name = 'baz' ><string name = \"foo\" format = \"capitalize two-words\" / ><integer name = \"index\" format = \"1-indexed\" / >< / object >` => ` {{ 'baz' : {{ 'foo' : 'Some String' , 'index' : 1 }}}} ` - `<string name = \"foo\" choices = \"bar,baz\" / ><case name = \"bar\" on = \"foo\" ><string format = \"valid-choices: ['a', 'b']\" / >< / case ><case name = \"baz\" on = \"foo\" ><object><string name = \"qux\" format = \"valid-choices: ['corge', 'grault']\" / ><integer name = \"quux\" format = \"valid-choices: [1, 2, 3, 4]\" / >< / object >< / case >` = > ` {{ 'foo' : 'baz' , 'baz' : {{ 'qux' : 'corge' , 'quux' : 1 }}}} ` JSON Object:","title":"Step 2: Create a Guard object with the RAIL Spec"},{"location":"examples/select_choice_based_on_action/#step-3-wrap-the-llm-api-call-with-guard","text":"We can now wrap the LsLM API call with the Guard object. This will ensure that the LLM generates an output that is compliant with the RAIL spec. To start, we test with a 'giant' as an opponent, and look at the output. import openai raw_llm_response , validated_response = guard ( openai . Completion . create , prompt_params = { 'opp_type' : 'giant' }, engine = \"text-davinci-003\" , max_tokens = 256 , temperature = 0.0 , ) Running the cell above returns: 1. The raw LLM text output as a single string. 2. A dictionary where the key is python_code and the value is the generated code. We can see that if the LLM chooses flight , the output is a dictionary with flight_direction and distance fields. print ( validated_response ) { 'action' : 'flight' , 'flight' : { 'flight_direction' : 'north' , 'distance' : 1 }} We can inspect the logs of the guard object to see the quality criteria that were checked and the corrective actions that were taken. print ( guard . state . most_recent_call . tree ) Logs \u2514\u2500\u2500 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Step 0 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Prompt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 You are a human in an enchanted forest. You come across opponents of different types, and you should \u2502 \u2502 \u2502 \u2502 fight smaller opponents and run away from bigger ones. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 You run into a giant. What do you do? \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Given below is XML that describes the information to extract from this document and the tags to extract \u2502 \u2502 \u2502 \u2502 it into. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 <output> \u2502 \u2502 \u2502 \u2502 <string name=\"action\" choices=\"fight,flight\"/> \u2502 \u2502 \u2502 \u2502 <string format=\"valid-choices: choices=['crossbow', 'machine gun']\" name=\"fight\" \u2502 \u2502 \u2502 \u2502 if=\"action==fight\"/> \u2502 \u2502 \u2502 \u2502 <object name=\"flight\" if=\"action==flight\"> \u2502 \u2502 \u2502 \u2502 <string name=\"flight_direction\" format=\"valid-choices: choices=['north', 'south', 'east', \u2502 \u2502 \u2502 \u2502 'west']\"/> \u2502 \u2502 \u2502 \u2502 <integer name=\"distance\" format=\"valid-choices: choices=[1, 2, 3, 4]\"/> \u2502 \u2502 \u2502 \u2502 </object> \u2502 \u2502 \u2502 \u2502 </output> \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 ONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the \u2502 \u2502 \u2502 \u2502 `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding \u2502 \u2502 \u2502 \u2502 XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. \u2502 \u2502 \u2502 \u2502 requests for lists, objects and specific types. Be correct and concise. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Here are examples of simple (XML, JSON) pairs that show the expected behavior: \u2502 \u2502 \u2502 \u2502 - `<string name='foo' format='two-words lower-case' />` => `{'foo': 'example one'}` \u2502 \u2502 \u2502 \u2502 - `<list name='bar'><string format='upper-case' /></list>` => `{\"bar\": ['STRING ONE', 'STRING TWO', \u2502 \u2502 \u2502 \u2502 etc.]}` \u2502 \u2502 \u2502 \u2502 - `<object name='baz'><string name=\"foo\" format=\"capitalize two-words\" /><integer name=\"index\" \u2502 \u2502 \u2502 \u2502 format=\"1-indexed\" /></object>` => `{'baz': {'foo': 'Some String', 'index': 1}}` \u2502 \u2502 \u2502 \u2502 - `<string name=\"foo\" choices=\"bar,baz\"/><case name=\"bar\" on=\"foo\"><string format=\"valid-choices: ['a', \u2502 \u2502 \u2502 \u2502 'b']\"/></case><case name=\"baz\" on=\"foo\"><object><string name=\"qux\" format=\"valid-choices: ['corge', \u2502 \u2502 \u2502 \u2502 'grault']\"/><integer name=\"quux\" format=\"valid-choices: [1, 2, 3, 4]\"/></object></case>` => `{'foo': \u2502 \u2502 \u2502 \u2502 'baz', 'baz': {'qux': 'corge', 'quux': 1}}` \u2502 \u2502 \u2502 \u2502 JSON Object: \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Raw LLM Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 {\"action\": \"flight\", \"flight\": {\"flight_direction\": \"north\", \"distance\": 1}} \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Validated Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 {'action': 'flight', 'flight': {'flight_direction': 'north', 'distance': 1}} \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f Now, let's test with a goblin as an opponent. We can see that the LLM chose to fight and the output is a choice of weapon . raw_llm_response , validated_response = guard ( openai . Completion . create , prompt_params = { 'opp_type' : 'goblin' }, engine = \"text-davinci-003\" , max_tokens = 256 , temperature = 0.0 , ) print ( validated_response ) { 'action' : 'fight' , 'fight' : 'crossbow' } We can inspect the state of the guard after each call to see what happened. print ( guard . state . most_recent_call . tree ) Logs \u2514\u2500\u2500 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Step 0 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Prompt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 You are a human in an enchanted forest. You come across opponents of different types, and you should \u2502 \u2502 \u2502 \u2502 fight smaller opponents and run away from bigger ones. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 You run into a goblin. What do you do? \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Given below is XML that describes the information to extract from this document and the tags to extract \u2502 \u2502 \u2502 \u2502 it into. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 <output> \u2502 \u2502 \u2502 \u2502 <string name=\"action\" choices=\"fight,flight\"/> \u2502 \u2502 \u2502 \u2502 <string format=\"valid-choices: choices=['crossbow', 'machine gun']\" name=\"fight\" \u2502 \u2502 \u2502 \u2502 if=\"action==fight\"/> \u2502 \u2502 \u2502 \u2502 <object name=\"flight\" if=\"action==flight\"> \u2502 \u2502 \u2502 \u2502 <string name=\"flight_direction\" format=\"valid-choices: choices=['north', 'south', 'east', \u2502 \u2502 \u2502 \u2502 'west']\"/> \u2502 \u2502 \u2502 \u2502 <integer name=\"distance\" format=\"valid-choices: choices=[1, 2, 3, 4]\"/> \u2502 \u2502 \u2502 \u2502 </object> \u2502 \u2502 \u2502 \u2502 </output> \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 ONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the \u2502 \u2502 \u2502 \u2502 `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding \u2502 \u2502 \u2502 \u2502 XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. \u2502 \u2502 \u2502 \u2502 requests for lists, objects and specific types. Be correct and concise. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Here are examples of simple (XML, JSON) pairs that show the expected behavior: \u2502 \u2502 \u2502 \u2502 - `<string name='foo' format='two-words lower-case' />` => `{'foo': 'example one'}` \u2502 \u2502 \u2502 \u2502 - `<list name='bar'><string format='upper-case' /></list>` => `{\"bar\": ['STRING ONE', 'STRING TWO', \u2502 \u2502 \u2502 \u2502 etc.]}` \u2502 \u2502 \u2502 \u2502 - `<object name='baz'><string name=\"foo\" format=\"capitalize two-words\" /><integer name=\"index\" \u2502 \u2502 \u2502 \u2502 format=\"1-indexed\" /></object>` => `{'baz': {'foo': 'Some String', 'index': 1}}` \u2502 \u2502 \u2502 \u2502 - `<string name=\"foo\" choices=\"bar,baz\"/><case name=\"bar\" on=\"foo\"><string format=\"valid-choices: ['a', \u2502 \u2502 \u2502 \u2502 'b']\"/></case><case name=\"baz\" on=\"foo\"><object><string name=\"qux\" format=\"valid-choices: ['corge', \u2502 \u2502 \u2502 \u2502 'grault']\"/><integer name=\"quux\" format=\"valid-choices: [1, 2, 3, 4]\"/></object></case>` => `{'foo': \u2502 \u2502 \u2502 \u2502 'baz', 'baz': {'qux': 'corge', 'quux': 1}}` \u2502 \u2502 \u2502 \u2502 JSON Object: \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Raw LLM Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 {\"action\": \"fight\", \"fight\": \"crossbow\"} \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Validated Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 {'action': 'fight', 'fight': 'crossbow'} \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"Step 3: Wrap the LLM API call with Guard"},{"location":"examples/syntax_error_free_sql/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Natural Language to Bug Free SQL Note To download this example as a Jupyter notebook, click here . In this example, we will use Guardrails to generate SQL queries from natural language. We will check that the SQL is free of any syntax errors. Objective We want to generate SQL queries from natural language, and check that the SQL is free of any syntax errors. Step 0: Setup In order to run this example, you will need to install the sqlvalidator package. You can do so by running the following command: ! pip install sqlvalidator Step 1: Create the RAIL Spec Ordinarily, we would create an RAIL spec in a separate file. For the purposes of this example, we will create the spec in this notebook as a string following the RAIL syntax. For more information on RAIL, see the RAIL documentation . In this RAIL spec, we: Create an output schema that returns a single key-value pair. The key should be 'generated_sql' and the value should be the SQL query generated from the natural language, which is syntactically correct. rail_str = \"\"\" <rail version=\"0.1\"> <output> <string name=\"generated_sql\" description=\"Generate SQL for the given natural language instruction.\" format=\"bug-free-sql\" on-fail-bug-free-sql=\"reask\" /> </output> <prompt> Generate a valid SQL query for the following natural language instruction: {{nl_instruction}} @complete_json_suffix </prompt> </rail> \"\"\" Note In order to ensure that the SQL is syntactically correct, we use bug-free-sql as the formatter. This is a light-weight formatter that uses the sqlvalidator package to check that the SQL is free of any syntax errors. For your use case, you can create a custom SQL validator that connects to your database and checks that the SQL is valid. Step 2: Create a Guard object with the RAIL Spec We create a gd.Guard object that will check, validate and correct the output of the LLM. This object: Enforces the quality criteria specified in the RAIL spec. Takes corrective action when the quality criteria are not met. Compiles the schema and type info from the RAIL spec and adds it to the prompt. import guardrails as gd from rich import print guard = gd . Guard . from_rail_string ( rail_str ) /Users/shreyarajpal/guardrails/guardrails/schema.py:187: UserWarning: Validator bug-free-sql is not valid for element string. warnings.warn( We see the prompt that will be sent to the LLM: print ( guard . base_prompt ) Generate a valid SQL query for the following natural language instruction: { nl_instruction } Given below is XML that describes the information to extract from this document and the tags to extract it into. < output > <string name = \"generated_sql\" description = \"Generate SQL for the given natural language instruction.\" / > < / output > ONLY return a valid JSON object ( no other text is necessary ) , where the key of the field in JSON is the `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere, enter ` None `. Here are examples of simple ( XML, JSON ) pairs that show the expected behavior: - `<string name = 'foo' format = 'two-words lower-case' / >` => ` {{ 'foo' : 'example one' }} ` - `<list name = 'bar' ><string format = 'upper-case' / >< / list >` => ` {{ \"bar\" : [ 'STRING ONE' , 'STRING TWO' , etc. ]}} ` - `<object name = 'baz' ><string name = \"foo\" format = \"capitalize two-words\" / ><integer name = \"index\" format = \"1-indexed\" / >< / object >` = > ` {{ 'baz' : {{ 'foo' : 'Some String' , 'index' : 1 }}}} ` JSON Object: Here, nl_language is the natural language instruction and will be provided by the user at runtime. Step 3: Wrap the LLM API call with Guard import openai raw_llm_response , validated_response = guard ( openai . Completion . create , prompt_params = { \"nl_instruction\" : \"Select the name of the employee who has the highest salary.\" }, engine = \"text-davinci-003\" , max_tokens = 2048 , temperature = 0 , ) /Users/shreyarajpal/anaconda3/envs/tiff-env/lib/python3.9/site-packages/eliot/json.py:22: FutureWarning: In the future `np.bool` will be defined as the corresponding NumPy scalar. (This may have returned Python scalars in past versions. if isinstance(o, (numpy.bool, numpy.bool_)): The guard wrapper returns the raw_llm_respose (which is a simple string), and the validated and corrected output (which is a dictionary). We can see that the output is a dictionary with the correct schema and types. print ( validated_response ) { 'generated_sql' : 'SELECT name FROM employee ORDER BY salary DESC LIMIT 1' } print ( guard . state . most_recent_call . tree ) Logs \u2514\u2500\u2500 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Step 1 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Prompt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Generate a valid SQL query for the following natural language instruction: \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Select the name of the employee who has the highest salary. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Given below is XML that describes the information to extract from this document and the tags to extract \u2502 \u2502 \u2502 \u2502 it into. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 <output> \u2502 \u2502 \u2502 \u2502 <string name=\"generated_sql\" description=\"Generate SQL for the given natural language \u2502 \u2502 \u2502 \u2502 instruction.\"/> \u2502 \u2502 \u2502 \u2502 </output> \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 ONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the \u2502 \u2502 \u2502 \u2502 `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding \u2502 \u2502 \u2502 \u2502 XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. \u2502 \u2502 \u2502 \u2502 requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere, \u2502 \u2502 \u2502 \u2502 enter `None`. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Here are examples of simple (XML, JSON) pairs that show the expected behavior: \u2502 \u2502 \u2502 \u2502 - `<string name='foo' format='two-words lower-case' />` => `{'foo': 'example one'}` \u2502 \u2502 \u2502 \u2502 - `<list name='bar'><string format='upper-case' /></list>` => `{\"bar\": ['STRING ONE', 'STRING TWO', \u2502 \u2502 \u2502 \u2502 etc.]}` \u2502 \u2502 \u2502 \u2502 - `<object name='baz'><string name=\"foo\" format=\"capitalize two-words\" /><integer name=\"index\" \u2502 \u2502 \u2502 \u2502 format=\"1-indexed\" /></object>` => `{'baz': {'foo': 'Some String', 'index': 1}}` \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 JSON Object: \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Raw LLM Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 {\"generated_sql\": \"SELECT name FROM employee ORDER BY salary DESC LIMIT 1\"} \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Validated Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 {'generated_sql': 'SELECT name FROM employee ORDER BY salary DESC LIMIT 1'} \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"Natural language to bug-free SQL"},{"location":"examples/syntax_error_free_sql/#natural-language-to-bug-free-sql","text":"Note To download this example as a Jupyter notebook, click here . In this example, we will use Guardrails to generate SQL queries from natural language. We will check that the SQL is free of any syntax errors.","title":"Natural Language to Bug Free SQL"},{"location":"examples/syntax_error_free_sql/#objective","text":"We want to generate SQL queries from natural language, and check that the SQL is free of any syntax errors.","title":"Objective"},{"location":"examples/syntax_error_free_sql/#step-0-setup","text":"In order to run this example, you will need to install the sqlvalidator package. You can do so by running the following command: ! pip install sqlvalidator","title":"Step 0: Setup"},{"location":"examples/syntax_error_free_sql/#step-1-create-the-rail-spec","text":"Ordinarily, we would create an RAIL spec in a separate file. For the purposes of this example, we will create the spec in this notebook as a string following the RAIL syntax. For more information on RAIL, see the RAIL documentation . In this RAIL spec, we: Create an output schema that returns a single key-value pair. The key should be 'generated_sql' and the value should be the SQL query generated from the natural language, which is syntactically correct. rail_str = \"\"\" <rail version=\"0.1\"> <output> <string name=\"generated_sql\" description=\"Generate SQL for the given natural language instruction.\" format=\"bug-free-sql\" on-fail-bug-free-sql=\"reask\" /> </output> <prompt> Generate a valid SQL query for the following natural language instruction: {{nl_instruction}} @complete_json_suffix </prompt> </rail> \"\"\" Note In order to ensure that the SQL is syntactically correct, we use bug-free-sql as the formatter. This is a light-weight formatter that uses the sqlvalidator package to check that the SQL is free of any syntax errors. For your use case, you can create a custom SQL validator that connects to your database and checks that the SQL is valid.","title":"Step 1: Create the RAIL Spec"},{"location":"examples/syntax_error_free_sql/#step-2-create-a-guard-object-with-the-rail-spec","text":"We create a gd.Guard object that will check, validate and correct the output of the LLM. This object: Enforces the quality criteria specified in the RAIL spec. Takes corrective action when the quality criteria are not met. Compiles the schema and type info from the RAIL spec and adds it to the prompt. import guardrails as gd from rich import print guard = gd . Guard . from_rail_string ( rail_str ) /Users/shreyarajpal/guardrails/guardrails/schema.py:187: UserWarning: Validator bug-free-sql is not valid for element string. warnings.warn( We see the prompt that will be sent to the LLM: print ( guard . base_prompt ) Generate a valid SQL query for the following natural language instruction: { nl_instruction } Given below is XML that describes the information to extract from this document and the tags to extract it into. < output > <string name = \"generated_sql\" description = \"Generate SQL for the given natural language instruction.\" / > < / output > ONLY return a valid JSON object ( no other text is necessary ) , where the key of the field in JSON is the `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere, enter ` None `. Here are examples of simple ( XML, JSON ) pairs that show the expected behavior: - `<string name = 'foo' format = 'two-words lower-case' / >` => ` {{ 'foo' : 'example one' }} ` - `<list name = 'bar' ><string format = 'upper-case' / >< / list >` => ` {{ \"bar\" : [ 'STRING ONE' , 'STRING TWO' , etc. ]}} ` - `<object name = 'baz' ><string name = \"foo\" format = \"capitalize two-words\" / ><integer name = \"index\" format = \"1-indexed\" / >< / object >` = > ` {{ 'baz' : {{ 'foo' : 'Some String' , 'index' : 1 }}}} ` JSON Object: Here, nl_language is the natural language instruction and will be provided by the user at runtime.","title":"Step 2: Create a Guard object with the RAIL Spec"},{"location":"examples/syntax_error_free_sql/#step-3-wrap-the-llm-api-call-with-guard","text":"import openai raw_llm_response , validated_response = guard ( openai . Completion . create , prompt_params = { \"nl_instruction\" : \"Select the name of the employee who has the highest salary.\" }, engine = \"text-davinci-003\" , max_tokens = 2048 , temperature = 0 , ) /Users/shreyarajpal/anaconda3/envs/tiff-env/lib/python3.9/site-packages/eliot/json.py:22: FutureWarning: In the future `np.bool` will be defined as the corresponding NumPy scalar. (This may have returned Python scalars in past versions. if isinstance(o, (numpy.bool, numpy.bool_)): The guard wrapper returns the raw_llm_respose (which is a simple string), and the validated and corrected output (which is a dictionary). We can see that the output is a dictionary with the correct schema and types. print ( validated_response ) { 'generated_sql' : 'SELECT name FROM employee ORDER BY salary DESC LIMIT 1' } print ( guard . state . most_recent_call . tree ) Logs \u2514\u2500\u2500 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Step 1 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Prompt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Generate a valid SQL query for the following natural language instruction: \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Select the name of the employee who has the highest salary. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Given below is XML that describes the information to extract from this document and the tags to extract \u2502 \u2502 \u2502 \u2502 it into. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 <output> \u2502 \u2502 \u2502 \u2502 <string name=\"generated_sql\" description=\"Generate SQL for the given natural language \u2502 \u2502 \u2502 \u2502 instruction.\"/> \u2502 \u2502 \u2502 \u2502 </output> \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 ONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the \u2502 \u2502 \u2502 \u2502 `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding \u2502 \u2502 \u2502 \u2502 XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. \u2502 \u2502 \u2502 \u2502 requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere, \u2502 \u2502 \u2502 \u2502 enter `None`. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Here are examples of simple (XML, JSON) pairs that show the expected behavior: \u2502 \u2502 \u2502 \u2502 - `<string name='foo' format='two-words lower-case' />` => `{'foo': 'example one'}` \u2502 \u2502 \u2502 \u2502 - `<list name='bar'><string format='upper-case' /></list>` => `{\"bar\": ['STRING ONE', 'STRING TWO', \u2502 \u2502 \u2502 \u2502 etc.]}` \u2502 \u2502 \u2502 \u2502 - `<object name='baz'><string name=\"foo\" format=\"capitalize two-words\" /><integer name=\"index\" \u2502 \u2502 \u2502 \u2502 format=\"1-indexed\" /></object>` => `{'baz': {'foo': 'Some String', 'index': 1}}` \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 JSON Object: \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Raw LLM Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 {\"generated_sql\": \"SELECT name FROM employee ORDER BY salary DESC LIMIT 1\"} \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Validated Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 {'generated_sql': 'SELECT name FROM employee ORDER BY salary DESC LIMIT 1'} \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"Step 3: Wrap the LLM API call with Guard"},{"location":"examples/text_summarization_quality/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Summarize text accurately Note To download this example as a Jupyter notebook, click here . In this example, we will use Guardrails in the summarization of a text document. We will check whether the summarized document has a high semantic similarity with the original document. Objective Summarize a text document and check whether the summarized document has a high semantic similarity with the original document. Step 0: Setup In order to run this example, you will need to install the numpy package. You can do so by running the following commands: ! pip install numpy Requirement already satisfied: numpy in /Users/krandiash/opt/anaconda3/envs/guardrails/lib/python3.9/site-packages (1.24.2) Step 1: Create the RAIL Spec Ordinarily, we would create an RAIL spec in a separate file. For the purposes of this example, we will create the spec in this notebook as a string following the RAIL syntax. For more information on RAIL, see the RAIL documentation . In this RAIL spec, we: Create an output schema that returns a single key-value pair. The key should be 'summary', and the value should be the summary of the given document. rail_str = \"\"\" <rail version=\"0.1\"> <script language='python'> document = open(\"data/article1.txt\", \"r\").read() </script> <output> <string name=\"summary\" description=\"Summarize the given document faithfully.\" format=\"similar-to-document: {document} , 0.60\" on-fail-similar-to-document=\"filter\" /> </output> <prompt> Summarize the following document: {{document}} @complete_json_suffix </prompt> </rail> \"\"\" Note In order to ensure the summary is similar to the document, we use similar-to-document as the validator. This validator embeds the document and the summary and checks whether the cosine similarity between the two embeddings is above a threshold. Step 2: Create a Guard object with the RAIL Spec We create a gd.Guard object that will check, validate and correct the output of the LLM. This object: Enforces the quality criteria specified in the RAIL spec. Takes corrective action when the quality criteria are not met. Compiles the schema and type info from the RAIL spec and adds it to the prompt. import guardrails as gd from rich import print guard = gd . Guard . from_rail_string ( rail_str ) We see the prompt that will be sent to the LLM: print ( guard . base_prompt ) Summarize the following document: { document } Given below is XML that describes the information to extract from this document and the tags to extract it into. < output > <string name = \"summary\" description = \"Summarize the given document faithfully.\" / > < / output > ONLY return a valid JSON object ( no other text is necessary ) , where the key of the field in JSON is the `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere, enter ` None `. Here are examples of simple ( XML, JSON ) pairs that show the expected behavior: - `<string name = 'foo' format = 'two-words lower-case' / >` => ` {{ 'foo' : 'example one' }} ` - `<list name = 'bar' ><string format = 'upper-case' / >< / list >` => ` {{ \"bar\" : [ 'STRING ONE' , 'STRING TWO' , etc. ]}} ` - `<object name = 'baz' ><string name = \"foo\" format = \"capitalize two-words\" / ><integer name = \"index\" format = \"1-indexed\" / >< / object >` = > ` {{ 'baz' : {{ 'foo' : 'Some String' , 'index' : 1 }}}} ` JSON Object: Here, statement_to_be_translated is the the statement and will be provided by the user at runtime. Step 3: Wrap the LLM API call with Guard First, let's try translating a statement that doesn't have any profanity in it. import openai raw_llm_response , validated_response = guard ( openai . Completion . create , prompt_params = { 'document' : open ( \"data/article1.txt\" , \"r\" ) . read ()}, engine = 'text-davinci-003' , max_tokens = 2048 , temperature = 0 ) print ( f \"Validated Output: { validated_response } \" ) /Users/shreyarajpal/anaconda3/envs/tiff-env/lib/python3.9/site-packages/eliot/json.py:22: FutureWarning: In the future `np.bool` will be defined as the corresponding NumPy scalar. (This may have returned Python scalars in past versions. if isinstance(o, (numpy.bool, numpy.bool_)): Validated Output: { 'summary' : 'All legislative powers are vested in a Congress of the United States, which consists of a Senate and House of Representatives. The House of Representatives is composed of members chosen every two years by the people of the several states, and must meet certain qualifications. Representatives and direct taxes are apportioned among the states according to their respective numbers. The House of Representatives chooses their speaker and other officers, and has the sole power of impeachment. When vacancies happen in the representation from any state, the executive authority thereof shall issue writs of election to fill such vacancies.' } In order to see a detailed look into the logs of the Guard object, we can print the Guard state history: print ( guard . state . most_recent_call . tree ) Logs \u2514\u2500\u2500 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Step 0 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Prompt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Summarize the following document: \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Section. 1. \u2502 \u2502 \u2502 \u2502 All legislative Powers herein granted shall be vested in a Congress of the United States, which shall \u2502 \u2502 \u2502 \u2502 consist of a Senate and House of Representatives. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Section. 2. \u2502 \u2502 \u2502 \u2502 The House of Representatives shall be composed of Members chosen every second Year by the People of the \u2502 \u2502 \u2502 \u2502 several States, and the Electors in each State shall have the Qualifications requisite for Electors of \u2502 \u2502 \u2502 \u2502 the most numerous Branch of the State Legislature. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 No Person shall be a Representative who shall not have attained to the Age of twenty five Years, and \u2502 \u2502 \u2502 \u2502 been seven Years a Citizen of the United States, and who shall not, when elected, be an Inhabitant of \u2502 \u2502 \u2502 \u2502 that State in which he shall be chosen. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Representatives and direct Taxes shall be apportioned among the several States which may be included \u2502 \u2502 \u2502 \u2502 within this Union, according to their respective Numbers, which shall be determined by adding to the \u2502 \u2502 \u2502 \u2502 whole Number of free Persons, including those bound to Service for a Term of Years, and excluding \u2502 \u2502 \u2502 \u2502 Indians not taxed, three fifths of all other Persons. The actual Enumeration shall be made within three \u2502 \u2502 \u2502 \u2502 Years after the first Meeting of the Congress of the United States, and within every subsequent Term of \u2502 \u2502 \u2502 \u2502 ten Years, in such Manner as they shall by Law direct. The Number of Representatives shall not exceed \u2502 \u2502 \u2502 \u2502 one for every thirty Thousand, but each State shall have at Least one Representative; and until such \u2502 \u2502 \u2502 \u2502 enumeration shall be made, the State of New Hampshire shall be entitled to chuse three, Massachusetts \u2502 \u2502 \u2502 \u2502 eight, Rhode-Island and Providence Plantations one, Connecticut five, New-York six, New Jersey four, \u2502 \u2502 \u2502 \u2502 Pennsylvania eight, Delaware one, Maryland six, Virginia ten, North Carolina five, South Carolina five, \u2502 \u2502 \u2502 \u2502 and Georgia three. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 When vacancies happen in the Representation from any State, the Executive Authority thereof shall issue \u2502 \u2502 \u2502 \u2502 Writs of Election to fill such Vacancies. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 The House of Representatives shall chuse their Speaker and other Officers; and shall have the sole \u2502 \u2502 \u2502 \u2502 Power of Impeachment. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Given below is XML that describes the information to extract from this document and the tags to extract \u2502 \u2502 \u2502 \u2502 it into. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 <output> \u2502 \u2502 \u2502 \u2502 <string name=\"summary\" description=\"Summarize the given document faithfully.\"/> \u2502 \u2502 \u2502 \u2502 </output> \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 ONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the \u2502 \u2502 \u2502 \u2502 `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding \u2502 \u2502 \u2502 \u2502 XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. \u2502 \u2502 \u2502 \u2502 requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere, \u2502 \u2502 \u2502 \u2502 enter `None`. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Here are examples of simple (XML, JSON) pairs that show the expected behavior: \u2502 \u2502 \u2502 \u2502 - `<string name='foo' format='two-words lower-case' />` => `{'foo': 'example one'}` \u2502 \u2502 \u2502 \u2502 - `<list name='bar'><string format='upper-case' /></list>` => `{\"bar\": ['STRING ONE', 'STRING TWO', \u2502 \u2502 \u2502 \u2502 etc.]}` \u2502 \u2502 \u2502 \u2502 - `<object name='baz'><string name=\"foo\" format=\"capitalize two-words\" /><integer name=\"index\" \u2502 \u2502 \u2502 \u2502 format=\"1-indexed\" /></object>` => `{'baz': {'foo': 'Some String', 'index': 1}}` \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 JSON Object: \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Raw LLM Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 {\"summary\": \"All legislative powers are vested in a Congress of the United States, which consists of a \u2502 \u2502 \u2502 \u2502 Senate and House of Representatives. The House of Representatives is composed of members chosen every \u2502 \u2502 \u2502 \u2502 two years by the people of the several states, and must meet certain qualifications. Representatives \u2502 \u2502 \u2502 \u2502 and direct taxes are apportioned among the states according to their respective numbers. The House of \u2502 \u2502 \u2502 \u2502 Representatives chooses their speaker and other officers, and has the sole power of impeachment. When \u2502 \u2502 \u2502 \u2502 vacancies happen in the representation from any state, the executive authority thereof shall issue \u2502 \u2502 \u2502 \u2502 writs of election to fill such vacancies.\"} \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Validated Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'summary': 'All legislative powers are vested in a Congress of the United States, which consists of \u2502 \u2502 \u2502 \u2502 a Senate and House of Representatives. The House of Representatives is composed of members chosen every \u2502 \u2502 \u2502 \u2502 two years by the people of the several states, and must meet certain qualifications. Representatives \u2502 \u2502 \u2502 \u2502 and direct taxes are apportioned among the states according to their respective numbers. The House of \u2502 \u2502 \u2502 \u2502 Representatives chooses their speaker and other officers, and has the sole power of impeachment. When \u2502 \u2502 \u2502 \u2502 vacancies happen in the representation from any state, the executive authority thereof shall issue \u2502 \u2502 \u2502 \u2502 writs of election to fill such vacancies.' \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f The guard wrapper returns the raw_llm_respose (which is a simple string), and the validated and corrected output (which is a dictionary). We can see that the output is a dictionary with the correct schema and types. Next, let's try using a smaller model, which is not boing to be good at summarization. We can see that the output is filtered out. raw_llm_response , validated_response = guard ( openai . Completion . create , prompt_params = { 'document' : open ( \"data/article1.txt\" , \"r\" ) . read ()}, engine = 'text-ada-001' , max_tokens = 512 , temperature = 0 ) print ( f \"Validated Output: { validated_response } \" ) Validated Output: None We can see the step-wise history of the Guard object below: print ( guard . state . most_recent_call . tree ) Logs \u2514\u2500\u2500 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Step 0 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Prompt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Summarize the following document: \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Section. 1. \u2502 \u2502 \u2502 \u2502 All legislative Powers herein granted shall be vested in a Congress of the United States, which shall \u2502 \u2502 \u2502 \u2502 consist of a Senate and House of Representatives. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Section. 2. \u2502 \u2502 \u2502 \u2502 The House of Representatives shall be composed of Members chosen every second Year by the People of the \u2502 \u2502 \u2502 \u2502 several States, and the Electors in each State shall have the Qualifications requisite for Electors of \u2502 \u2502 \u2502 \u2502 the most numerous Branch of the State Legislature. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 No Person shall be a Representative who shall not have attained to the Age of twenty five Years, and \u2502 \u2502 \u2502 \u2502 been seven Years a Citizen of the United States, and who shall not, when elected, be an Inhabitant of \u2502 \u2502 \u2502 \u2502 that State in which he shall be chosen. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Representatives and direct Taxes shall be apportioned among the several States which may be included \u2502 \u2502 \u2502 \u2502 within this Union, according to their respective Numbers, which shall be determined by adding to the \u2502 \u2502 \u2502 \u2502 whole Number of free Persons, including those bound to Service for a Term of Years, and excluding \u2502 \u2502 \u2502 \u2502 Indians not taxed, three fifths of all other Persons. The actual Enumeration shall be made within three \u2502 \u2502 \u2502 \u2502 Years after the first Meeting of the Congress of the United States, and within every subsequent Term of \u2502 \u2502 \u2502 \u2502 ten Years, in such Manner as they shall by Law direct. The Number of Representatives shall not exceed \u2502 \u2502 \u2502 \u2502 one for every thirty Thousand, but each State shall have at Least one Representative; and until such \u2502 \u2502 \u2502 \u2502 enumeration shall be made, the State of New Hampshire shall be entitled to chuse three, Massachusetts \u2502 \u2502 \u2502 \u2502 eight, Rhode-Island and Providence Plantations one, Connecticut five, New-York six, New Jersey four, \u2502 \u2502 \u2502 \u2502 Pennsylvania eight, Delaware one, Maryland six, Virginia ten, North Carolina five, South Carolina five, \u2502 \u2502 \u2502 \u2502 and Georgia three. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 When vacancies happen in the Representation from any State, the Executive Authority thereof shall issue \u2502 \u2502 \u2502 \u2502 Writs of Election to fill such Vacancies. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 The House of Representatives shall chuse their Speaker and other Officers; and shall have the sole \u2502 \u2502 \u2502 \u2502 Power of Impeachment. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Given below is XML that describes the information to extract from this document and the tags to extract \u2502 \u2502 \u2502 \u2502 it into. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 <output> \u2502 \u2502 \u2502 \u2502 <string name=\"summary\" description=\"Summarize the given document faithfully.\"/> \u2502 \u2502 \u2502 \u2502 </output> \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 ONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the \u2502 \u2502 \u2502 \u2502 `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding \u2502 \u2502 \u2502 \u2502 XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. \u2502 \u2502 \u2502 \u2502 requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere, \u2502 \u2502 \u2502 \u2502 enter `None`. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Here are examples of simple (XML, JSON) pairs that show the expected behavior: \u2502 \u2502 \u2502 \u2502 - `<string name='foo' format='two-words lower-case' />` => `{'foo': 'example one'}` \u2502 \u2502 \u2502 \u2502 - `<list name='bar'><string format='upper-case' /></list>` => `{\"bar\": ['STRING ONE', 'STRING TWO', \u2502 \u2502 \u2502 \u2502 etc.]}` \u2502 \u2502 \u2502 \u2502 - `<object name='baz'><string name=\"foo\" format=\"capitalize two-words\" /><integer name=\"index\" \u2502 \u2502 \u2502 \u2502 format=\"1-indexed\" /></object>` => `{'baz': {'foo': 'Some String', 'index': 1}}` \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 JSON Object: \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Raw LLM Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 The string \"None`\" is removed from the list \"baz\" in the example above. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 The object \"baz\" is created with the value \"Some String\" which is set to \"{'foo': 'Some String', \u2502 \u2502 \u2502 \u2502 'index': 1}\". \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Validated Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 None \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"Check key info present in generated summary"},{"location":"examples/text_summarization_quality/#summarize-text-accurately","text":"Note To download this example as a Jupyter notebook, click here . In this example, we will use Guardrails in the summarization of a text document. We will check whether the summarized document has a high semantic similarity with the original document.","title":"Summarize text accurately"},{"location":"examples/text_summarization_quality/#objective","text":"Summarize a text document and check whether the summarized document has a high semantic similarity with the original document.","title":"Objective"},{"location":"examples/text_summarization_quality/#step-0-setup","text":"In order to run this example, you will need to install the numpy package. You can do so by running the following commands: ! pip install numpy Requirement already satisfied: numpy in /Users/krandiash/opt/anaconda3/envs/guardrails/lib/python3.9/site-packages (1.24.2)","title":"Step 0: Setup"},{"location":"examples/text_summarization_quality/#step-1-create-the-rail-spec","text":"Ordinarily, we would create an RAIL spec in a separate file. For the purposes of this example, we will create the spec in this notebook as a string following the RAIL syntax. For more information on RAIL, see the RAIL documentation . In this RAIL spec, we: Create an output schema that returns a single key-value pair. The key should be 'summary', and the value should be the summary of the given document. rail_str = \"\"\" <rail version=\"0.1\"> <script language='python'> document = open(\"data/article1.txt\", \"r\").read() </script> <output> <string name=\"summary\" description=\"Summarize the given document faithfully.\" format=\"similar-to-document: {document} , 0.60\" on-fail-similar-to-document=\"filter\" /> </output> <prompt> Summarize the following document: {{document}} @complete_json_suffix </prompt> </rail> \"\"\" Note In order to ensure the summary is similar to the document, we use similar-to-document as the validator. This validator embeds the document and the summary and checks whether the cosine similarity between the two embeddings is above a threshold.","title":"Step 1: Create the RAIL Spec"},{"location":"examples/text_summarization_quality/#step-2-create-a-guard-object-with-the-rail-spec","text":"We create a gd.Guard object that will check, validate and correct the output of the LLM. This object: Enforces the quality criteria specified in the RAIL spec. Takes corrective action when the quality criteria are not met. Compiles the schema and type info from the RAIL spec and adds it to the prompt. import guardrails as gd from rich import print guard = gd . Guard . from_rail_string ( rail_str ) We see the prompt that will be sent to the LLM: print ( guard . base_prompt ) Summarize the following document: { document } Given below is XML that describes the information to extract from this document and the tags to extract it into. < output > <string name = \"summary\" description = \"Summarize the given document faithfully.\" / > < / output > ONLY return a valid JSON object ( no other text is necessary ) , where the key of the field in JSON is the `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere, enter ` None `. Here are examples of simple ( XML, JSON ) pairs that show the expected behavior: - `<string name = 'foo' format = 'two-words lower-case' / >` => ` {{ 'foo' : 'example one' }} ` - `<list name = 'bar' ><string format = 'upper-case' / >< / list >` => ` {{ \"bar\" : [ 'STRING ONE' , 'STRING TWO' , etc. ]}} ` - `<object name = 'baz' ><string name = \"foo\" format = \"capitalize two-words\" / ><integer name = \"index\" format = \"1-indexed\" / >< / object >` = > ` {{ 'baz' : {{ 'foo' : 'Some String' , 'index' : 1 }}}} ` JSON Object: Here, statement_to_be_translated is the the statement and will be provided by the user at runtime.","title":"Step 2: Create a Guard object with the RAIL Spec"},{"location":"examples/text_summarization_quality/#step-3-wrap-the-llm-api-call-with-guard","text":"First, let's try translating a statement that doesn't have any profanity in it. import openai raw_llm_response , validated_response = guard ( openai . Completion . create , prompt_params = { 'document' : open ( \"data/article1.txt\" , \"r\" ) . read ()}, engine = 'text-davinci-003' , max_tokens = 2048 , temperature = 0 ) print ( f \"Validated Output: { validated_response } \" ) /Users/shreyarajpal/anaconda3/envs/tiff-env/lib/python3.9/site-packages/eliot/json.py:22: FutureWarning: In the future `np.bool` will be defined as the corresponding NumPy scalar. (This may have returned Python scalars in past versions. if isinstance(o, (numpy.bool, numpy.bool_)): Validated Output: { 'summary' : 'All legislative powers are vested in a Congress of the United States, which consists of a Senate and House of Representatives. The House of Representatives is composed of members chosen every two years by the people of the several states, and must meet certain qualifications. Representatives and direct taxes are apportioned among the states according to their respective numbers. The House of Representatives chooses their speaker and other officers, and has the sole power of impeachment. When vacancies happen in the representation from any state, the executive authority thereof shall issue writs of election to fill such vacancies.' } In order to see a detailed look into the logs of the Guard object, we can print the Guard state history: print ( guard . state . most_recent_call . tree ) Logs \u2514\u2500\u2500 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Step 0 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Prompt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Summarize the following document: \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Section. 1. \u2502 \u2502 \u2502 \u2502 All legislative Powers herein granted shall be vested in a Congress of the United States, which shall \u2502 \u2502 \u2502 \u2502 consist of a Senate and House of Representatives. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Section. 2. \u2502 \u2502 \u2502 \u2502 The House of Representatives shall be composed of Members chosen every second Year by the People of the \u2502 \u2502 \u2502 \u2502 several States, and the Electors in each State shall have the Qualifications requisite for Electors of \u2502 \u2502 \u2502 \u2502 the most numerous Branch of the State Legislature. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 No Person shall be a Representative who shall not have attained to the Age of twenty five Years, and \u2502 \u2502 \u2502 \u2502 been seven Years a Citizen of the United States, and who shall not, when elected, be an Inhabitant of \u2502 \u2502 \u2502 \u2502 that State in which he shall be chosen. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Representatives and direct Taxes shall be apportioned among the several States which may be included \u2502 \u2502 \u2502 \u2502 within this Union, according to their respective Numbers, which shall be determined by adding to the \u2502 \u2502 \u2502 \u2502 whole Number of free Persons, including those bound to Service for a Term of Years, and excluding \u2502 \u2502 \u2502 \u2502 Indians not taxed, three fifths of all other Persons. The actual Enumeration shall be made within three \u2502 \u2502 \u2502 \u2502 Years after the first Meeting of the Congress of the United States, and within every subsequent Term of \u2502 \u2502 \u2502 \u2502 ten Years, in such Manner as they shall by Law direct. The Number of Representatives shall not exceed \u2502 \u2502 \u2502 \u2502 one for every thirty Thousand, but each State shall have at Least one Representative; and until such \u2502 \u2502 \u2502 \u2502 enumeration shall be made, the State of New Hampshire shall be entitled to chuse three, Massachusetts \u2502 \u2502 \u2502 \u2502 eight, Rhode-Island and Providence Plantations one, Connecticut five, New-York six, New Jersey four, \u2502 \u2502 \u2502 \u2502 Pennsylvania eight, Delaware one, Maryland six, Virginia ten, North Carolina five, South Carolina five, \u2502 \u2502 \u2502 \u2502 and Georgia three. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 When vacancies happen in the Representation from any State, the Executive Authority thereof shall issue \u2502 \u2502 \u2502 \u2502 Writs of Election to fill such Vacancies. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 The House of Representatives shall chuse their Speaker and other Officers; and shall have the sole \u2502 \u2502 \u2502 \u2502 Power of Impeachment. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Given below is XML that describes the information to extract from this document and the tags to extract \u2502 \u2502 \u2502 \u2502 it into. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 <output> \u2502 \u2502 \u2502 \u2502 <string name=\"summary\" description=\"Summarize the given document faithfully.\"/> \u2502 \u2502 \u2502 \u2502 </output> \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 ONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the \u2502 \u2502 \u2502 \u2502 `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding \u2502 \u2502 \u2502 \u2502 XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. \u2502 \u2502 \u2502 \u2502 requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere, \u2502 \u2502 \u2502 \u2502 enter `None`. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Here are examples of simple (XML, JSON) pairs that show the expected behavior: \u2502 \u2502 \u2502 \u2502 - `<string name='foo' format='two-words lower-case' />` => `{'foo': 'example one'}` \u2502 \u2502 \u2502 \u2502 - `<list name='bar'><string format='upper-case' /></list>` => `{\"bar\": ['STRING ONE', 'STRING TWO', \u2502 \u2502 \u2502 \u2502 etc.]}` \u2502 \u2502 \u2502 \u2502 - `<object name='baz'><string name=\"foo\" format=\"capitalize two-words\" /><integer name=\"index\" \u2502 \u2502 \u2502 \u2502 format=\"1-indexed\" /></object>` => `{'baz': {'foo': 'Some String', 'index': 1}}` \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 JSON Object: \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Raw LLM Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 {\"summary\": \"All legislative powers are vested in a Congress of the United States, which consists of a \u2502 \u2502 \u2502 \u2502 Senate and House of Representatives. The House of Representatives is composed of members chosen every \u2502 \u2502 \u2502 \u2502 two years by the people of the several states, and must meet certain qualifications. Representatives \u2502 \u2502 \u2502 \u2502 and direct taxes are apportioned among the states according to their respective numbers. The House of \u2502 \u2502 \u2502 \u2502 Representatives chooses their speaker and other officers, and has the sole power of impeachment. When \u2502 \u2502 \u2502 \u2502 vacancies happen in the representation from any state, the executive authority thereof shall issue \u2502 \u2502 \u2502 \u2502 writs of election to fill such vacancies.\"} \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Validated Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 { \u2502 \u2502 \u2502 \u2502 'summary': 'All legislative powers are vested in a Congress of the United States, which consists of \u2502 \u2502 \u2502 \u2502 a Senate and House of Representatives. The House of Representatives is composed of members chosen every \u2502 \u2502 \u2502 \u2502 two years by the people of the several states, and must meet certain qualifications. Representatives \u2502 \u2502 \u2502 \u2502 and direct taxes are apportioned among the states according to their respective numbers. The House of \u2502 \u2502 \u2502 \u2502 Representatives chooses their speaker and other officers, and has the sole power of impeachment. When \u2502 \u2502 \u2502 \u2502 vacancies happen in the representation from any state, the executive authority thereof shall issue \u2502 \u2502 \u2502 \u2502 writs of election to fill such vacancies.' \u2502 \u2502 \u2502 \u2502 } \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f The guard wrapper returns the raw_llm_respose (which is a simple string), and the validated and corrected output (which is a dictionary). We can see that the output is a dictionary with the correct schema and types. Next, let's try using a smaller model, which is not boing to be good at summarization. We can see that the output is filtered out. raw_llm_response , validated_response = guard ( openai . Completion . create , prompt_params = { 'document' : open ( \"data/article1.txt\" , \"r\" ) . read ()}, engine = 'text-ada-001' , max_tokens = 512 , temperature = 0 ) print ( f \"Validated Output: { validated_response } \" ) Validated Output: None We can see the step-wise history of the Guard object below: print ( guard . state . most_recent_call . tree ) Logs \u2514\u2500\u2500 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Step 0 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Prompt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Summarize the following document: \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Section. 1. \u2502 \u2502 \u2502 \u2502 All legislative Powers herein granted shall be vested in a Congress of the United States, which shall \u2502 \u2502 \u2502 \u2502 consist of a Senate and House of Representatives. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Section. 2. \u2502 \u2502 \u2502 \u2502 The House of Representatives shall be composed of Members chosen every second Year by the People of the \u2502 \u2502 \u2502 \u2502 several States, and the Electors in each State shall have the Qualifications requisite for Electors of \u2502 \u2502 \u2502 \u2502 the most numerous Branch of the State Legislature. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 No Person shall be a Representative who shall not have attained to the Age of twenty five Years, and \u2502 \u2502 \u2502 \u2502 been seven Years a Citizen of the United States, and who shall not, when elected, be an Inhabitant of \u2502 \u2502 \u2502 \u2502 that State in which he shall be chosen. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Representatives and direct Taxes shall be apportioned among the several States which may be included \u2502 \u2502 \u2502 \u2502 within this Union, according to their respective Numbers, which shall be determined by adding to the \u2502 \u2502 \u2502 \u2502 whole Number of free Persons, including those bound to Service for a Term of Years, and excluding \u2502 \u2502 \u2502 \u2502 Indians not taxed, three fifths of all other Persons. The actual Enumeration shall be made within three \u2502 \u2502 \u2502 \u2502 Years after the first Meeting of the Congress of the United States, and within every subsequent Term of \u2502 \u2502 \u2502 \u2502 ten Years, in such Manner as they shall by Law direct. The Number of Representatives shall not exceed \u2502 \u2502 \u2502 \u2502 one for every thirty Thousand, but each State shall have at Least one Representative; and until such \u2502 \u2502 \u2502 \u2502 enumeration shall be made, the State of New Hampshire shall be entitled to chuse three, Massachusetts \u2502 \u2502 \u2502 \u2502 eight, Rhode-Island and Providence Plantations one, Connecticut five, New-York six, New Jersey four, \u2502 \u2502 \u2502 \u2502 Pennsylvania eight, Delaware one, Maryland six, Virginia ten, North Carolina five, South Carolina five, \u2502 \u2502 \u2502 \u2502 and Georgia three. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 When vacancies happen in the Representation from any State, the Executive Authority thereof shall issue \u2502 \u2502 \u2502 \u2502 Writs of Election to fill such Vacancies. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 The House of Representatives shall chuse their Speaker and other Officers; and shall have the sole \u2502 \u2502 \u2502 \u2502 Power of Impeachment. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Given below is XML that describes the information to extract from this document and the tags to extract \u2502 \u2502 \u2502 \u2502 it into. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 <output> \u2502 \u2502 \u2502 \u2502 <string name=\"summary\" description=\"Summarize the given document faithfully.\"/> \u2502 \u2502 \u2502 \u2502 </output> \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 ONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the \u2502 \u2502 \u2502 \u2502 `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding \u2502 \u2502 \u2502 \u2502 XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. \u2502 \u2502 \u2502 \u2502 requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere, \u2502 \u2502 \u2502 \u2502 enter `None`. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Here are examples of simple (XML, JSON) pairs that show the expected behavior: \u2502 \u2502 \u2502 \u2502 - `<string name='foo' format='two-words lower-case' />` => `{'foo': 'example one'}` \u2502 \u2502 \u2502 \u2502 - `<list name='bar'><string format='upper-case' /></list>` => `{\"bar\": ['STRING ONE', 'STRING TWO', \u2502 \u2502 \u2502 \u2502 etc.]}` \u2502 \u2502 \u2502 \u2502 - `<object name='baz'><string name=\"foo\" format=\"capitalize two-words\" /><integer name=\"index\" \u2502 \u2502 \u2502 \u2502 format=\"1-indexed\" /></object>` => `{'baz': {'foo': 'Some String', 'index': 1}}` \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 JSON Object: \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Raw LLM Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 The string \"None`\" is removed from the list \"baz\" in the example above. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 The object \"baz\" is created with the value \"Some String\" which is set to \"{'foo': 'Some String', \u2502 \u2502 \u2502 \u2502 'index': 1}\". \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Validated Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 None \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"Step 3: Wrap the LLM API call with Guard"},{"location":"examples/translation_to_specific_language/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Translate text without profanities Note To download this example as a Jupyter notebook, click here . In this example, we will use Guardrails during the translation of a statement from another language to english. We will check whether the translated statement passes the profanity check or not. Objective We want to translate a statement from another languages to English and ensure the translated statement is profanity free. Step 0: Setup In order to run this example, you will need to install alt-profanity-check package. You can do so by running the following commands: ! pip install alt - profanity - check Step 1: Create the RAIL Spec Ordinarily, we would create an RAIL spec in a separate file. For the purposes of this example, we will create the spec in this notebook as a string following the RAIL syntax. For more information on RAIL, see the RAIL documentation . In this RAIL spec, we: Create an output schema that returns a single key-value pair. The key should be 'translated_statement', and the value should be the English translation of the given statement. The translated statement should not have any profanity. from profanity_check import predict rail_str = \"\"\" <rail version=\"0.1\"> <script language='python'> from profanity_check import predict from guardrails.validators import Validator, EventDetail, register_validator from typing import Dict, List @register_validator(name=\"is-profanity-free\", data_type=\"string\") class IsProfanityFree(Validator): global predict global EventDetail def validate(self, key, value, schema) -> Dict: text = value prediction = predict([value]) if prediction[0] == 1: raise EventDetail( key, value, schema, f\"Value {value} contains profanity language\", \"\", ) return schema </script> <output> <string name=\"translated_statement\" description=\"Translate the given statement into english language\" format=\"is-profanity-free\" on-fail-is-profanity-free=\"fix\" /> </output> <prompt> Translate the given statement into english language: {{statement_to_be_translated}} @complete_json_suffix </prompt> </rail> \"\"\" Note In order to ensure the translated statement is profanity free, we use is-profanity-free as the validator. This validator uses profanity_check package. Step 2: Create a Guard object with the RAIL Spec We create a gd.Guard object that will check, validate and correct the output of the LLM. This object: Enforces the quality criteria specified in the RAIL spec. Takes corrective action when the quality criteria are not met. Compiles the schema and type info from the RAIL spec and adds it to the prompt. import guardrails as gd from rich import print guard = gd . Guard . from_rail_string ( rail_str ) We see the prompt that will be sent to the LLM: print ( guard . base_prompt ) Translate the given statement into english language: { statement_to_be_translated } Given below is XML that describes the information to extract from this document and the tags to extract it into. < output > <string name = \"translated_statement\" description = \"Translate the given statement into english language\" format = \"is-profanity-free: \" / > < / output > ONLY return a valid JSON object ( no other text is necessary ) , where the key of the field in JSON is the `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere, enter ` None `. Here are examples of simple ( XML, JSON ) pairs that show the expected behavior: - `<string name = 'foo' format = 'two-words lower-case' / >` => ` {{ 'foo' : 'example one' }} ` - `<list name = 'bar' ><string format = 'upper-case' / >< / list >` => ` {{ \"bar\" : [ 'STRING ONE' , 'STRING TWO' , etc. ]}} ` - `<object name = 'baz' ><string name = \"foo\" format = \"capitalize two-words\" / ><integer name = \"index\" format = \"1-indexed\" / >< / object >` = > ` {{ 'baz' : {{ 'foo' : 'Some String' , 'index' : 1 }}}} ` JSON Object: Here, statement_to_be_translated is the the statement and will be provided by the user at runtime. Step 3: Wrap the LLM API call with Guard First, let's try translating a statement that doesn't have any profanity in it. import openai raw_llm_response , validated_response = guard ( openai . Completion . create , prompt_params = { \"statement_to_be_translated\" : \"quesadilla de pollo\" }, engine = \"text-davinci-003\" , max_tokens = 2048 , temperature = 0 , ) print ( f \"Validated Output: { validated_response } \" ) /Users/shreyarajpal/anaconda3/envs/tiff-env/lib/python3.9/site-packages/eliot/json.py:22: FutureWarning: In the future `np.bool` will be defined as the corresponding NumPy scalar. (This may have returned Python scalars in past versions. if isinstance(o, (numpy.bool, numpy.bool_)): Validated Output: { 'translated_statement' : 'Chicken Quesadilla' } We can take a look at the output of the LLM and the validated output using the Guard's internal logs: print ( guard . state . most_recent_call . tree ) Logs \u2514\u2500\u2500 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Step 0 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Prompt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Translate the given statement into english language: \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 quesadilla de pollo \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Given below is XML that describes the information to extract from this document and the tags to extract \u2502 \u2502 \u2502 \u2502 it into. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 <output> \u2502 \u2502 \u2502 \u2502 <string name=\"translated_statement\" description=\"Translate the given statement into english \u2502 \u2502 \u2502 \u2502 language\" format=\"is-profanity-free: \"/> \u2502 \u2502 \u2502 \u2502 </output> \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 ONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the \u2502 \u2502 \u2502 \u2502 `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding \u2502 \u2502 \u2502 \u2502 XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. \u2502 \u2502 \u2502 \u2502 requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere, \u2502 \u2502 \u2502 \u2502 enter `None`. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Here are examples of simple (XML, JSON) pairs that show the expected behavior: \u2502 \u2502 \u2502 \u2502 - `<string name='foo' format='two-words lower-case' />` => `{'foo': 'example one'}` \u2502 \u2502 \u2502 \u2502 - `<list name='bar'><string format='upper-case' /></list>` => `{\"bar\": ['STRING ONE', 'STRING TWO', \u2502 \u2502 \u2502 \u2502 etc.]}` \u2502 \u2502 \u2502 \u2502 - `<object name='baz'><string name=\"foo\" format=\"capitalize two-words\" /><integer name=\"index\" \u2502 \u2502 \u2502 \u2502 format=\"1-indexed\" /></object>` => `{'baz': {'foo': 'Some String', 'index': 1}}` \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 JSON Object: \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Raw LLM Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 {\"translated_statement\": \"Chicken Quesadilla\"} \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Validated Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 {'translated_statement': 'Chicken Quesadilla'} \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f The guard wrapper returns the raw_llm_respose (which is a simple string), and the validated and corrected output (which is a dictionary). We can see that the output is a dictionary with the correct schema and types. Next, let's try translating a statement that has profanity in it. We see that the translated statement has been corrected to return an empty string instead of the translated statement. raw_llm_response , validated_response = guard ( openai . Completion . create , prompt_params = { \"statement_to_be_translated\" : \"\u0443\u0431\u0435\u0439 \u0441\u0435\u0431\u044f\" }, engine = \"text-davinci-003\" , max_tokens = 2048 , temperature = 0 , ) print ( f \"Validated Output: { validated_response } \" ) /Users/shreyarajpal/anaconda3/envs/tiff-env/lib/python3.9/site-packages/eliot/json.py:22: FutureWarning: In the future `np.bool` will be defined as the corresponding NumPy scalar. (This may have returned Python scalars in past versions. if isinstance(o, (numpy.bool, numpy.bool_)): Validated Output: { 'translated_statement' : '' } This time around, when we look at the logs, we can see that the output of the LLM was filtered out because it did not pass the profanity check. print ( guard . state . most_recent_call . tree ) Logs \u2514\u2500\u2500 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Step 0 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Prompt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Translate the given statement into english language: \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u0443\u0431\u0435\u0439 \u0441\u0435\u0431\u044f \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Given below is XML that describes the information to extract from this document and the tags to extract \u2502 \u2502 \u2502 \u2502 it into. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 <output> \u2502 \u2502 \u2502 \u2502 <string name=\"translated_statement\" description=\"Translate the given statement into english \u2502 \u2502 \u2502 \u2502 language\" format=\"is-profanity-free: \"/> \u2502 \u2502 \u2502 \u2502 </output> \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 ONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the \u2502 \u2502 \u2502 \u2502 `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding \u2502 \u2502 \u2502 \u2502 XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. \u2502 \u2502 \u2502 \u2502 requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere, \u2502 \u2502 \u2502 \u2502 enter `None`. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Here are examples of simple (XML, JSON) pairs that show the expected behavior: \u2502 \u2502 \u2502 \u2502 - `<string name='foo' format='two-words lower-case' />` => `{'foo': 'example one'}` \u2502 \u2502 \u2502 \u2502 - `<list name='bar'><string format='upper-case' /></list>` => `{\"bar\": ['STRING ONE', 'STRING TWO', \u2502 \u2502 \u2502 \u2502 etc.]}` \u2502 \u2502 \u2502 \u2502 - `<object name='baz'><string name=\"foo\" format=\"capitalize two-words\" /><integer name=\"index\" \u2502 \u2502 \u2502 \u2502 format=\"1-indexed\" /></object>` => `{'baz': {'foo': 'Some String', 'index': 1}}` \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 JSON Object: \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Raw LLM Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 {\"translated_statement\": \"Kill yourself\"} \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Validated Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 {'translated_statement': ''} \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"Translate text with profanity filtering"},{"location":"examples/translation_to_specific_language/#translate-text-without-profanities","text":"Note To download this example as a Jupyter notebook, click here . In this example, we will use Guardrails during the translation of a statement from another language to english. We will check whether the translated statement passes the profanity check or not.","title":"Translate text without profanities"},{"location":"examples/translation_to_specific_language/#objective","text":"We want to translate a statement from another languages to English and ensure the translated statement is profanity free.","title":"Objective"},{"location":"examples/translation_to_specific_language/#step-0-setup","text":"In order to run this example, you will need to install alt-profanity-check package. You can do so by running the following commands: ! pip install alt - profanity - check","title":"Step 0: Setup"},{"location":"examples/translation_to_specific_language/#step-1-create-the-rail-spec","text":"Ordinarily, we would create an RAIL spec in a separate file. For the purposes of this example, we will create the spec in this notebook as a string following the RAIL syntax. For more information on RAIL, see the RAIL documentation . In this RAIL spec, we: Create an output schema that returns a single key-value pair. The key should be 'translated_statement', and the value should be the English translation of the given statement. The translated statement should not have any profanity. from profanity_check import predict rail_str = \"\"\" <rail version=\"0.1\"> <script language='python'> from profanity_check import predict from guardrails.validators import Validator, EventDetail, register_validator from typing import Dict, List @register_validator(name=\"is-profanity-free\", data_type=\"string\") class IsProfanityFree(Validator): global predict global EventDetail def validate(self, key, value, schema) -> Dict: text = value prediction = predict([value]) if prediction[0] == 1: raise EventDetail( key, value, schema, f\"Value {value} contains profanity language\", \"\", ) return schema </script> <output> <string name=\"translated_statement\" description=\"Translate the given statement into english language\" format=\"is-profanity-free\" on-fail-is-profanity-free=\"fix\" /> </output> <prompt> Translate the given statement into english language: {{statement_to_be_translated}} @complete_json_suffix </prompt> </rail> \"\"\" Note In order to ensure the translated statement is profanity free, we use is-profanity-free as the validator. This validator uses profanity_check package.","title":"Step 1: Create the RAIL Spec"},{"location":"examples/translation_to_specific_language/#step-2-create-a-guard-object-with-the-rail-spec","text":"We create a gd.Guard object that will check, validate and correct the output of the LLM. This object: Enforces the quality criteria specified in the RAIL spec. Takes corrective action when the quality criteria are not met. Compiles the schema and type info from the RAIL spec and adds it to the prompt. import guardrails as gd from rich import print guard = gd . Guard . from_rail_string ( rail_str ) We see the prompt that will be sent to the LLM: print ( guard . base_prompt ) Translate the given statement into english language: { statement_to_be_translated } Given below is XML that describes the information to extract from this document and the tags to extract it into. < output > <string name = \"translated_statement\" description = \"Translate the given statement into english language\" format = \"is-profanity-free: \" / > < / output > ONLY return a valid JSON object ( no other text is necessary ) , where the key of the field in JSON is the `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere, enter ` None `. Here are examples of simple ( XML, JSON ) pairs that show the expected behavior: - `<string name = 'foo' format = 'two-words lower-case' / >` => ` {{ 'foo' : 'example one' }} ` - `<list name = 'bar' ><string format = 'upper-case' / >< / list >` => ` {{ \"bar\" : [ 'STRING ONE' , 'STRING TWO' , etc. ]}} ` - `<object name = 'baz' ><string name = \"foo\" format = \"capitalize two-words\" / ><integer name = \"index\" format = \"1-indexed\" / >< / object >` = > ` {{ 'baz' : {{ 'foo' : 'Some String' , 'index' : 1 }}}} ` JSON Object: Here, statement_to_be_translated is the the statement and will be provided by the user at runtime.","title":"Step 2: Create a Guard object with the RAIL Spec"},{"location":"examples/translation_to_specific_language/#step-3-wrap-the-llm-api-call-with-guard","text":"First, let's try translating a statement that doesn't have any profanity in it. import openai raw_llm_response , validated_response = guard ( openai . Completion . create , prompt_params = { \"statement_to_be_translated\" : \"quesadilla de pollo\" }, engine = \"text-davinci-003\" , max_tokens = 2048 , temperature = 0 , ) print ( f \"Validated Output: { validated_response } \" ) /Users/shreyarajpal/anaconda3/envs/tiff-env/lib/python3.9/site-packages/eliot/json.py:22: FutureWarning: In the future `np.bool` will be defined as the corresponding NumPy scalar. (This may have returned Python scalars in past versions. if isinstance(o, (numpy.bool, numpy.bool_)): Validated Output: { 'translated_statement' : 'Chicken Quesadilla' } We can take a look at the output of the LLM and the validated output using the Guard's internal logs: print ( guard . state . most_recent_call . tree ) Logs \u2514\u2500\u2500 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Step 0 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Prompt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Translate the given statement into english language: \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 quesadilla de pollo \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Given below is XML that describes the information to extract from this document and the tags to extract \u2502 \u2502 \u2502 \u2502 it into. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 <output> \u2502 \u2502 \u2502 \u2502 <string name=\"translated_statement\" description=\"Translate the given statement into english \u2502 \u2502 \u2502 \u2502 language\" format=\"is-profanity-free: \"/> \u2502 \u2502 \u2502 \u2502 </output> \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 ONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the \u2502 \u2502 \u2502 \u2502 `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding \u2502 \u2502 \u2502 \u2502 XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. \u2502 \u2502 \u2502 \u2502 requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere, \u2502 \u2502 \u2502 \u2502 enter `None`. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Here are examples of simple (XML, JSON) pairs that show the expected behavior: \u2502 \u2502 \u2502 \u2502 - `<string name='foo' format='two-words lower-case' />` => `{'foo': 'example one'}` \u2502 \u2502 \u2502 \u2502 - `<list name='bar'><string format='upper-case' /></list>` => `{\"bar\": ['STRING ONE', 'STRING TWO', \u2502 \u2502 \u2502 \u2502 etc.]}` \u2502 \u2502 \u2502 \u2502 - `<object name='baz'><string name=\"foo\" format=\"capitalize two-words\" /><integer name=\"index\" \u2502 \u2502 \u2502 \u2502 format=\"1-indexed\" /></object>` => `{'baz': {'foo': 'Some String', 'index': 1}}` \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 JSON Object: \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Raw LLM Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 {\"translated_statement\": \"Chicken Quesadilla\"} \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Validated Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 {'translated_statement': 'Chicken Quesadilla'} \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f The guard wrapper returns the raw_llm_respose (which is a simple string), and the validated and corrected output (which is a dictionary). We can see that the output is a dictionary with the correct schema and types. Next, let's try translating a statement that has profanity in it. We see that the translated statement has been corrected to return an empty string instead of the translated statement. raw_llm_response , validated_response = guard ( openai . Completion . create , prompt_params = { \"statement_to_be_translated\" : \"\u0443\u0431\u0435\u0439 \u0441\u0435\u0431\u044f\" }, engine = \"text-davinci-003\" , max_tokens = 2048 , temperature = 0 , ) print ( f \"Validated Output: { validated_response } \" ) /Users/shreyarajpal/anaconda3/envs/tiff-env/lib/python3.9/site-packages/eliot/json.py:22: FutureWarning: In the future `np.bool` will be defined as the corresponding NumPy scalar. (This may have returned Python scalars in past versions. if isinstance(o, (numpy.bool, numpy.bool_)): Validated Output: { 'translated_statement' : '' } This time around, when we look at the logs, we can see that the output of the LLM was filtered out because it did not pass the profanity check. print ( guard . state . most_recent_call . tree ) Logs \u2514\u2500\u2500 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Step 0 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Prompt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Translate the given statement into english language: \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u0443\u0431\u0435\u0439 \u0441\u0435\u0431\u044f \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Given below is XML that describes the information to extract from this document and the tags to extract \u2502 \u2502 \u2502 \u2502 it into. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 <output> \u2502 \u2502 \u2502 \u2502 <string name=\"translated_statement\" description=\"Translate the given statement into english \u2502 \u2502 \u2502 \u2502 language\" format=\"is-profanity-free: \"/> \u2502 \u2502 \u2502 \u2502 </output> \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 ONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the \u2502 \u2502 \u2502 \u2502 `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding \u2502 \u2502 \u2502 \u2502 XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. \u2502 \u2502 \u2502 \u2502 requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere, \u2502 \u2502 \u2502 \u2502 enter `None`. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Here are examples of simple (XML, JSON) pairs that show the expected behavior: \u2502 \u2502 \u2502 \u2502 - `<string name='foo' format='two-words lower-case' />` => `{'foo': 'example one'}` \u2502 \u2502 \u2502 \u2502 - `<list name='bar'><string format='upper-case' /></list>` => `{\"bar\": ['STRING ONE', 'STRING TWO', \u2502 \u2502 \u2502 \u2502 etc.]}` \u2502 \u2502 \u2502 \u2502 - `<object name='baz'><string name=\"foo\" format=\"capitalize two-words\" /><integer name=\"index\" \u2502 \u2502 \u2502 \u2502 format=\"1-indexed\" /></object>` => `{'baz': {'foo': 'Some String', 'index': 1}}` \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 JSON Object: \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Raw LLM Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 {\"translated_statement\": \"Kill yourself\"} \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Validated Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 {'translated_statement': ''} \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"Step 3: Wrap the LLM API call with Guard"},{"location":"examples/translation_with_quality_check/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Translate text with quality checks Note To download this example as a Jupyter notebook, click here . In this example, we will use Guardrails during the translation of a statement from another language to English. We will check whether the translated statement is likely high quality or not. Objective We want to translate a statement from another languages to English and ensure that the translated statement accurately reflects the original content. Step 0: Setup To do the quality check, we can use the Critique library, which allows for simple calculation of various metrics over generated text, including translation quality estimation . First you can get an API key from the Inspired Cognition Dashboard add the following line to the \".env\" file in your top directory (like you do for your OpenAI API key). INSPIREDCO_API_KEY = <your_api_key> Then you can install the library ! pip install inspiredco Step 1: Create the RAIL Spec Ordinarily, we would create an RAIL spec in a separate file. For the purposes of this example, we will create the spec in this notebook as a string following the RAIL syntax. For more information on RAIL, see the RAIL documentation . In this RAIL spec, we: Create an output schema that returns a single key-value pair. The key should be 'translated_statement', and the value should be the English translation of the given statement. The translated statement should not have any profanity. from inspiredco import critique rail_str = \"\"\" <rail version=\"0.1\"> <script language='python'> import inspiredco.critique import os from guardrails.validators import Validator, EventDetail, register_validator critique = inspiredco.critique.Critique(api_key=os.environ['INSPIREDCO_API_KEY']) from typing import Dict, List @register_validator(name=\"is-high-quality-translation\", data_type=\"string\") class IsHighQualityTranslation(Validator): global critique global EventDetail def validate(self, key, value, schema) -> Dict: prediction = critique.evaluate( metric = \"comet\", config = {\"model\": \"unbabel_comet/wmt21-comet-qe-da\"}, dataset = [{\"source\": key, \"target\": value}], ) quality = prediction[\"examples\"][0][\"value\"] if quality &lt; -0.1: raise EventDetail( key, value, schema, f\"Value {value} has relatively low quality {quality} \", \"\", ) return schema </script> <output> <string name=\"translated_statement\" description=\"Translate the given statement into the English language\" format=\"is-high-quality-translation\" on-fail-is-high-quality-translation=\"fix\" /> </output> <prompt> Translate the given statement into the English language: {{statement_to_be_translated}} @complete_json_suffix </prompt> </rail> \"\"\" Note In order to ensure the translated statement is high quality, we use is-high-quality-translation as the validator. This validator uses inspiredco package. Step 2: Create a Guard object with the RAIL Spec We create a gd.Guard object that will check, validate and correct the output of the LLM. This object: Enforces the quality criteria specified in the RAIL spec. Takes corrective action when the quality criteria are not met. Compiles the schema and type info from the RAIL spec and adds it to the prompt. import guardrails as gd from rich import print guard = gd . Guard . from_rail_string ( rail_str ) We see the prompt that will be sent to the LLM: print ( guard . base_prompt ) Translate the given statement into the English language: { statement_to_be_translated } Given below is XML that describes the information to extract from this document and the tags to extract it into. < output > <string name = \"translated_statement\" description = \"Translate the given statement into the English language\" format = \"is-high-quality-translation: \" / > < / output > ONLY return a valid JSON object ( no other text is necessary ) , where the key of the field in JSON is the `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere, enter ` None `. Here are examples of simple ( XML, JSON ) pairs that show the expected behavior: - `<string name = 'foo' format = 'two-words lower-case' / >` => ` {{ 'foo' : 'example one' }} ` - `<list name = 'bar' ><string format = 'upper-case' / >< / list >` => ` {{ \"bar\" : [ 'STRING ONE' , 'STRING TWO' , etc. ]}} ` - `<object name = 'baz' ><string name = \"foo\" format = \"capitalize two-words\" / ><integer name = \"index\" format = \"1-indexed\" / >< / object >` = > ` {{ 'baz' : {{ 'foo' : 'Some String' , 'index' : 1 }}}} ` JSON Object: Here, statement_to_be_translated is the the statement and will be provided by the user at runtime. Step 3: Wrap the LLM API call with Guard First, let's try translating a statement that is relatively easy to translate. import openai raw_llm_response , validated_response = guard ( openai . Completion . create , prompt_params = { 'statement_to_be_translated' : '\u3053\u308c\u306f\u7c21\u5358\u306b\u7ffb\u8a33\u3067\u304d\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u3002' }, engine = 'text-davinci-003' , max_tokens = 2048 , temperature = 0 ) print ( f \"Validated Output: { validated_response } \" ) /Users/shreyarajpal/anaconda3/envs/tiff-env/lib/python3.9/site-packages/eliot/json.py:22: FutureWarning: In the future `np.bool` will be defined as the corresponding NumPy scalar. (This may have returned Python scalars in past versions. if isinstance(o, (numpy.bool, numpy.bool_)): Validated Output: { 'translated_statement' : 'This may be easy to translate.' } We can look at the logs to see the quality check results: print ( guard . state . most_recent_call . tree ) Logs \u2514\u2500\u2500 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Step 0 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Prompt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Translate the given statement into the English language: \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u3053\u308c\u306f\u7c21\u5358\u306b\u7ffb\u8a33\u3067\u304d\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u3002 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Given below is XML that describes the information to extract from this document and the tags to extract \u2502 \u2502 \u2502 \u2502 it into. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 <output> \u2502 \u2502 \u2502 \u2502 <string name=\"translated_statement\" description=\"Translate the given statement into the English \u2502 \u2502 \u2502 \u2502 language\" format=\"is-high-quality-translation: \"/> \u2502 \u2502 \u2502 \u2502 </output> \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 ONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the \u2502 \u2502 \u2502 \u2502 `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding \u2502 \u2502 \u2502 \u2502 XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. \u2502 \u2502 \u2502 \u2502 requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere, \u2502 \u2502 \u2502 \u2502 enter `None`. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Here are examples of simple (XML, JSON) pairs that show the expected behavior: \u2502 \u2502 \u2502 \u2502 - `<string name='foo' format='two-words lower-case' />` => `{'foo': 'example one'}` \u2502 \u2502 \u2502 \u2502 - `<list name='bar'><string format='upper-case' /></list>` => `{\"bar\": ['STRING ONE', 'STRING TWO', \u2502 \u2502 \u2502 \u2502 etc.]}` \u2502 \u2502 \u2502 \u2502 - `<object name='baz'><string name=\"foo\" format=\"capitalize two-words\" /><integer name=\"index\" \u2502 \u2502 \u2502 \u2502 format=\"1-indexed\" /></object>` => `{'baz': {'foo': 'Some String', 'index': 1}}` \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 JSON Object: \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Raw LLM Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 {\"translated_statement\": \"This may be easy to translate.\"} \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Validated Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 {'translated_statement': 'This may be easy to translate.'} \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f The guard wrapper returns the raw_llm_respose (which is a simple string), and the validated and corrected output (which is a dictionary). We can see that the output is a dictionary with the correct schema and types. Next, let's try translating a statement that is harder to translate (because it contains some difficult-to-translate slang words). We see that the translated statement has been corrected to return an empty string instead of the translated statement. raw_llm_response , validated_response = guard ( openai . Completion . create , prompt_params = { 'statement_to_be_translated' : '\u30c9\u30f3\u5f15\u304d\u3059\u308b\u307b\u3069\u7ffb\u8a33\u304c\u60aa\u3044\u3002' }, engine = 'text-davinci-003' , max_tokens = 2048 , temperature = 0 ) print ( f \"Validated Output: { validated_response } \" ) /Users/shreyarajpal/anaconda3/envs/tiff-env/lib/python3.9/site-packages/eliot/json.py:22: FutureWarning: In the future `np.bool` will be defined as the corresponding NumPy scalar. (This may have returned Python scalars in past versions. if isinstance(o, (numpy.bool, numpy.bool_)): Validated Output: { 'translated_statement' : '' } This time, we see that the quality check failed in the logs, and the translated statement is an empty string. print ( guard . state . most_recent_call . tree ) Logs \u2514\u2500\u2500 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Step 0 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Prompt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Translate the given statement into the English language: \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u30c9\u30f3\u5f15\u304d\u3059\u308b\u307b\u3069\u7ffb\u8a33\u304c\u60aa\u3044\u3002 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Given below is XML that describes the information to extract from this document and the tags to extract \u2502 \u2502 \u2502 \u2502 it into. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 <output> \u2502 \u2502 \u2502 \u2502 <string name=\"translated_statement\" description=\"Translate the given statement into the English \u2502 \u2502 \u2502 \u2502 language\" format=\"is-high-quality-translation: \"/> \u2502 \u2502 \u2502 \u2502 </output> \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 ONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the \u2502 \u2502 \u2502 \u2502 `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding \u2502 \u2502 \u2502 \u2502 XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. \u2502 \u2502 \u2502 \u2502 requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere, \u2502 \u2502 \u2502 \u2502 enter `None`. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Here are examples of simple (XML, JSON) pairs that show the expected behavior: \u2502 \u2502 \u2502 \u2502 - `<string name='foo' format='two-words lower-case' />` => `{'foo': 'example one'}` \u2502 \u2502 \u2502 \u2502 - `<list name='bar'><string format='upper-case' /></list>` => `{\"bar\": ['STRING ONE', 'STRING TWO', \u2502 \u2502 \u2502 \u2502 etc.]}` \u2502 \u2502 \u2502 \u2502 - `<object name='baz'><string name=\"foo\" format=\"capitalize two-words\" /><integer name=\"index\" \u2502 \u2502 \u2502 \u2502 format=\"1-indexed\" /></object>` => `{'baz': {'foo': 'Some String', 'index': 1}}` \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 JSON Object: \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Raw LLM Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 {\"translated_statement\": \"It's so bad that it's a letdown.\"} \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Validated Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 {'translated_statement': ''} \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"Ensure translated text is high quality"},{"location":"examples/translation_with_quality_check/#translate-text-with-quality-checks","text":"Note To download this example as a Jupyter notebook, click here . In this example, we will use Guardrails during the translation of a statement from another language to English. We will check whether the translated statement is likely high quality or not.","title":"Translate text with quality checks"},{"location":"examples/translation_with_quality_check/#objective","text":"We want to translate a statement from another languages to English and ensure that the translated statement accurately reflects the original content.","title":"Objective"},{"location":"examples/translation_with_quality_check/#step-0-setup","text":"To do the quality check, we can use the Critique library, which allows for simple calculation of various metrics over generated text, including translation quality estimation . First you can get an API key from the Inspired Cognition Dashboard add the following line to the \".env\" file in your top directory (like you do for your OpenAI API key). INSPIREDCO_API_KEY = <your_api_key> Then you can install the library ! pip install inspiredco","title":"Step 0: Setup"},{"location":"examples/translation_with_quality_check/#step-1-create-the-rail-spec","text":"Ordinarily, we would create an RAIL spec in a separate file. For the purposes of this example, we will create the spec in this notebook as a string following the RAIL syntax. For more information on RAIL, see the RAIL documentation . In this RAIL spec, we: Create an output schema that returns a single key-value pair. The key should be 'translated_statement', and the value should be the English translation of the given statement. The translated statement should not have any profanity. from inspiredco import critique rail_str = \"\"\" <rail version=\"0.1\"> <script language='python'> import inspiredco.critique import os from guardrails.validators import Validator, EventDetail, register_validator critique = inspiredco.critique.Critique(api_key=os.environ['INSPIREDCO_API_KEY']) from typing import Dict, List @register_validator(name=\"is-high-quality-translation\", data_type=\"string\") class IsHighQualityTranslation(Validator): global critique global EventDetail def validate(self, key, value, schema) -> Dict: prediction = critique.evaluate( metric = \"comet\", config = {\"model\": \"unbabel_comet/wmt21-comet-qe-da\"}, dataset = [{\"source\": key, \"target\": value}], ) quality = prediction[\"examples\"][0][\"value\"] if quality &lt; -0.1: raise EventDetail( key, value, schema, f\"Value {value} has relatively low quality {quality} \", \"\", ) return schema </script> <output> <string name=\"translated_statement\" description=\"Translate the given statement into the English language\" format=\"is-high-quality-translation\" on-fail-is-high-quality-translation=\"fix\" /> </output> <prompt> Translate the given statement into the English language: {{statement_to_be_translated}} @complete_json_suffix </prompt> </rail> \"\"\" Note In order to ensure the translated statement is high quality, we use is-high-quality-translation as the validator. This validator uses inspiredco package.","title":"Step 1: Create the RAIL Spec"},{"location":"examples/translation_with_quality_check/#step-2-create-a-guard-object-with-the-rail-spec","text":"We create a gd.Guard object that will check, validate and correct the output of the LLM. This object: Enforces the quality criteria specified in the RAIL spec. Takes corrective action when the quality criteria are not met. Compiles the schema and type info from the RAIL spec and adds it to the prompt. import guardrails as gd from rich import print guard = gd . Guard . from_rail_string ( rail_str ) We see the prompt that will be sent to the LLM: print ( guard . base_prompt ) Translate the given statement into the English language: { statement_to_be_translated } Given below is XML that describes the information to extract from this document and the tags to extract it into. < output > <string name = \"translated_statement\" description = \"Translate the given statement into the English language\" format = \"is-high-quality-translation: \" / > < / output > ONLY return a valid JSON object ( no other text is necessary ) , where the key of the field in JSON is the `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere, enter ` None `. Here are examples of simple ( XML, JSON ) pairs that show the expected behavior: - `<string name = 'foo' format = 'two-words lower-case' / >` => ` {{ 'foo' : 'example one' }} ` - `<list name = 'bar' ><string format = 'upper-case' / >< / list >` => ` {{ \"bar\" : [ 'STRING ONE' , 'STRING TWO' , etc. ]}} ` - `<object name = 'baz' ><string name = \"foo\" format = \"capitalize two-words\" / ><integer name = \"index\" format = \"1-indexed\" / >< / object >` = > ` {{ 'baz' : {{ 'foo' : 'Some String' , 'index' : 1 }}}} ` JSON Object: Here, statement_to_be_translated is the the statement and will be provided by the user at runtime.","title":"Step 2: Create a Guard object with the RAIL Spec"},{"location":"examples/translation_with_quality_check/#step-3-wrap-the-llm-api-call-with-guard","text":"First, let's try translating a statement that is relatively easy to translate. import openai raw_llm_response , validated_response = guard ( openai . Completion . create , prompt_params = { 'statement_to_be_translated' : '\u3053\u308c\u306f\u7c21\u5358\u306b\u7ffb\u8a33\u3067\u304d\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u3002' }, engine = 'text-davinci-003' , max_tokens = 2048 , temperature = 0 ) print ( f \"Validated Output: { validated_response } \" ) /Users/shreyarajpal/anaconda3/envs/tiff-env/lib/python3.9/site-packages/eliot/json.py:22: FutureWarning: In the future `np.bool` will be defined as the corresponding NumPy scalar. (This may have returned Python scalars in past versions. if isinstance(o, (numpy.bool, numpy.bool_)): Validated Output: { 'translated_statement' : 'This may be easy to translate.' } We can look at the logs to see the quality check results: print ( guard . state . most_recent_call . tree ) Logs \u2514\u2500\u2500 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Step 0 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Prompt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Translate the given statement into the English language: \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u3053\u308c\u306f\u7c21\u5358\u306b\u7ffb\u8a33\u3067\u304d\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u3002 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Given below is XML that describes the information to extract from this document and the tags to extract \u2502 \u2502 \u2502 \u2502 it into. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 <output> \u2502 \u2502 \u2502 \u2502 <string name=\"translated_statement\" description=\"Translate the given statement into the English \u2502 \u2502 \u2502 \u2502 language\" format=\"is-high-quality-translation: \"/> \u2502 \u2502 \u2502 \u2502 </output> \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 ONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the \u2502 \u2502 \u2502 \u2502 `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding \u2502 \u2502 \u2502 \u2502 XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. \u2502 \u2502 \u2502 \u2502 requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere, \u2502 \u2502 \u2502 \u2502 enter `None`. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Here are examples of simple (XML, JSON) pairs that show the expected behavior: \u2502 \u2502 \u2502 \u2502 - `<string name='foo' format='two-words lower-case' />` => `{'foo': 'example one'}` \u2502 \u2502 \u2502 \u2502 - `<list name='bar'><string format='upper-case' /></list>` => `{\"bar\": ['STRING ONE', 'STRING TWO', \u2502 \u2502 \u2502 \u2502 etc.]}` \u2502 \u2502 \u2502 \u2502 - `<object name='baz'><string name=\"foo\" format=\"capitalize two-words\" /><integer name=\"index\" \u2502 \u2502 \u2502 \u2502 format=\"1-indexed\" /></object>` => `{'baz': {'foo': 'Some String', 'index': 1}}` \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 JSON Object: \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Raw LLM Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 {\"translated_statement\": \"This may be easy to translate.\"} \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Validated Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 {'translated_statement': 'This may be easy to translate.'} \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f The guard wrapper returns the raw_llm_respose (which is a simple string), and the validated and corrected output (which is a dictionary). We can see that the output is a dictionary with the correct schema and types. Next, let's try translating a statement that is harder to translate (because it contains some difficult-to-translate slang words). We see that the translated statement has been corrected to return an empty string instead of the translated statement. raw_llm_response , validated_response = guard ( openai . Completion . create , prompt_params = { 'statement_to_be_translated' : '\u30c9\u30f3\u5f15\u304d\u3059\u308b\u307b\u3069\u7ffb\u8a33\u304c\u60aa\u3044\u3002' }, engine = 'text-davinci-003' , max_tokens = 2048 , temperature = 0 ) print ( f \"Validated Output: { validated_response } \" ) /Users/shreyarajpal/anaconda3/envs/tiff-env/lib/python3.9/site-packages/eliot/json.py:22: FutureWarning: In the future `np.bool` will be defined as the corresponding NumPy scalar. (This may have returned Python scalars in past versions. if isinstance(o, (numpy.bool, numpy.bool_)): Validated Output: { 'translated_statement' : '' } This time, we see that the quality check failed in the logs, and the translated statement is an empty string. print ( guard . state . most_recent_call . tree ) Logs \u2514\u2500\u2500 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Step 0 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Prompt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Translate the given statement into the English language: \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u30c9\u30f3\u5f15\u304d\u3059\u308b\u307b\u3069\u7ffb\u8a33\u304c\u60aa\u3044\u3002 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Given below is XML that describes the information to extract from this document and the tags to extract \u2502 \u2502 \u2502 \u2502 it into. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 <output> \u2502 \u2502 \u2502 \u2502 <string name=\"translated_statement\" description=\"Translate the given statement into the English \u2502 \u2502 \u2502 \u2502 language\" format=\"is-high-quality-translation: \"/> \u2502 \u2502 \u2502 \u2502 </output> \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 ONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the \u2502 \u2502 \u2502 \u2502 `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding \u2502 \u2502 \u2502 \u2502 XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. \u2502 \u2502 \u2502 \u2502 requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere, \u2502 \u2502 \u2502 \u2502 enter `None`. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Here are examples of simple (XML, JSON) pairs that show the expected behavior: \u2502 \u2502 \u2502 \u2502 - `<string name='foo' format='two-words lower-case' />` => `{'foo': 'example one'}` \u2502 \u2502 \u2502 \u2502 - `<list name='bar'><string format='upper-case' /></list>` => `{\"bar\": ['STRING ONE', 'STRING TWO', \u2502 \u2502 \u2502 \u2502 etc.]}` \u2502 \u2502 \u2502 \u2502 - `<object name='baz'><string name=\"foo\" format=\"capitalize two-words\" /><integer name=\"index\" \u2502 \u2502 \u2502 \u2502 format=\"1-indexed\" /></object>` => `{'baz': {'foo': 'Some String', 'index': 1}}` \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 JSON Object: \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Raw LLM Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 {\"translated_statement\": \"It's so bad that it's a letdown.\"} \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Validated Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 {'translated_statement': ''} \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"Step 3: Wrap the LLM API call with Guard"},{"location":"examples/valid_chess_moves/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Playing Valid Chess Moves Note To download this example as a Jupyter notebook, click here . Warning This example is currently under development (it cannot be used to play a full chess game yet). In this example, we will use Guardrails to play chess with an LLM and ensure that it makes valid moves. Objective We want to generate a valid chess moves for a given board state. import guardrails as gd from rich import print ! pip install chess Step 1: Create the RAIL Spec Ordinarily, we would create an RAIL spec in a separate file. For the purposes of this example, we will create the spec in this notebook as a string following the RAIL syntax. For more information on RAIL, see the RAIL documentation . Here, we request: rail_str = \"\"\" <rail version=\"0.1\"> <script language='python'> from dataclasses import dataclass from guardrails.validators import Validator, EventDetail, register_validator import re from typing import Dict, List import chess BOARD = chess.Board() @register_validator(name=\"is-valid-chess-move\", data_type=\"string\") class IsValidChessMove(Validator): board = BOARD def validate(self, key, value, schema) -> Dict: global BOARD try: # Push the move onto the board. BOARD.push_san(value) except Exception as e: # If the move is invalid, raise an error. raise EventDetail( key, value, schema, f\"Value {value} is not a valid chess move. {e} \", None, ) return schema </script> <output> <string description=\"A move in standard algebraic notation.\" name=\"move\" required=\"true\" format=\"is-valid-chess-move\" on-fail-is-valid-chess-move=\"reask\" /> </output> <prompt> Generate a move for the chess board. The board is currently in the following state: {{board_state}} @complete_json_suffix </prompt> </rail> \"\"\" Step 2: Create a Guard object with the RAIL Spec We create a gd.Guard object that will check, validate and correct the output of the LLM. This object: Enforces the quality criteria specified in the RAIL spec. Takes corrective action when the quality criteria are not met. Compiles the schema and type info from the RAIL spec and adds it to the prompt. guard = gd . Guard . from_rail_string ( rail_str ) We see the prompt that will be sent to the LLM. The {board_state} is substituted with the current state of the board. print ( guard . base_prompt ) Generate a move for the chess board. The board is currently in the following state: { board_state } Given below is XML that describes the information to extract from this document and the tags to extract it into. < output > <string description = \"A move in standard algebraic notation.\" name = \"move\" required = \"true\" format = \"is-valid-chess-move\" / > < / output > ONLY return a valid JSON object ( no other text is necessary ) , where the key of the field in JSON is the `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere, enter ` None `. Here are examples of simple ( XML, JSON ) pairs that show the expected behavior: - `<string name = 'foo' format = 'two-words lower-case' / >` => ` {{ 'foo' : 'example one' }} ` - `<list name = 'bar' ><string format = 'upper-case' / >< / list >` => ` {{ \"bar\" : [ 'STRING ONE' , 'STRING TWO' , etc. ]}} ` - `<object name = 'baz' ><string name = \"foo\" format = \"capitalize two-words\" / ><integer name = \"index\" format = \"1-indexed\" / >< / object >` = > ` {{ 'baz' : {{ 'foo' : 'Some String' , 'index' : 1 }}}} ` JSON Object: Let's get the reference to the board. board = guard . output_schema . move . validators [ 0 ] . board board r n b q k b n r p p p p p p p p . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . P P P P P P P P R N B Q K B N R Step 3: Wrap the LLM API call with Guard import openai raw_llm_response , validated_response = guard ( openai . Completion . create , prompt_params = { \"board_state\" : str ( board . move_stack ) if board . move_stack else \"Starting position.\" }, engine = \"text-davinci-003\" , max_tokens = 2048 , temperature = 0.3 , ) The guard wrapper returns the raw_llm_respose (which is a simple string), and the validated and corrected output (which is a dictionary). We can see that the output is a dictionary with the correct schema and types. print ( validated_response ) { 'move' : 'e4' } board r n b q k b n r p p p p p p p p . . . . . . . . . . . . . . . . . . . . P . . . . . . . . . . . P P P P . P P P R N B Q K B N R Let's make a move. board . push_san ( \"e5\" ) board r n b q k b n r p p p p . p p p . . . . . . . . . . . . p . . . . . . . P . . . . . . . . . . . P P P P . P P P R N B Q K B N R Ask for another move from the model. raw_llm_response , validated_response = guard ( openai . Completion . create , prompt_params = { \"board_state\" : str ( board . move_stack ) if board . move_stack else \"Starting position.\" }, engine = \"text-davinci-003\" , max_tokens = 2048 , temperature = 0.3 , ) board r n b q k b n r p p p p . p p p . . . . . . . . . . . . p . . . . . . . P . . . . . . . . N . . P P P P . P P P R N B Q K B . R board . push_san ( \"Nc6\" ) board r . b q k b n r p p p p . p p p . . n . . . . . . . . . p . . . . . . . P . . . . . . . . N . . P P P P . P P P R N B Q K B . R","title":"Using GPT to play valid chess moves"},{"location":"examples/valid_chess_moves/#playing-valid-chess-moves","text":"Note To download this example as a Jupyter notebook, click here . Warning This example is currently under development (it cannot be used to play a full chess game yet). In this example, we will use Guardrails to play chess with an LLM and ensure that it makes valid moves.","title":"Playing Valid Chess Moves"},{"location":"examples/valid_chess_moves/#objective","text":"We want to generate a valid chess moves for a given board state. import guardrails as gd from rich import print ! pip install chess","title":"Objective"},{"location":"examples/valid_chess_moves/#step-1-create-the-rail-spec","text":"Ordinarily, we would create an RAIL spec in a separate file. For the purposes of this example, we will create the spec in this notebook as a string following the RAIL syntax. For more information on RAIL, see the RAIL documentation . Here, we request: rail_str = \"\"\" <rail version=\"0.1\"> <script language='python'> from dataclasses import dataclass from guardrails.validators import Validator, EventDetail, register_validator import re from typing import Dict, List import chess BOARD = chess.Board() @register_validator(name=\"is-valid-chess-move\", data_type=\"string\") class IsValidChessMove(Validator): board = BOARD def validate(self, key, value, schema) -> Dict: global BOARD try: # Push the move onto the board. BOARD.push_san(value) except Exception as e: # If the move is invalid, raise an error. raise EventDetail( key, value, schema, f\"Value {value} is not a valid chess move. {e} \", None, ) return schema </script> <output> <string description=\"A move in standard algebraic notation.\" name=\"move\" required=\"true\" format=\"is-valid-chess-move\" on-fail-is-valid-chess-move=\"reask\" /> </output> <prompt> Generate a move for the chess board. The board is currently in the following state: {{board_state}} @complete_json_suffix </prompt> </rail> \"\"\"","title":"Step 1: Create the RAIL Spec"},{"location":"examples/valid_chess_moves/#step-2-create-a-guard-object-with-the-rail-spec","text":"We create a gd.Guard object that will check, validate and correct the output of the LLM. This object: Enforces the quality criteria specified in the RAIL spec. Takes corrective action when the quality criteria are not met. Compiles the schema and type info from the RAIL spec and adds it to the prompt. guard = gd . Guard . from_rail_string ( rail_str ) We see the prompt that will be sent to the LLM. The {board_state} is substituted with the current state of the board. print ( guard . base_prompt ) Generate a move for the chess board. The board is currently in the following state: { board_state } Given below is XML that describes the information to extract from this document and the tags to extract it into. < output > <string description = \"A move in standard algebraic notation.\" name = \"move\" required = \"true\" format = \"is-valid-chess-move\" / > < / output > ONLY return a valid JSON object ( no other text is necessary ) , where the key of the field in JSON is the `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere, enter ` None `. Here are examples of simple ( XML, JSON ) pairs that show the expected behavior: - `<string name = 'foo' format = 'two-words lower-case' / >` => ` {{ 'foo' : 'example one' }} ` - `<list name = 'bar' ><string format = 'upper-case' / >< / list >` => ` {{ \"bar\" : [ 'STRING ONE' , 'STRING TWO' , etc. ]}} ` - `<object name = 'baz' ><string name = \"foo\" format = \"capitalize two-words\" / ><integer name = \"index\" format = \"1-indexed\" / >< / object >` = > ` {{ 'baz' : {{ 'foo' : 'Some String' , 'index' : 1 }}}} ` JSON Object: Let's get the reference to the board. board = guard . output_schema . move . validators [ 0 ] . board board r n b q k b n r p p p p p p p p . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . P P P P P P P P R N B Q K B N R","title":"Step 2: Create a Guard object with the RAIL Spec"},{"location":"examples/valid_chess_moves/#step-3-wrap-the-llm-api-call-with-guard","text":"import openai raw_llm_response , validated_response = guard ( openai . Completion . create , prompt_params = { \"board_state\" : str ( board . move_stack ) if board . move_stack else \"Starting position.\" }, engine = \"text-davinci-003\" , max_tokens = 2048 , temperature = 0.3 , ) The guard wrapper returns the raw_llm_respose (which is a simple string), and the validated and corrected output (which is a dictionary). We can see that the output is a dictionary with the correct schema and types. print ( validated_response ) { 'move' : 'e4' } board r n b q k b n r p p p p p p p p . . . . . . . . . . . . . . . . . . . . P . . . . . . . . . . . P P P P . P P P R N B Q K B N R Let's make a move. board . push_san ( \"e5\" ) board r n b q k b n r p p p p . p p p . . . . . . . . . . . . p . . . . . . . P . . . . . . . . . . . P P P P . P P P R N B Q K B N R Ask for another move from the model. raw_llm_response , validated_response = guard ( openai . Completion . create , prompt_params = { \"board_state\" : str ( board . move_stack ) if board . move_stack else \"Starting position.\" }, engine = \"text-davinci-003\" , max_tokens = 2048 , temperature = 0.3 , ) board r n b q k b n r p p p p . p p p . . . . . . . . . . . . p . . . . . . . P . . . . . . . . N . . P P P P . P P P R N B Q K B . R board . push_san ( \"Nc6\" ) board r . b q k b n r p p p p . p p p . . n . . . . . . . . . p . . . . . . . P . . . . . . . . N . . P P P P . P P P R N B Q K B . R","title":"Step 3: Wrap the LLM API call with Guard"},{"location":"integrations/langchain/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Use Guardrails from LangChain You can use Guardrails to add a layer of security around LangChain components. Here's how to use Guardrails with LangChain. Installing dependencies Make sure you have both langchain and guardrails installed. If you don't, run the following commands: ! pip install guardrails - ai ! pip install langchain Create a RAIL spec rail_spec = \"\"\" <rail version=\"0.1\"> <output> <object name=\"patient_info\"> <string name=\"gender\" description=\"Patient's gender\" /> <integer name=\"age\" format=\"valid-range: 0 100\" /> <string name=\"symptoms\" description=\"Symptoms that the patient is currently experiencing\" /> </object> </output> <prompt> Given the following doctor's notes about a patient, please extract a dictionary that contains the patient's information. {{doctors_notes}} @complete_json_suffix_v2 </prompt> </rail> \"\"\" Create a GuardrailsOutputParser from rich import print from langchain.output_parsers import GuardrailsOutputParser from langchain.prompts import PromptTemplate from langchain.llms import OpenAI output_parser = GuardrailsOutputParser . from_rail_string ( rail_spec ) The GuardrailsOutputParser contains a Guard object, which can be used to access the prompt and output schema. E.g., here is the compiled prompt that is stored in GuardrailsOutputParser : print ( output_parser . guard . base_prompt ) Given the following doctor's notes about a patient, please extract a dictionary that contains the patient's information. { doctors_notes } Given below is XML that describes the information to extract from this document and the tags to extract it into. < output > <object name = \"patient_info\" > <string name = \"gender\" description = \"Patient's gender\" / > <integer name = \"age\" format = \"valid-range: 0 100\" / > <string name = \"symptoms\" description = \"Symptoms that the patient is currently experiencing\" / > < / object > < / output > ONLY return a valid JSON object ( no other text is necessary ) , where the key of the field in JSON is the `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. requests for lists, objects and specific types. Be correct and concise. Here are examples of simple ( XML, JSON ) pairs that show the expected behavior: - `<string name = 'foo' format = 'two-words lower-case' / >` => ` {{ 'foo' : 'example one' }} ` - `<list name = 'bar' ><string format = 'upper-case' / >< / list >` => ` {{ \"bar\" : [ 'STRING ONE' , 'STRING TWO' , etc. ]}} ` - `<object name = 'baz' ><string name = \"foo\" format = \"capitalize two-words\" / ><integer name = \"index\" format = \"1-indexed\" / >< / object >` = > ` {{ 'baz' : {{ 'foo' : 'Some String' , 'index' : 1 }}}} ` JSON Object: We can now create a LangChain PromptTemplate from this output parser. Create Prompt Template prompt = PromptTemplate ( template = output_parser . guard . base_prompt , input_variables = output_parser . guard . prompt . variable_names , ) Query the LLM and get formatted, validated and corrected output model = OpenAI ( temperature = 0 ) doctors_notes = \"\"\" 49 y/o Male with chronic macular rash to face & hair, worse in beard, eyebrows & nares. Itchy, flaky, slightly scaly. Moderate response to OTC steroid cream \"\"\" output = model ( prompt . format_prompt ( doctors_notes = doctors_notes ) . to_string ()) print ( output_parser . parse ( output )) /Users/shreyarajpal/anaconda3/envs/tiff-env/lib/python3.9/site-packages/eliot/json.py:22: FutureWarning: In the future `np.bool` will be defined as the corresponding NumPy scalar. (This may have returned Python scalars in past versions. if isinstance(o, (numpy.bool, numpy.bool_)): { 'gender' : 'Male' , 'age' : 49 , 'symptoms' : 'Chronic macular rash to face & hair, worse in beard, eyebrows & nares. Itchy, flaky, slightly scaly. Moderate response to OTC steroid cream' }","title":"LangChain"},{"location":"integrations/langchain/#use-guardrails-from-langchain","text":"You can use Guardrails to add a layer of security around LangChain components. Here's how to use Guardrails with LangChain.","title":"Use Guardrails from LangChain"},{"location":"integrations/langchain/#installing-dependencies","text":"Make sure you have both langchain and guardrails installed. If you don't, run the following commands: ! pip install guardrails - ai ! pip install langchain","title":"Installing dependencies"},{"location":"integrations/langchain/#create-a-rail-spec","text":"rail_spec = \"\"\" <rail version=\"0.1\"> <output> <object name=\"patient_info\"> <string name=\"gender\" description=\"Patient's gender\" /> <integer name=\"age\" format=\"valid-range: 0 100\" /> <string name=\"symptoms\" description=\"Symptoms that the patient is currently experiencing\" /> </object> </output> <prompt> Given the following doctor's notes about a patient, please extract a dictionary that contains the patient's information. {{doctors_notes}} @complete_json_suffix_v2 </prompt> </rail> \"\"\"","title":"Create a RAIL spec"},{"location":"integrations/langchain/#create-a-guardrailsoutputparser","text":"from rich import print from langchain.output_parsers import GuardrailsOutputParser from langchain.prompts import PromptTemplate from langchain.llms import OpenAI output_parser = GuardrailsOutputParser . from_rail_string ( rail_spec ) The GuardrailsOutputParser contains a Guard object, which can be used to access the prompt and output schema. E.g., here is the compiled prompt that is stored in GuardrailsOutputParser : print ( output_parser . guard . base_prompt ) Given the following doctor's notes about a patient, please extract a dictionary that contains the patient's information. { doctors_notes } Given below is XML that describes the information to extract from this document and the tags to extract it into. < output > <object name = \"patient_info\" > <string name = \"gender\" description = \"Patient's gender\" / > <integer name = \"age\" format = \"valid-range: 0 100\" / > <string name = \"symptoms\" description = \"Symptoms that the patient is currently experiencing\" / > < / object > < / output > ONLY return a valid JSON object ( no other text is necessary ) , where the key of the field in JSON is the `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. requests for lists, objects and specific types. Be correct and concise. Here are examples of simple ( XML, JSON ) pairs that show the expected behavior: - `<string name = 'foo' format = 'two-words lower-case' / >` => ` {{ 'foo' : 'example one' }} ` - `<list name = 'bar' ><string format = 'upper-case' / >< / list >` => ` {{ \"bar\" : [ 'STRING ONE' , 'STRING TWO' , etc. ]}} ` - `<object name = 'baz' ><string name = \"foo\" format = \"capitalize two-words\" / ><integer name = \"index\" format = \"1-indexed\" / >< / object >` = > ` {{ 'baz' : {{ 'foo' : 'Some String' , 'index' : 1 }}}} ` JSON Object: We can now create a LangChain PromptTemplate from this output parser.","title":"Create a GuardrailsOutputParser"},{"location":"integrations/langchain/#create-prompt-template","text":"prompt = PromptTemplate ( template = output_parser . guard . base_prompt , input_variables = output_parser . guard . prompt . variable_names , )","title":"Create Prompt Template"},{"location":"integrations/langchain/#query-the-llm-and-get-formatted-validated-and-corrected-output","text":"model = OpenAI ( temperature = 0 ) doctors_notes = \"\"\" 49 y/o Male with chronic macular rash to face & hair, worse in beard, eyebrows & nares. Itchy, flaky, slightly scaly. Moderate response to OTC steroid cream \"\"\" output = model ( prompt . format_prompt ( doctors_notes = doctors_notes ) . to_string ()) print ( output_parser . parse ( output )) /Users/shreyarajpal/anaconda3/envs/tiff-env/lib/python3.9/site-packages/eliot/json.py:22: FutureWarning: In the future `np.bool` will be defined as the corresponding NumPy scalar. (This may have returned Python scalars in past versions. if isinstance(o, (numpy.bool, numpy.bool_)): { 'gender' : 'Male' , 'age' : 49 , 'symptoms' : 'Chronic macular rash to face & hair, worse in beard, eyebrows & nares. Itchy, flaky, slightly scaly. Moderate response to OTC steroid cream' }","title":"Query the LLM and get formatted, validated and corrected output"},{"location":"integrations/pydantic_validation/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Validating LLM Outputs with Pydantic Note To download this example as a Jupyter notebook, click here . In this example, we will use Guardrails with Pydantic. Objective We want to generate synthetic data that is consistent with a Person Pydantic BaseModel. import guardrails as gd from rich import print Step 1: Create the RAIL Spec Ordinarily, we would create an RAIL spec in a separate file. For the purposes of this example, we will create the spec in this notebook as a string following the RAIL syntax. For more information on RAIL, see the RAIL documentation . Here, we define a Pydantic model for a Person with the following fields: name : a string age : an integer zip_code : a string zip code and write very simple validators for the fields as an example. As a way to show how LLM reasking can be used to generate data that is consistent with the Pydantic model, we can define a validator that asks for a zip code in California (including being perversely opposed to the \"90210\" zip code). If this validator fails, the LLM will be sent the error message and will reask the question. This Pydantic model could also be any model that you already have in your codebase, and just needs to be decorated with @register_pydantic . To use this model in the <output> specification, we used the special pydantic tag. This tag takes the name of the Pydantic model, as well as the on-fail-pydantic attribute, which specifies what to do when the output does not validate against the Pydantic model. rail_str = \"\"\" <rail version=\"0.1\"> <script language=\"python\"> from guardrails.utils.pydantic_utils import register_pydantic from pydantic import BaseModel, validator @register_pydantic class Person(BaseModel): ''' Information about a person. Args: name (str): The name of the person. age (int): The age of the person. zip_code (str): The zip code of the person. ''' name: str age: int zip_code: str @validator(\"zip_code\") def zip_code_must_be_numeric(cls, v): if not v.isnumeric(): raise ValueError(\"Zip code must be numeric.\") return v @validator(\"age\") def age_must_be_between_0_and_150(cls, v): if not 0 &lt;= v &lt;= 150: raise ValueError(\"Age must be between 0 and 150.\") return v @validator(\"zip_code\") def zip_code_in_california(cls, v): if not v.startswith(\"9\"): raise ValueError(\"Zip code must be in California, and start with 9.\") if v == \"90210\": raise ValueError(\"Zip code must not be Beverly Hills.\") return v </script> <output> <list name=\"people\" description=\"A list of 3 people.\"> <pydantic description=\"Information about a person.\" model=\"Person\" on-fail-pydantic=\"reask\" /> </list> </output> <prompt> Generate data for possible users in accordance with the specification below. @xml_prefix_prompt {output_schema} @complete_json_suffix_v2</prompt> </rail> \"\"\" Step 2: Create a Guard object with the RAIL Spec We create a gd.Guard object that will check, validate and correct the output of the LLM. This object: Enforces the quality criteria specified in the RAIL spec. Takes corrective action when the quality criteria are not met. Compiles the schema and type info from the RAIL spec and adds it to the prompt. guard = gd . Guard . from_rail_string ( rail_str ) We see the prompt that will be sent to the LLM. print ( guard . base_prompt ) Generate data for possible users in accordance with the specification below. Given below is XML that describes the information to extract from this document and the tags to extract it into. < output > <list name = \"people\" description = \"A list of 3 people.\" > <object description = \"Information about a person.\" pydantic = \"Person\" ><string name = \"name\" description = \"The name of the person.\" / ><integer name = \"age\" description = \"The age of the person.\" format = \"age-must-be-between-0-and-150\" / ><string name = \"zip_code\" description = \"The zip code of the person.\" format = \"zip-code-must-be-numeric; zip-code-in-california\" / >< / object >< / list > < / output > Given below is XML that describes the information to extract from this document and the tags to extract it into. <output> <list name = \"people\" description = \"A list of 3 people.\" > <object description = \"Information about a person.\" pydantic = \"Person\" ><string name = \"name\" description = \"The name of the person.\" / ><integer name = \"age\" description = \"The age of the person.\" format = \"age-must-be-between-0-and-150\" / ><string name = \"zip_code\" description = \"The zip code of the person.\" format = \"zip-code-must-be-numeric; zip-code-in-california\" / >< / object >< / list > < / output > ONLY return a valid JSON object ( no other text is necessary ) , where the key of the field in JSON is the `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. requests for lists, objects and specific types. Be correct and concise. Here are examples of simple ( XML, JSON ) pairs that show the expected behavior: - `<string name = 'foo' format = 'two-words lower-case' / >` => ` {{ 'foo' : 'example one' }} ` - `<list name = 'bar' ><string format = 'upper-case' / >< / list >` => ` {{ \"bar\" : [ 'STRING ONE' , 'STRING TWO' , etc. ]}} ` - `<object name = 'baz' ><string name = \"foo\" format = \"capitalize two-words\" / ><integer name = \"index\" format = \"1-indexed\" / >< / object >` = > ` {{ 'baz' : {{ 'foo' : 'Some String' , 'index' : 1 }}}} ` JSON Object: Note Notice that the prompt replaces the pydantic tag with the schema, validator and type information from the Pydantic model. This e.g. tells the LLM that we want that zip-code-must-be-numeric and zip-code-in-california . Guardrails will even automatically read the docstrings from the Pydantic model and add them to the prompt! Step 3: Wrap the LLM API call with Guard import openai raw_llm_response , validated_response = guard ( openai . Completion . create , engine = \"text-davinci-003\" , max_tokens = 512 , temperature = 0.5 , num_reasks = 2 , ) /Users/krandiash/opt/anaconda3/envs/guardrails/lib/python3.9/site-packages/eliot/json.py:22: FutureWarning: In the future `np.bool` will be defined as the corresponding NumPy scalar. if isinstance(o, (numpy.bool, numpy.bool_)): print ( validated_response ) { 'people' : [ Person ( name = 'John Doe' , age = 25 , zip_code = '90000' ) , Person ( name = 'Jane Doe' , age = 30 , zip_code = '94105' ) , Person ( name = 'John Smith' , age = 40 , zip_code = '90001' ) ] } The guard wrapper returns the raw_llm_respose (which is a simple string), and the validated and corrected output (which is a dictionary). We can see that the output is a dictionary with the correct schema and contains a few Person objects! We can even print out the logs of the most recent call. Notice that the first time the LLM actually returns a Beverly Hills zip code, the LLM is sent the error message and is reasked. The second time, the LLM returns a valid zip code and the output is returned. print ( guard . state . most_recent_call ) GuardHistory ( history = [ GuardLogs ( prompt = '\\nGenerate data for possible users in accordance with the specification below.\\n\\n\\nGiven below is XML that describes the information to extract from this document and the tags to extract it into.\\n\\n\\n<output>\\n <list name=\"people\" description=\"A list of 3 people.\">\\n <object description=\"Information about a person.\" pydantic=\"Person\"><string name=\"name\" description=\"The name of the person.\"/><integer name=\"age\" description=\"The age of the person.\" format=\"age-must-be-between-0-and-150\"/><string name=\"zip_code\" description=\"The zip code of the person.\" format=\"zip-code-must-be-numeric; zip-code-in-california\"/></object></list>\\n</output>\\n\\n\\nGiven below is XML that describes the information to extract from this document and the tags to extract it into.\\n\\n<output>\\n <list name=\"people\" description=\"A list of 3 people.\">\\n <object description=\"Information about a person.\" pydantic=\"Person\"><string name=\"name\" description=\"The name of the person.\"/><integer name=\"age\" description=\"The age of the person.\" format=\"age-must-be-between-0-and-150\"/><string name=\"zip_code\" description=\"The zip code of the person.\" format=\"zip-code-must-be-numeric; zip-code-in-california\"/></object></list>\\n</output>\\n\\nONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding XML\\'s tag. The JSON MUST conform to the XML format, including any types and format requests e.g. requests for lists, objects and specific types. Be correct and concise.\\n\\nHere are examples of simple (XML, JSON) pairs that show the expected behavior:\\n- `<string name=\\'foo\\' format=\\'two-words lower-case\\' />` => `{\\'foo\\': \\'example one\\'}`\\n- `<list name=\\'bar\\'><string format=\\'upper-case\\' /></list>` => `{\"bar\": [\\'STRING ONE\\', \\'STRING TWO\\', etc.]}`\\n- `<object name=\\'baz\\'><string name=\"foo\" format=\"capitalize two-words\" /><integer name=\"index\" format=\"1-indexed\" /></object>` => `{\\'baz\\': {\\'foo\\': \\'Some String\\', \\'index\\': 1}}`\\n\\nJSON Object:' , output = ' \\n{\\n \"people\": [\\n {\\n \"name\": \"John Doe\",\\n \"age\": 25,\\n \"zip_code\": \"90210\"\\n },\\n {\\n \"name\": \"Jane Doe\",\\n \"age\": 30,\\n \"zip_code\": \"94105\"\\n },\\n {\\n \"name\": \"John Smith\",\\n \"age\": 40,\\n \"zip_code\": \"90001\"\\n }\\n ]\\n}' , output_as_dict = { 'people' : [ { 'name' : 'John Doe' , 'age' : 25 , 'zip_code' : '90210' } , { 'name' : 'Jane Doe' , 'age' : 30 , 'zip_code' : '94105' } , { 'name' : 'John Smith' , 'age' : 40 , 'zip_code' : '90001' } ] } , validated_output = { 'people' : [ { 'name' : 'John Doe' , 'age' : 25 , 'zip_code' : ReAsk ( incorrect_value = '90210' , error_message = 'Zip code must not be Beverly Hills.' , fix_value = None , path = [ 'people' , 0 ] ) } , Person ( name = 'Jane Doe' , age = 30 , zip_code = '94105' ) , Person ( name = 'John Smith' , age = 40 , zip_code = '90001' ) ] } , reasks = [ ReAsk ( incorrect_value = '90210' , error_message = 'Zip code must not be Beverly Hills.' , fix_value = None , path = [ 'people' , 0 ] ) ] ) , GuardLogs ( prompt = '\\nI was given the following JSON response, which had problems due to incorrect values.\\n\\n{\\n \"people\": [\\n {\\n \"name\": \"John Doe\",\\n \"age\": 25,\\n \"zip_code\": {\\n \"incorrect_value\": \"90210\",\\n \"error_message\": \"Zip code must not be Beverly Hills.\"\\n }\\n }\\n ]\\n}\\n\\nHelp me correct the incorrect values based on the given error messages.\\n\\nGiven below is XML that describes the information to extract from this document and the tags to extract it into.\\n\\n<output>\\n <list name=\"people\" description=\"A list of 3 people.\">\\n <object description=\"Information about a person.\" pydantic=\"Person\"><string name=\"name\" description=\"The name of the person.\"/><integer name=\"age\" description=\"The age of the person.\" format=\"age-must-be-between-0-and-150\"/><string name=\"zip_code\" description=\"The zip code of the person.\" format=\"zip-code-must-be-numeric; zip-code-in-california\"/></object></list>\\n</output>\\n\\nONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding XML\\'s tag. The JSON MUST conform to the XML format, including any types and format requests e.g. requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere, enter `None`.\\n\\nHere are examples of simple (XML, JSON) pairs that show the expected behavior:\\n- `<string name=\\'foo\\' format=\\'two-words lower-case\\' />` => `{{\\'foo\\': \\'example one\\'}}`\\n- `<list name=\\'bar\\'><string format=\\'upper-case\\' /></list>` => `{{\"bar\": [\\'STRING ONE\\', \\'STRING TWO\\', etc.]}}`\\n- `<object name=\\'baz\\'><string name=\"foo\" format=\"capitalize two-words\" /><integer name=\"index\" format=\"1-indexed\" /></object>` => `{{\\'baz\\': {{\\'foo\\': \\'Some String\\', \\'index\\': 1}}}}`\\n\\nJSON Object:' , output = '\\n{\\n \"people\": [\\n {\\n \"name\": \"John Doe\",\\n \"age\": 25,\\n \"zip_code\": \"90000\"\\n }\\n ]\\n}' , output_as_dict = { 'people' : [{ 'name' : 'John Doe' , 'age' : 25 , 'zip_code' : '90000' }]} , validated_output = { 'people' : [ Person ( name = 'John Doe' , age = 25 , zip_code = '90000' ) , Person ( name = 'Jane Doe' , age = 30 , zip_code = '94105' ) , Person ( name = 'John Smith' , age = 40 , zip_code = '90001' ) ] } , reasks = [] ) ] )","title":"Pydantic"},{"location":"integrations/pydantic_validation/#validating-llm-outputs-with-pydantic","text":"Note To download this example as a Jupyter notebook, click here . In this example, we will use Guardrails with Pydantic.","title":"Validating LLM Outputs with Pydantic"},{"location":"integrations/pydantic_validation/#objective","text":"We want to generate synthetic data that is consistent with a Person Pydantic BaseModel. import guardrails as gd from rich import print","title":"Objective"},{"location":"integrations/pydantic_validation/#step-1-create-the-rail-spec","text":"Ordinarily, we would create an RAIL spec in a separate file. For the purposes of this example, we will create the spec in this notebook as a string following the RAIL syntax. For more information on RAIL, see the RAIL documentation . Here, we define a Pydantic model for a Person with the following fields: name : a string age : an integer zip_code : a string zip code and write very simple validators for the fields as an example. As a way to show how LLM reasking can be used to generate data that is consistent with the Pydantic model, we can define a validator that asks for a zip code in California (including being perversely opposed to the \"90210\" zip code). If this validator fails, the LLM will be sent the error message and will reask the question. This Pydantic model could also be any model that you already have in your codebase, and just needs to be decorated with @register_pydantic . To use this model in the <output> specification, we used the special pydantic tag. This tag takes the name of the Pydantic model, as well as the on-fail-pydantic attribute, which specifies what to do when the output does not validate against the Pydantic model. rail_str = \"\"\" <rail version=\"0.1\"> <script language=\"python\"> from guardrails.utils.pydantic_utils import register_pydantic from pydantic import BaseModel, validator @register_pydantic class Person(BaseModel): ''' Information about a person. Args: name (str): The name of the person. age (int): The age of the person. zip_code (str): The zip code of the person. ''' name: str age: int zip_code: str @validator(\"zip_code\") def zip_code_must_be_numeric(cls, v): if not v.isnumeric(): raise ValueError(\"Zip code must be numeric.\") return v @validator(\"age\") def age_must_be_between_0_and_150(cls, v): if not 0 &lt;= v &lt;= 150: raise ValueError(\"Age must be between 0 and 150.\") return v @validator(\"zip_code\") def zip_code_in_california(cls, v): if not v.startswith(\"9\"): raise ValueError(\"Zip code must be in California, and start with 9.\") if v == \"90210\": raise ValueError(\"Zip code must not be Beverly Hills.\") return v </script> <output> <list name=\"people\" description=\"A list of 3 people.\"> <pydantic description=\"Information about a person.\" model=\"Person\" on-fail-pydantic=\"reask\" /> </list> </output> <prompt> Generate data for possible users in accordance with the specification below. @xml_prefix_prompt {output_schema} @complete_json_suffix_v2</prompt> </rail> \"\"\"","title":"Step 1: Create the RAIL Spec"},{"location":"integrations/pydantic_validation/#step-2-create-a-guard-object-with-the-rail-spec","text":"We create a gd.Guard object that will check, validate and correct the output of the LLM. This object: Enforces the quality criteria specified in the RAIL spec. Takes corrective action when the quality criteria are not met. Compiles the schema and type info from the RAIL spec and adds it to the prompt. guard = gd . Guard . from_rail_string ( rail_str ) We see the prompt that will be sent to the LLM. print ( guard . base_prompt ) Generate data for possible users in accordance with the specification below. Given below is XML that describes the information to extract from this document and the tags to extract it into. < output > <list name = \"people\" description = \"A list of 3 people.\" > <object description = \"Information about a person.\" pydantic = \"Person\" ><string name = \"name\" description = \"The name of the person.\" / ><integer name = \"age\" description = \"The age of the person.\" format = \"age-must-be-between-0-and-150\" / ><string name = \"zip_code\" description = \"The zip code of the person.\" format = \"zip-code-must-be-numeric; zip-code-in-california\" / >< / object >< / list > < / output > Given below is XML that describes the information to extract from this document and the tags to extract it into. <output> <list name = \"people\" description = \"A list of 3 people.\" > <object description = \"Information about a person.\" pydantic = \"Person\" ><string name = \"name\" description = \"The name of the person.\" / ><integer name = \"age\" description = \"The age of the person.\" format = \"age-must-be-between-0-and-150\" / ><string name = \"zip_code\" description = \"The zip code of the person.\" format = \"zip-code-must-be-numeric; zip-code-in-california\" / >< / object >< / list > < / output > ONLY return a valid JSON object ( no other text is necessary ) , where the key of the field in JSON is the `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. requests for lists, objects and specific types. Be correct and concise. Here are examples of simple ( XML, JSON ) pairs that show the expected behavior: - `<string name = 'foo' format = 'two-words lower-case' / >` => ` {{ 'foo' : 'example one' }} ` - `<list name = 'bar' ><string format = 'upper-case' / >< / list >` => ` {{ \"bar\" : [ 'STRING ONE' , 'STRING TWO' , etc. ]}} ` - `<object name = 'baz' ><string name = \"foo\" format = \"capitalize two-words\" / ><integer name = \"index\" format = \"1-indexed\" / >< / object >` = > ` {{ 'baz' : {{ 'foo' : 'Some String' , 'index' : 1 }}}} ` JSON Object: Note Notice that the prompt replaces the pydantic tag with the schema, validator and type information from the Pydantic model. This e.g. tells the LLM that we want that zip-code-must-be-numeric and zip-code-in-california . Guardrails will even automatically read the docstrings from the Pydantic model and add them to the prompt!","title":"Step 2: Create a Guard object with the RAIL Spec"},{"location":"integrations/pydantic_validation/#step-3-wrap-the-llm-api-call-with-guard","text":"import openai raw_llm_response , validated_response = guard ( openai . Completion . create , engine = \"text-davinci-003\" , max_tokens = 512 , temperature = 0.5 , num_reasks = 2 , ) /Users/krandiash/opt/anaconda3/envs/guardrails/lib/python3.9/site-packages/eliot/json.py:22: FutureWarning: In the future `np.bool` will be defined as the corresponding NumPy scalar. if isinstance(o, (numpy.bool, numpy.bool_)): print ( validated_response ) { 'people' : [ Person ( name = 'John Doe' , age = 25 , zip_code = '90000' ) , Person ( name = 'Jane Doe' , age = 30 , zip_code = '94105' ) , Person ( name = 'John Smith' , age = 40 , zip_code = '90001' ) ] } The guard wrapper returns the raw_llm_respose (which is a simple string), and the validated and corrected output (which is a dictionary). We can see that the output is a dictionary with the correct schema and contains a few Person objects! We can even print out the logs of the most recent call. Notice that the first time the LLM actually returns a Beverly Hills zip code, the LLM is sent the error message and is reasked. The second time, the LLM returns a valid zip code and the output is returned. print ( guard . state . most_recent_call ) GuardHistory ( history = [ GuardLogs ( prompt = '\\nGenerate data for possible users in accordance with the specification below.\\n\\n\\nGiven below is XML that describes the information to extract from this document and the tags to extract it into.\\n\\n\\n<output>\\n <list name=\"people\" description=\"A list of 3 people.\">\\n <object description=\"Information about a person.\" pydantic=\"Person\"><string name=\"name\" description=\"The name of the person.\"/><integer name=\"age\" description=\"The age of the person.\" format=\"age-must-be-between-0-and-150\"/><string name=\"zip_code\" description=\"The zip code of the person.\" format=\"zip-code-must-be-numeric; zip-code-in-california\"/></object></list>\\n</output>\\n\\n\\nGiven below is XML that describes the information to extract from this document and the tags to extract it into.\\n\\n<output>\\n <list name=\"people\" description=\"A list of 3 people.\">\\n <object description=\"Information about a person.\" pydantic=\"Person\"><string name=\"name\" description=\"The name of the person.\"/><integer name=\"age\" description=\"The age of the person.\" format=\"age-must-be-between-0-and-150\"/><string name=\"zip_code\" description=\"The zip code of the person.\" format=\"zip-code-must-be-numeric; zip-code-in-california\"/></object></list>\\n</output>\\n\\nONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding XML\\'s tag. The JSON MUST conform to the XML format, including any types and format requests e.g. requests for lists, objects and specific types. Be correct and concise.\\n\\nHere are examples of simple (XML, JSON) pairs that show the expected behavior:\\n- `<string name=\\'foo\\' format=\\'two-words lower-case\\' />` => `{\\'foo\\': \\'example one\\'}`\\n- `<list name=\\'bar\\'><string format=\\'upper-case\\' /></list>` => `{\"bar\": [\\'STRING ONE\\', \\'STRING TWO\\', etc.]}`\\n- `<object name=\\'baz\\'><string name=\"foo\" format=\"capitalize two-words\" /><integer name=\"index\" format=\"1-indexed\" /></object>` => `{\\'baz\\': {\\'foo\\': \\'Some String\\', \\'index\\': 1}}`\\n\\nJSON Object:' , output = ' \\n{\\n \"people\": [\\n {\\n \"name\": \"John Doe\",\\n \"age\": 25,\\n \"zip_code\": \"90210\"\\n },\\n {\\n \"name\": \"Jane Doe\",\\n \"age\": 30,\\n \"zip_code\": \"94105\"\\n },\\n {\\n \"name\": \"John Smith\",\\n \"age\": 40,\\n \"zip_code\": \"90001\"\\n }\\n ]\\n}' , output_as_dict = { 'people' : [ { 'name' : 'John Doe' , 'age' : 25 , 'zip_code' : '90210' } , { 'name' : 'Jane Doe' , 'age' : 30 , 'zip_code' : '94105' } , { 'name' : 'John Smith' , 'age' : 40 , 'zip_code' : '90001' } ] } , validated_output = { 'people' : [ { 'name' : 'John Doe' , 'age' : 25 , 'zip_code' : ReAsk ( incorrect_value = '90210' , error_message = 'Zip code must not be Beverly Hills.' , fix_value = None , path = [ 'people' , 0 ] ) } , Person ( name = 'Jane Doe' , age = 30 , zip_code = '94105' ) , Person ( name = 'John Smith' , age = 40 , zip_code = '90001' ) ] } , reasks = [ ReAsk ( incorrect_value = '90210' , error_message = 'Zip code must not be Beverly Hills.' , fix_value = None , path = [ 'people' , 0 ] ) ] ) , GuardLogs ( prompt = '\\nI was given the following JSON response, which had problems due to incorrect values.\\n\\n{\\n \"people\": [\\n {\\n \"name\": \"John Doe\",\\n \"age\": 25,\\n \"zip_code\": {\\n \"incorrect_value\": \"90210\",\\n \"error_message\": \"Zip code must not be Beverly Hills.\"\\n }\\n }\\n ]\\n}\\n\\nHelp me correct the incorrect values based on the given error messages.\\n\\nGiven below is XML that describes the information to extract from this document and the tags to extract it into.\\n\\n<output>\\n <list name=\"people\" description=\"A list of 3 people.\">\\n <object description=\"Information about a person.\" pydantic=\"Person\"><string name=\"name\" description=\"The name of the person.\"/><integer name=\"age\" description=\"The age of the person.\" format=\"age-must-be-between-0-and-150\"/><string name=\"zip_code\" description=\"The zip code of the person.\" format=\"zip-code-must-be-numeric; zip-code-in-california\"/></object></list>\\n</output>\\n\\nONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding XML\\'s tag. The JSON MUST conform to the XML format, including any types and format requests e.g. requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere, enter `None`.\\n\\nHere are examples of simple (XML, JSON) pairs that show the expected behavior:\\n- `<string name=\\'foo\\' format=\\'two-words lower-case\\' />` => `{{\\'foo\\': \\'example one\\'}}`\\n- `<list name=\\'bar\\'><string format=\\'upper-case\\' /></list>` => `{{\"bar\": [\\'STRING ONE\\', \\'STRING TWO\\', etc.]}}`\\n- `<object name=\\'baz\\'><string name=\"foo\" format=\"capitalize two-words\" /><integer name=\"index\" format=\"1-indexed\" /></object>` => `{{\\'baz\\': {{\\'foo\\': \\'Some String\\', \\'index\\': 1}}}}`\\n\\nJSON Object:' , output = '\\n{\\n \"people\": [\\n {\\n \"name\": \"John Doe\",\\n \"age\": 25,\\n \"zip_code\": \"90000\"\\n }\\n ]\\n}' , output_as_dict = { 'people' : [{ 'name' : 'John Doe' , 'age' : 25 , 'zip_code' : '90000' }]} , validated_output = { 'people' : [ Person ( name = 'John Doe' , age = 25 , zip_code = '90000' ) , Person ( name = 'Jane Doe' , age = 30 , zip_code = '94105' ) , Person ( name = 'John Smith' , age = 40 , zip_code = '90001' ) ] } , reasks = [] ) ] )","title":"Step 3: Wrap the LLM API call with Guard"},{"location":"rail/","text":"Overview \ud83e\udd16 What is RAIL ? .RAIL is a dialect of XML. It stands for \" R eliable AI markup L anguage\", and it can be used to define: The structure of the expected outcome of the LLM. (E.g. JSON) The type of each field in the expected outcome. (E.g. string, integer, list, object) The quality criteria for the expected outcome to be considered valid. (E.g. generated text should be bias-free, generated code should be bug-free) The corrective action to take in case the quality criteria is not met. (E.g. reask the question, filter the LLM, progrmatically fix, etc.) Expand to see an example of a RAIL specification. <rail version= \"0.1\" > <output> <list name= \"fees\" description= \"What fees and charges are associated with my account?\" > <object> <integer name= \"index\" format= \"1-indexed\" /> <string name= \"name\" format= \"lower-case; two-words\" on-fail-lower-case= \"noop\" on-fail-two-words= \"reask\" /> <string name= \"explanation\" format= \"one-line\" on-fail-one-line= \"noop\" /> <float name= \"value\" format= \"percentage\" /> </object> </list> <string name= 'interest_rates' description= 'What are the interest rates offered by the bank on savings and checking accounts, loans, and credit products?' format= \"one-line\" on-fail-one-line= \"noop\" /> </output> <prompt> Given the following document, answer the following questions. If the answer doesn't exist in the document, enter 'None'. {document} @xml_prefix_prompt {{output_schema}} @json_suffix_prompt </prompt> <script language= 'python' > from guardrails.validators import Validator, EventDetail, register_validator import random @register_validator(name=\"custom\", data_type=\"any\") class CustomValidator(Validator): def __init__(self, *args, **kwargs): super(CustomValidator, self).__init__(*args, **kwargs) def validate(self, key: str, value: Any, schema: Union[Dict, List]): \"\"\"Validate that a value is within a range.\"\"\" logger.debug(f\"Validating {value} is in choices {self._choices}...\") if random.random() > 0.5: raise EventDetail( key, value, schema, f\"Value {value} is not in choices {self._choices}.\", None, ) return schema </script> </rail> \ud83e\udd14 Why RAIL ? Language agnostic: RAIL Specifications can be enforced in any language. Simple and familiar: RAIL should be familiar to anyone familiar with HTML, and should be easy to learn. Validation and correction : RAIL can be used to define quality criteria for the expected output, and corrective actions to take in case the quality criteria is not met. Can define complex structures: RAIL can be used to define arbitrarily complex structures, such as nested lists, nested objects, etc. Supports writing custom code: If needed, RAIL supports writing code for using validators, custom corrective actions, etc. To see examples of this, check out the RAIL Script page. Code assistance : In the future, we plan to support code completion and IntelliSense for RAIL specifications, which will make it very easy to write RAIL specifications. Design inspiration HTML, CSS and Javascript: RAIL spec is a dialect of XML, and so is similar to HTML. Specifying quality criteria is done via the format attribute, which is similar to CSS style tags. Corrective actions are specified via the on-fail-* attributes, which is similar to Javascript event handlers. OpenAPI as an open standard for creating machine-readable RESTful APIs. \ud83d\udcda Components of an RAIL Specification The RAIL specification contains 3 main components: Output : Contains information about the expected output of the LLM. It contains the spec for the overall structure of the LLM output, type info for each field, and the quality criteria for each field and the corrective action to be taken in case quality criteria is not met. This is the main component of the RAIL specification, which enforces the guarantees that the LLM should provide. Check out the RAIL Output page for more details, including the full specifcation of how to create complex output schemas. Prompt : Prompt template, and contains the high level instructions that are sent to the LLM. Check out the RAIL Prompt page for more details. (Experimental) (Optional) Script : Contains any custom code for implementing the schema. This is useful for implementing custom validators, custom corrective actions, etc. Check out the RAIL Script page for more details. Let's see an example of an RAIL specification in action: <rail version= \"0.1\" > <output> <!-- (1)! --> ... </output> <prompt> <!-- (2)! --> ... </prompt> <script language= python > <!-- (3)! --> ... </script> </rail> The output element contains the structure of the expected output of the LLM. It contains the spec for the overall structure of the LLM output, type info for each field, and the quality criteria for each field and the corrective action to be taken in case quality criteria is not met. The prompt element contains the high level instructions that are sent to the LLM. Check out the RAIL Prompt page for more details. The script element is optional, and contains any custom code for implementing the schema. \ud83d\udcd6 How to use RAIL in Guardrails? After creating a RAIL specification, you can use it to get corrected output from LLMs by wrapping your LLM API call with a Guard module. Here's an example of doing that: import guardrails as gd # Create a Guard object guard = gd . Guard . from_rail ( 'path/to/rail/spec.xml' ) # (1)! validated_output = guard ( openai . Completion . create , # (2)! ** prompt_args , * args , ** kwargs ) A Guard object is created from a RAIL specification. This object manages the validation and correction of the output of the LLM, as well as the prompt that is sent to the LLM. Wrap the LLM API call ( openai.Completion.create ) with the Guard object, and add any additional arguments that you want to pass to the LLM API call. Instead of returning the raw text object, the Guard object will return a JSON object that is validated and corrected according to the RAIL specification.","title":"Overview"},{"location":"rail/#overview","text":"","title":"Overview"},{"location":"rail/#what-is-rail","text":".RAIL is a dialect of XML. It stands for \" R eliable AI markup L anguage\", and it can be used to define: The structure of the expected outcome of the LLM. (E.g. JSON) The type of each field in the expected outcome. (E.g. string, integer, list, object) The quality criteria for the expected outcome to be considered valid. (E.g. generated text should be bias-free, generated code should be bug-free) The corrective action to take in case the quality criteria is not met. (E.g. reask the question, filter the LLM, progrmatically fix, etc.) Expand to see an example of a RAIL specification. <rail version= \"0.1\" > <output> <list name= \"fees\" description= \"What fees and charges are associated with my account?\" > <object> <integer name= \"index\" format= \"1-indexed\" /> <string name= \"name\" format= \"lower-case; two-words\" on-fail-lower-case= \"noop\" on-fail-two-words= \"reask\" /> <string name= \"explanation\" format= \"one-line\" on-fail-one-line= \"noop\" /> <float name= \"value\" format= \"percentage\" /> </object> </list> <string name= 'interest_rates' description= 'What are the interest rates offered by the bank on savings and checking accounts, loans, and credit products?' format= \"one-line\" on-fail-one-line= \"noop\" /> </output> <prompt> Given the following document, answer the following questions. If the answer doesn't exist in the document, enter 'None'. {document} @xml_prefix_prompt {{output_schema}} @json_suffix_prompt </prompt> <script language= 'python' > from guardrails.validators import Validator, EventDetail, register_validator import random @register_validator(name=\"custom\", data_type=\"any\") class CustomValidator(Validator): def __init__(self, *args, **kwargs): super(CustomValidator, self).__init__(*args, **kwargs) def validate(self, key: str, value: Any, schema: Union[Dict, List]): \"\"\"Validate that a value is within a range.\"\"\" logger.debug(f\"Validating {value} is in choices {self._choices}...\") if random.random() > 0.5: raise EventDetail( key, value, schema, f\"Value {value} is not in choices {self._choices}.\", None, ) return schema </script> </rail>","title":"\ud83e\udd16 What is RAIL?"},{"location":"rail/#why-rail","text":"Language agnostic: RAIL Specifications can be enforced in any language. Simple and familiar: RAIL should be familiar to anyone familiar with HTML, and should be easy to learn. Validation and correction : RAIL can be used to define quality criteria for the expected output, and corrective actions to take in case the quality criteria is not met. Can define complex structures: RAIL can be used to define arbitrarily complex structures, such as nested lists, nested objects, etc. Supports writing custom code: If needed, RAIL supports writing code for using validators, custom corrective actions, etc. To see examples of this, check out the RAIL Script page. Code assistance : In the future, we plan to support code completion and IntelliSense for RAIL specifications, which will make it very easy to write RAIL specifications. Design inspiration HTML, CSS and Javascript: RAIL spec is a dialect of XML, and so is similar to HTML. Specifying quality criteria is done via the format attribute, which is similar to CSS style tags. Corrective actions are specified via the on-fail-* attributes, which is similar to Javascript event handlers. OpenAPI as an open standard for creating machine-readable RESTful APIs.","title":"\ud83e\udd14 Why RAIL?"},{"location":"rail/#components-of-an-rail-specification","text":"The RAIL specification contains 3 main components: Output : Contains information about the expected output of the LLM. It contains the spec for the overall structure of the LLM output, type info for each field, and the quality criteria for each field and the corrective action to be taken in case quality criteria is not met. This is the main component of the RAIL specification, which enforces the guarantees that the LLM should provide. Check out the RAIL Output page for more details, including the full specifcation of how to create complex output schemas. Prompt : Prompt template, and contains the high level instructions that are sent to the LLM. Check out the RAIL Prompt page for more details. (Experimental) (Optional) Script : Contains any custom code for implementing the schema. This is useful for implementing custom validators, custom corrective actions, etc. Check out the RAIL Script page for more details. Let's see an example of an RAIL specification in action: <rail version= \"0.1\" > <output> <!-- (1)! --> ... </output> <prompt> <!-- (2)! --> ... </prompt> <script language= python > <!-- (3)! --> ... </script> </rail> The output element contains the structure of the expected output of the LLM. It contains the spec for the overall structure of the LLM output, type info for each field, and the quality criteria for each field and the corrective action to be taken in case quality criteria is not met. The prompt element contains the high level instructions that are sent to the LLM. Check out the RAIL Prompt page for more details. The script element is optional, and contains any custom code for implementing the schema.","title":"\ud83d\udcda Components of an RAIL Specification"},{"location":"rail/#how-to-use-rail-in-guardrails","text":"After creating a RAIL specification, you can use it to get corrected output from LLMs by wrapping your LLM API call with a Guard module. Here's an example of doing that: import guardrails as gd # Create a Guard object guard = gd . Guard . from_rail ( 'path/to/rail/spec.xml' ) # (1)! validated_output = guard ( openai . Completion . create , # (2)! ** prompt_args , * args , ** kwargs ) A Guard object is created from a RAIL specification. This object manages the validation and correction of the output of the LLM, as well as the prompt that is sent to the LLM. Wrap the LLM API call ( openai.Completion.create ) with the Guard object, and add any additional arguments that you want to pass to the LLM API call. Instead of returning the raw text object, the Guard object will return a JSON object that is validated and corrected according to the RAIL specification.","title":"\ud83d\udcd6 How to use RAIL in Guardrails?"},{"location":"rail/instructions/","text":"Instructions Element The <instructions></instructions> element contains the high level instructions sent to the LLM (e.g. the system message for chat models). \ud83d\udcda Components of a Prompt In addition to the high level task description, the prompt also contains the following: Component Syntax Description Variables {{variable_name}} These are provided by the user at runtime, and substituted in the prompt. Output Schema {output_schema} This is the schema of the expected output, and is compiled based on the output element. For more information on how the output schema is compiled for the prompt, check out output element compilation . Prompt Primitives @prompt_primitive_name These are pre-constructed prompts that are useful for common tasks. E.g., some primitives may contain information that helps the LLM understand the output schema better. To see the full list of prompt primitives, check out guardrails/constants.xml . <rail version= \"0.1\" > <prompt> <!-- (1)! --> You are a helpful assistant only capable of communicating with valid JSON, and no other text. @json_suffix_prompt_examples <!-- (2)! --> </prompt> </rail> The prompt contains high level task information. @json_suffix_prompt_examples is a prompt primitive provided by guardrails. It is equivalent to typing the following lines in the prompt: Given below is XML that describes the information to extract from this document and the tags to extract it into. You are a helpful assistant only capable of communicating with valid JSON, and no other text. ONLY return a valid JSON object (no other text is necessary). The JSON MUST conform to the XML format, including any types and format requests e.g. requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere, enter `None`. Here are examples of simple (XML, JSON) pairs that show the expected behavior: - `<string name='foo' format='two-words lower-case' />` => `{'foo': 'example one'}` - `<list name='bar'><string format='upper-case' /></list>` => `{\"bar\": ['STRING ONE', 'STRING TWO', etc.]}` - `<object name='baz'><string name=\"foo\" format=\"capitalize two-words\" /><integer name=\"index\" format=\"1-indexed\" /></object>` => `{'baz': {'foo': 'Some String', 'index': 1}}`","title":"Instruction Element"},{"location":"rail/instructions/#instructions-element","text":"The <instructions></instructions> element contains the high level instructions sent to the LLM (e.g. the system message for chat models).","title":"Instructions Element"},{"location":"rail/instructions/#components-of-a-prompt","text":"In addition to the high level task description, the prompt also contains the following: Component Syntax Description Variables {{variable_name}} These are provided by the user at runtime, and substituted in the prompt. Output Schema {output_schema} This is the schema of the expected output, and is compiled based on the output element. For more information on how the output schema is compiled for the prompt, check out output element compilation . Prompt Primitives @prompt_primitive_name These are pre-constructed prompts that are useful for common tasks. E.g., some primitives may contain information that helps the LLM understand the output schema better. To see the full list of prompt primitives, check out guardrails/constants.xml . <rail version= \"0.1\" > <prompt> <!-- (1)! --> You are a helpful assistant only capable of communicating with valid JSON, and no other text. @json_suffix_prompt_examples <!-- (2)! --> </prompt> </rail> The prompt contains high level task information. @json_suffix_prompt_examples is a prompt primitive provided by guardrails. It is equivalent to typing the following lines in the prompt: Given below is XML that describes the information to extract from this document and the tags to extract it into. You are a helpful assistant only capable of communicating with valid JSON, and no other text. ONLY return a valid JSON object (no other text is necessary). The JSON MUST conform to the XML format, including any types and format requests e.g. requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere, enter `None`. Here are examples of simple (XML, JSON) pairs that show the expected behavior: - `<string name='foo' format='two-words lower-case' />` => `{'foo': 'example one'}` - `<list name='bar'><string format='upper-case' /></list>` => `{\"bar\": ['STRING ONE', 'STRING TWO', etc.]}` - `<object name='baz'><string name=\"foo\" format=\"capitalize two-words\" /><integer name=\"index\" format=\"1-indexed\" /></object>` => `{'baz': {'foo': 'Some String', 'index': 1}}`","title":"\ud83d\udcda Components of a Prompt"},{"location":"rail/output/","text":"Output Element The <output>...</output> element of a RAIL spec is used to give precise specification of the expected output of the LLM. It specifies the structure of the expected output (e.g. JSON), the type of each field, the quality criteria for each field to be considered valid (e.g. generated text should be bias-free, generated code should be bug-free), and the corrective action to take in case the quality criteria is not met (e.g. reask the question to the LLM, filter offending values, progrmatically fix, etc.) Example: RAIL Spec Output JSON <rail version= \"0.1\" > <output> <string name= \"text\" description= \"The generated text\" format= \"two-words\" on-fail-two-words= \"reask\" /> <float name= \"score\" description= \"The score of the generated text\" format= \"min-val: 0\" on-fail-min-val= \"fix\" /> <object name= \"metadata\" description= \"The metadata associated with the generated text\" > <string name= \"key_1\" description= \"description of key_1\" /> ... </object> </output> </rail> { \"text\" : \"string output\" , \"score\" : 0.0 , \"metadata\" : { \"key_1\" : \"string\" , ... } } \ud83c\udff7\ufe0f RAIL Elements At the heart of the RAIL specification is the use of elements. Each element's tag represents a type of data. For example, in the element <string ... /> , the tag represents a string, the <integer ... /> elements represents an integer, the <object ...></object> element represents an object, etc. Note The tag of RAIL element is the same as the \"type\" of the data it represents. E.g. <string .../> element will generate a string, <integer .../> element will generate an integer, etc. Supported types Guardrails supports many data types, including:, string , integer , float , boolean , list , object , url , email and many more. Check out the RAIL Data Types page for a list of supported data types. Scalar vs Non-scalar types Guardrails supports two types of data types: scalar and non-scalar. Scalar Non Scalar Scalar types are void elements, and can't have any child elements. Non-scalar types can be non-void, and can have closing tags and child elements. Syntax: <string ... /> Syntax: Examples: string , integer , float , boolean , url , email , etc. Examples: list and object are the only non-scalar types supported by Guardrails. Supported attributes Each element can have attributes that specify additional information about the data, such as: name attribute that specifies the name of the field. This will be the key in the output JSON. E.g. RAIL Spec Output JSON <rail version= \"0.1\" > <output> <string name= \"some_key\" /> </output> </rail> { \"some_key\" : \"...\" } description attribute that specifies the description of the field. This is similar to a prompt that will be provided to the LLM. It can contain more context to help the LLM generate the correct output. (Coming soon!) required attribute that specifies whether the field is required or not. If the field is required, the LLM will be asked to generate the field until it is generated correctly. If the field is not required, the LLM will not be asked to generate the field if it is not generated correctly. format attribute that specifies the quality criteria that the field should respect. The format attribute can contain multiple quality criteria separated by a colon ( ; ). For example, two-words; upper-case . on-fail-{quality-criteria} attribute that specifies the corrective action to take in case the quality criteria is not met. For example, on-fail-two-words=\"reask\" specifies that if the field does not have two words, the LLM should be asked to re-generate the field. E.g., RAIL Spec Output JSON <rail version= \"0.1\" > <output> <string name= \"some_key\" description= \"Detailed description of what the value of the key should be\" required= \"true\" format= \"two-words; upper-case\" on-fail-two-words= \"reask\" on-fail-upper-case= \"noop\" /> </output> </rail> { \"some_key\" : \"SOME STRING\" } \u26a1 Specifying output structure You can combine RAIL elements to create an arbitrarily complex output structure. Flat JSON output RAIL Spec Output JSON <rail version= \"0.1\" > <output> <string name= \"some_key\" .... /> <integer name= \"some_other_key\" .... /> </output> </rail> { \"some_key\" : \"string\" , \"some_other_key\" : 0 } JSON output with objects object elements can be used to specify a JSON object, which is a collection of key-value pairs. A child of an object element represents a key in the JSON object. The child element can be any RAIL element, including another list or object elements. The value of the key is generated by the LLM based on the info provided by the child element. An object element can have multiple children, each of which can be any RAIL element, including another list or object elements. Formatters can be applied to the child elements of an object element. For example, if the child element is a string element, the format attribute can be used to specify the quality criteria for the strings in the list. RAIL Spec Output JSON <rail version= \"0.1\" > <output> <object name= \"some_object\" > <string name= \"some_str_key\" description= \"What should the value for this key represent?\" format= \"two-words; upper-case\" /> <integer name= \"some_other_key\" description= \"What should this integer represent?\" format= \"min-val: 0\" /> </object> </output> </rail> { \"some_object\" : { \"some_str_key\" : \"SOME STRING\" , \"some_other_key\" : 0 } } In the above example, \"SOME STRING\" is the value for the some_str_key key, and is generated based on the name, description and quality criteria provided by the <string name=\"some_str_key\" ... /> element. Note The object element doesn't need to have children. If child elements are not provided, the LLM will automatically generate keys and values for the object based on the name , description and format attributes of the object element. Providing child elements is useful when you want to specify the keys and values that the LLM should generate. JSON output with lists list elements can be used to specify a list of values. Currently, a list element can only contain a single child element. This means that a list can only contain a single type of data. For example, a list can only contain strings, or a list can only contain integers, but a list cannot contain both strings and integers. This child element can be any RAIL element, including another list or object elements. The child of a list element doesn't need to have a name attribute, since items in a list don't have names. Formatters can be applied to the child element of a list element. For example, if the child element is a string element, the format attribute can be used to specify the quality criteria for the strings in the list. RAIL Spec Output JSON <rail version= \"0.1\" > <output> <list name= \"some_list\" format= \"min-len: 2\" > <string format= \"two-words; upper-case\" /> </list> </output> </rail> { \"some_list\" : [ \"STRING 1\" , \"STRING 2\" ] } Note The list element doesn't need to have a child element. If a child element is not provided, the LLM will automatically generate values for the list based on the name , description and format attributes of the list element. Providing a child element is useful when you want to have more control over the values that the LLM should generate. \ud83c\udf40 Specifying quality criteria The format attribute allows specifying the quality criteria for each field in the expected output. The format attribute can contain multiple quality criteria separated by a colon ( ; ). For example, <rail version= \"0.1\" > <output> <string name= \"text\" description= \"The generated text\" format= \"two-words; upper-case\" on-fail-two-words= \"reask\" /> </output> </rail> The above example specifies that the text field should be a string with two words and the text should be returned in upper case. Quality criteria under the hood Under the hood, the format attribute is parsed into a list of quality criteria. Each quality criteria is backed by a Validator class that checks if the generated output meets the quality criteria. For example, the two-words quality criteria is backed by the TwoWords class, which checks if the generated output has two words. Each quality criteria is then checked against the generated output. If the quality criteria is not met, the corrective action specified by the on-fail-{quality-criteria} attribute is taken. Supported criteria Each quality critera is relevant to a specific data type. For example, the two-words quality criteria is only relevant to strings, and the positive quality criteria is only relevant to integers and floats. To see the full list of supported quality criteria, check out the Validation page. \ud83d\udee0\ufe0f Specifying corrective actions The on-fail-{quality-criteria} attribute allows specifying the corrective action that should be taken if the quality criteria is not met. The corrective action can be one of the following: Action Behavior reask Reask the LLM to generate an output that meets the quality criteria. The prompt used for reasking contains information about which quality criteria failed, which is auto-generated by the validator. fix Programmatically fix the generated output to meet the quality criteria. E.g. for the formatter two-words , the programatic fix simply takes the first 2 words of the generated string. filter Filter the incorrect value. This only filters the field that fails, and will return the rest of the generated output. refrain Refrain from returning an output. If a formatter has the corrective action refrain, then on failure there will be a None output returned instead of the JSON. noop Do nothing. The failure will still be recorded in the logs, but no corrective action will be taken. exception Raise an exception when validation fails. fix_reask First, fix the generated output deterministically, and then rerun validation with the deterministically fixed output. If validation fails, then perform reasking. \ud83d\ude92 Adding compiled output element to prompt In order to generate the correct LLM output, the output schema needs to be compiled and added to the prompt. This is handled automatically by the Guardrails library. The output element can be compiled into different formats to be used in the prompt. Currently, only a passthrough compilation into XML is supported, but in the future we will support additional compilation formats like TypeScript . Passthrough ( XML ) compilation By default, the output element will be compiled into XML and added to the prompt. Compilation into XML involves removing any on-fail-{quality-criteria} attributes, and adding the output element to the prompt. An example of the compiled output element: RAIL Spec Compiled XML added to prompt <rail version= \"0.1\" > <output> <string name= \"text\" description= \"The generated text\" format= \"two-words; upper-case\" /> </output> </rail> <output> <string name= \"text\" description= \"The generated text\" /> </output> TypeScript Compilation Coming soon! \u2753 Unsupported tags and attributes By default, Guardrails will not throw an error if you add an unsupported type, attribute or quality criteria. Instead, it will treat the unsupported type as a string, and will not perform any quality checks on the field. Often, LLMs will generate a string for an unsupported type, so this behavior is useful. Unsupported tags and attributes will still be included in the output schema definition that is appended to the prompt. This behavior can be changed by setting the strict attribute of the <output> element to true . If strict is set to true , Guardrails will throw an error if you add an unsupported type, attribute or quality criteria. <rail version= \"0.1\" > <output strict= \"true\" > <unsupported-type ... /> </output> </rail> This will throw an error: \u274c Error: Unsupported type: unsupported-type","title":"Output Element"},{"location":"rail/output/#output-element","text":"The <output>...</output> element of a RAIL spec is used to give precise specification of the expected output of the LLM. It specifies the structure of the expected output (e.g. JSON), the type of each field, the quality criteria for each field to be considered valid (e.g. generated text should be bias-free, generated code should be bug-free), and the corrective action to take in case the quality criteria is not met (e.g. reask the question to the LLM, filter offending values, progrmatically fix, etc.) Example: RAIL Spec Output JSON <rail version= \"0.1\" > <output> <string name= \"text\" description= \"The generated text\" format= \"two-words\" on-fail-two-words= \"reask\" /> <float name= \"score\" description= \"The score of the generated text\" format= \"min-val: 0\" on-fail-min-val= \"fix\" /> <object name= \"metadata\" description= \"The metadata associated with the generated text\" > <string name= \"key_1\" description= \"description of key_1\" /> ... </object> </output> </rail> { \"text\" : \"string output\" , \"score\" : 0.0 , \"metadata\" : { \"key_1\" : \"string\" , ... } }","title":"Output Element"},{"location":"rail/output/#rail-elements","text":"At the heart of the RAIL specification is the use of elements. Each element's tag represents a type of data. For example, in the element <string ... /> , the tag represents a string, the <integer ... /> elements represents an integer, the <object ...></object> element represents an object, etc. Note The tag of RAIL element is the same as the \"type\" of the data it represents. E.g. <string .../> element will generate a string, <integer .../> element will generate an integer, etc.","title":"\ud83c\udff7\ufe0f RAIL Elements"},{"location":"rail/output/#supported-types","text":"Guardrails supports many data types, including:, string , integer , float , boolean , list , object , url , email and many more. Check out the RAIL Data Types page for a list of supported data types.","title":"Supported types"},{"location":"rail/output/#scalar-vs-non-scalar-types","text":"Guardrails supports two types of data types: scalar and non-scalar. Scalar Non Scalar Scalar types are void elements, and can't have any child elements. Non-scalar types can be non-void, and can have closing tags and child elements. Syntax: <string ... /> Syntax: Examples: string , integer , float , boolean , url , email , etc. Examples: list and object are the only non-scalar types supported by Guardrails.","title":"Scalar vs Non-scalar types"},{"location":"rail/output/#supported-attributes","text":"Each element can have attributes that specify additional information about the data, such as: name attribute that specifies the name of the field. This will be the key in the output JSON. E.g. RAIL Spec Output JSON <rail version= \"0.1\" > <output> <string name= \"some_key\" /> </output> </rail> { \"some_key\" : \"...\" } description attribute that specifies the description of the field. This is similar to a prompt that will be provided to the LLM. It can contain more context to help the LLM generate the correct output. (Coming soon!) required attribute that specifies whether the field is required or not. If the field is required, the LLM will be asked to generate the field until it is generated correctly. If the field is not required, the LLM will not be asked to generate the field if it is not generated correctly. format attribute that specifies the quality criteria that the field should respect. The format attribute can contain multiple quality criteria separated by a colon ( ; ). For example, two-words; upper-case . on-fail-{quality-criteria} attribute that specifies the corrective action to take in case the quality criteria is not met. For example, on-fail-two-words=\"reask\" specifies that if the field does not have two words, the LLM should be asked to re-generate the field. E.g., RAIL Spec Output JSON <rail version= \"0.1\" > <output> <string name= \"some_key\" description= \"Detailed description of what the value of the key should be\" required= \"true\" format= \"two-words; upper-case\" on-fail-two-words= \"reask\" on-fail-upper-case= \"noop\" /> </output> </rail> { \"some_key\" : \"SOME STRING\" }","title":"Supported attributes"},{"location":"rail/output/#specifying-output-structure","text":"You can combine RAIL elements to create an arbitrarily complex output structure.","title":"\u26a1 Specifying output structure"},{"location":"rail/output/#flat-json-output","text":"RAIL Spec Output JSON <rail version= \"0.1\" > <output> <string name= \"some_key\" .... /> <integer name= \"some_other_key\" .... /> </output> </rail> { \"some_key\" : \"string\" , \"some_other_key\" : 0 }","title":"Flat JSON output"},{"location":"rail/output/#json-output-with-objects","text":"object elements can be used to specify a JSON object, which is a collection of key-value pairs. A child of an object element represents a key in the JSON object. The child element can be any RAIL element, including another list or object elements. The value of the key is generated by the LLM based on the info provided by the child element. An object element can have multiple children, each of which can be any RAIL element, including another list or object elements. Formatters can be applied to the child elements of an object element. For example, if the child element is a string element, the format attribute can be used to specify the quality criteria for the strings in the list. RAIL Spec Output JSON <rail version= \"0.1\" > <output> <object name= \"some_object\" > <string name= \"some_str_key\" description= \"What should the value for this key represent?\" format= \"two-words; upper-case\" /> <integer name= \"some_other_key\" description= \"What should this integer represent?\" format= \"min-val: 0\" /> </object> </output> </rail> { \"some_object\" : { \"some_str_key\" : \"SOME STRING\" , \"some_other_key\" : 0 } } In the above example, \"SOME STRING\" is the value for the some_str_key key, and is generated based on the name, description and quality criteria provided by the <string name=\"some_str_key\" ... /> element. Note The object element doesn't need to have children. If child elements are not provided, the LLM will automatically generate keys and values for the object based on the name , description and format attributes of the object element. Providing child elements is useful when you want to specify the keys and values that the LLM should generate.","title":"JSON output with objects"},{"location":"rail/output/#json-output-with-lists","text":"list elements can be used to specify a list of values. Currently, a list element can only contain a single child element. This means that a list can only contain a single type of data. For example, a list can only contain strings, or a list can only contain integers, but a list cannot contain both strings and integers. This child element can be any RAIL element, including another list or object elements. The child of a list element doesn't need to have a name attribute, since items in a list don't have names. Formatters can be applied to the child element of a list element. For example, if the child element is a string element, the format attribute can be used to specify the quality criteria for the strings in the list. RAIL Spec Output JSON <rail version= \"0.1\" > <output> <list name= \"some_list\" format= \"min-len: 2\" > <string format= \"two-words; upper-case\" /> </list> </output> </rail> { \"some_list\" : [ \"STRING 1\" , \"STRING 2\" ] } Note The list element doesn't need to have a child element. If a child element is not provided, the LLM will automatically generate values for the list based on the name , description and format attributes of the list element. Providing a child element is useful when you want to have more control over the values that the LLM should generate.","title":"JSON output with lists"},{"location":"rail/output/#specifying-quality-criteria","text":"The format attribute allows specifying the quality criteria for each field in the expected output. The format attribute can contain multiple quality criteria separated by a colon ( ; ). For example, <rail version= \"0.1\" > <output> <string name= \"text\" description= \"The generated text\" format= \"two-words; upper-case\" on-fail-two-words= \"reask\" /> </output> </rail> The above example specifies that the text field should be a string with two words and the text should be returned in upper case.","title":"\ud83c\udf40 Specifying quality criteria"},{"location":"rail/output/#quality-criteria-under-the-hood","text":"Under the hood, the format attribute is parsed into a list of quality criteria. Each quality criteria is backed by a Validator class that checks if the generated output meets the quality criteria. For example, the two-words quality criteria is backed by the TwoWords class, which checks if the generated output has two words. Each quality criteria is then checked against the generated output. If the quality criteria is not met, the corrective action specified by the on-fail-{quality-criteria} attribute is taken.","title":"Quality criteria under the hood"},{"location":"rail/output/#supported-criteria","text":"Each quality critera is relevant to a specific data type. For example, the two-words quality criteria is only relevant to strings, and the positive quality criteria is only relevant to integers and floats. To see the full list of supported quality criteria, check out the Validation page.","title":"Supported criteria"},{"location":"rail/output/#specifying-corrective-actions","text":"The on-fail-{quality-criteria} attribute allows specifying the corrective action that should be taken if the quality criteria is not met. The corrective action can be one of the following: Action Behavior reask Reask the LLM to generate an output that meets the quality criteria. The prompt used for reasking contains information about which quality criteria failed, which is auto-generated by the validator. fix Programmatically fix the generated output to meet the quality criteria. E.g. for the formatter two-words , the programatic fix simply takes the first 2 words of the generated string. filter Filter the incorrect value. This only filters the field that fails, and will return the rest of the generated output. refrain Refrain from returning an output. If a formatter has the corrective action refrain, then on failure there will be a None output returned instead of the JSON. noop Do nothing. The failure will still be recorded in the logs, but no corrective action will be taken. exception Raise an exception when validation fails. fix_reask First, fix the generated output deterministically, and then rerun validation with the deterministically fixed output. If validation fails, then perform reasking.","title":"\ud83d\udee0\ufe0f Specifying corrective actions"},{"location":"rail/output/#adding-compiled-output-element-to-prompt","text":"In order to generate the correct LLM output, the output schema needs to be compiled and added to the prompt. This is handled automatically by the Guardrails library. The output element can be compiled into different formats to be used in the prompt. Currently, only a passthrough compilation into XML is supported, but in the future we will support additional compilation formats like TypeScript .","title":"\ud83d\ude92 Adding compiled output element to prompt"},{"location":"rail/output/#passthrough-xml-compilation","text":"By default, the output element will be compiled into XML and added to the prompt. Compilation into XML involves removing any on-fail-{quality-criteria} attributes, and adding the output element to the prompt. An example of the compiled output element: RAIL Spec Compiled XML added to prompt <rail version= \"0.1\" > <output> <string name= \"text\" description= \"The generated text\" format= \"two-words; upper-case\" /> </output> </rail> <output> <string name= \"text\" description= \"The generated text\" /> </output>","title":"Passthrough (XML) compilation"},{"location":"rail/output/#typescript-compilation","text":"Coming soon!","title":"TypeScript Compilation"},{"location":"rail/output/#unsupported-tags-and-attributes","text":"By default, Guardrails will not throw an error if you add an unsupported type, attribute or quality criteria. Instead, it will treat the unsupported type as a string, and will not perform any quality checks on the field. Often, LLMs will generate a string for an unsupported type, so this behavior is useful. Unsupported tags and attributes will still be included in the output schema definition that is appended to the prompt. This behavior can be changed by setting the strict attribute of the <output> element to true . If strict is set to true , Guardrails will throw an error if you add an unsupported type, attribute or quality criteria. <rail version= \"0.1\" > <output strict= \"true\" > <unsupported-type ... /> </output> </rail> This will throw an error: \u274c Error: Unsupported type: unsupported-type","title":"\u2753 Unsupported tags and attributes"},{"location":"rail/prompt/","text":"Prompt Element The <prompt></prompt> element contains the high level instructions sent to the LLM, that describe the high level task. \ud83d\udcda Components of a Prompt In addition to the high level task description, the prompt also contains the following: Component Syntax Description Variables {{variable_name}} These are provided by the user at runtime, and substituted in the prompt. Output Schema {output_schema} This is the schema of the expected output, and is compiled based on the output element. For more information on how the output schema is compiled for the prompt, check out output element compilation . Prompt Primitives @prompt_primitive_name These are pre-constructed prompts that are useful for common tasks. E.g., some primitives may contain information that helps the LLM understand the output schema better. To see the full list of prompt primitives, check out guardrails/constants.xml . <rail version= \"0.1\" > <prompt> <!-- (1)! --> Given the following document, answer the following questions. If the answer doesn't exist in the document, enter 'None'. {document} <!-- (2)! --> @xml_prefix_prompt <!-- (3)! --> {{output_schema}} <!-- (4)! --> @json_suffix_prompt <!-- (5)! --> </prompt> </rail> The prompt contains high level task information. The variable {{document}} is provided by the user at runtime. @xml_prefix_prompt is a prompt primitive provided by guardrails. It is equivalent to typing the following lines in the prompt: Given below is XML that describes the information to extract from this document and the tags to extract it into. {output_schema} is the output schema and contains information about , which is compiled based on the output element. @json_suffix_prompt is a prompt primitive provided by guardrails. It is equivalent to typing the following lines in the prompt: ONLY return a valid JSON object (no other text is necessary). The JSON MUST conform to the XML format, including any types and format requests e.g. requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere, enter `None`.","title":"Prompt Element"},{"location":"rail/prompt/#prompt-element","text":"The <prompt></prompt> element contains the high level instructions sent to the LLM, that describe the high level task.","title":"Prompt Element"},{"location":"rail/prompt/#components-of-a-prompt","text":"In addition to the high level task description, the prompt also contains the following: Component Syntax Description Variables {{variable_name}} These are provided by the user at runtime, and substituted in the prompt. Output Schema {output_schema} This is the schema of the expected output, and is compiled based on the output element. For more information on how the output schema is compiled for the prompt, check out output element compilation . Prompt Primitives @prompt_primitive_name These are pre-constructed prompts that are useful for common tasks. E.g., some primitives may contain information that helps the LLM understand the output schema better. To see the full list of prompt primitives, check out guardrails/constants.xml . <rail version= \"0.1\" > <prompt> <!-- (1)! --> Given the following document, answer the following questions. If the answer doesn't exist in the document, enter 'None'. {document} <!-- (2)! --> @xml_prefix_prompt <!-- (3)! --> {{output_schema}} <!-- (4)! --> @json_suffix_prompt <!-- (5)! --> </prompt> </rail> The prompt contains high level task information. The variable {{document}} is provided by the user at runtime. @xml_prefix_prompt is a prompt primitive provided by guardrails. It is equivalent to typing the following lines in the prompt: Given below is XML that describes the information to extract from this document and the tags to extract it into. {output_schema} is the output schema and contains information about , which is compiled based on the output element. @json_suffix_prompt is a prompt primitive provided by guardrails. It is equivalent to typing the following lines in the prompt: ONLY return a valid JSON object (no other text is necessary). The JSON MUST conform to the XML format, including any types and format requests e.g. requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere, enter `None`.","title":"\ud83d\udcda Components of a Prompt"},{"location":"rail/script/","text":"Script Element Note This is a beta feature, and serves more advanced use cases. If you're just getting started with Guardrails, you can skip this section for now. The <script></script> element contains any custom code that a developer wants to use. Common use cases include: Custom Validators : Here's a few examples of adding custom validators via the <script> tag: adding a validator to filter secret keys , adding a validator to check if an ingredient is vegan , adding a validator to check if a chess move is valid . Custom DataTypes : Examples coming soon! Here's the syntax for the <script> element: <rail version= \"0.1\" > <script language= \"python\" > # your code here </script> </rail> \ud83d\udd10 Adding a custom Validator Here's an example of adding a custom validator to check if a generated text contains any secret keys. The validator is added via the <script> element. <rail version= \"0.1\" > <script> from guardrails.validators import Validator, EventDetail, register_validator <!-- (1)! --> @register_validator(name=\"custom-validator\", data_type=\"string\") <!-- (2)! --> class CustomValidatorName(Validator): <!-- (3)! --> def validate(self, key, value, schema) -> Dict: <!-- (4)! --> # Check if value meets the criteria. valid_condition = ... descriptive_error_message = ... if not valid_condition: # Create a programatically corrected value. correct_value = ... raise EventDetail( <!-- (5)! --> key=key, value=value, schema=schema, error_message=descriptive_error_message, fix_value=correct_value, ) return schema <!-- (6)! --> </script> </rail> In order to add a custom validator, you need to import the Validator class, EventDetail class, and register_validator decorator. Add the register_validator decorator to your custom validator class. The name argument is the name of the validator (this will be used in RAIL as the formatter name), and the data_type argument is the data type that the validator is applicable to. In this case, the validator is applicable to strings. Subclass the Validator class. You only need to implement the validate method. The validate method takes in the key , value , and schema as arguments. The key is the key of the value in the JSON object, the value is the value itself, and the schema is the schema of the value. The validate method raises an EventDetail object if the value is invalid. This object is then used to take corrective action specified in the RAIL spec. The validate method should return the schema if the value is valid. The custom validator defined in above can be used in the RAIL spec as follows: <rail version= \"0.1\" > <output> <string .... format= \"custom-validator\" on-fail-custom-validator= \"fix\" > </output> </rail> \ud83e\udded Adding a custom DataType Coming soon!","title":"(Experimental) Script Element"},{"location":"rail/script/#script-element","text":"Note This is a beta feature, and serves more advanced use cases. If you're just getting started with Guardrails, you can skip this section for now. The <script></script> element contains any custom code that a developer wants to use. Common use cases include: Custom Validators : Here's a few examples of adding custom validators via the <script> tag: adding a validator to filter secret keys , adding a validator to check if an ingredient is vegan , adding a validator to check if a chess move is valid . Custom DataTypes : Examples coming soon! Here's the syntax for the <script> element: <rail version= \"0.1\" > <script language= \"python\" > # your code here </script> </rail>","title":"Script Element"},{"location":"rail/script/#adding-a-custom-validator","text":"Here's an example of adding a custom validator to check if a generated text contains any secret keys. The validator is added via the <script> element. <rail version= \"0.1\" > <script> from guardrails.validators import Validator, EventDetail, register_validator <!-- (1)! --> @register_validator(name=\"custom-validator\", data_type=\"string\") <!-- (2)! --> class CustomValidatorName(Validator): <!-- (3)! --> def validate(self, key, value, schema) -> Dict: <!-- (4)! --> # Check if value meets the criteria. valid_condition = ... descriptive_error_message = ... if not valid_condition: # Create a programatically corrected value. correct_value = ... raise EventDetail( <!-- (5)! --> key=key, value=value, schema=schema, error_message=descriptive_error_message, fix_value=correct_value, ) return schema <!-- (6)! --> </script> </rail> In order to add a custom validator, you need to import the Validator class, EventDetail class, and register_validator decorator. Add the register_validator decorator to your custom validator class. The name argument is the name of the validator (this will be used in RAIL as the formatter name), and the data_type argument is the data type that the validator is applicable to. In this case, the validator is applicable to strings. Subclass the Validator class. You only need to implement the validate method. The validate method takes in the key , value , and schema as arguments. The key is the key of the value in the JSON object, the value is the value itself, and the schema is the schema of the value. The validate method raises an EventDetail object if the value is invalid. This object is then used to take corrective action specified in the RAIL spec. The validate method should return the schema if the value is valid. The custom validator defined in above can be used in the RAIL spec as follows: <rail version= \"0.1\" > <output> <string .... format= \"custom-validator\" on-fail-custom-validator= \"fix\" > </output> </rail>","title":"\ud83d\udd10 Adding a custom Validator"},{"location":"rail/script/#adding-a-custom-datatype","text":"Coming soon!","title":"\ud83e\udded Adding a custom DataType"}]}