{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Guardrails.ai","text":"<p>Note: Guardrails is an alpha release, so expect sharp edges and bugs.</p>"},{"location":"#what-is-guardrails","title":"\ud83d\udee4\ufe0f What is Guardrails?","text":"<p>Guardrails is a Python package that lets a user add structure, type and quality guarantees to the outputs of large language models (LLMs). Guardrails:</p> <ul> <li>does pydantic-style validation of LLM outputs. This includes semantic validation such as checking for bias in generated text, checking for bugs in generated code, etc.</li> <li>takes corrective actions (e.g. reasking LLM) when validation fails,</li> <li>enforces structure and type guarantees (e.g. JSON).</li> </ul>"},{"location":"#under-the-hood","title":"\ud83d\ude92 Under the hood","text":"<p>Guardrails provides a format (<code>.rail</code>) for enforcing a specification on an LLM output, and a lightweight wrapper around LLM API calls to implement this spec.</p> <ol> <li><code>rail</code> (Reliable AI markup Language) files for specifying structure and type information, validators and corrective actions over LLM outputs.</li> <li><code>gd.Guard</code> wraps around LLM API calls to structure, validate and correct the outputs.</li> </ol> <pre><code>graph LR\n    A[Create `RAIL` spec] --&gt; B[\"Initialize `guard` from spec\"];\n    B --&gt; C[\"Wrap LLM API call with `guard`\"];</code></pre> <p>Check out the Getting Started guide to learn how to use Guardrails.</p>"},{"location":"#rail-spec","title":"\ud83d\udcdc <code>RAIL</code> spec","text":"<p>At the heart of Guardrails is the <code>rail</code> spec. <code>rail</code> is intended to be a language-agnostic, human-readable format for specifying structure and type information, validators and corrective actions over LLM outputs.</p> <p><code>rail</code> is a flavor of XML that lets users specify:</p> <ol> <li>The expected structure and types of the LLM output (e.g. JSON),</li> <li>The quality criteria for the output to be considered valid (e.g. generated text should be bias-free, generated code should be bug-free),</li> <li>Corrective actions to be taken if the output is invalid (e.g. reask the LLM, filter out the invalid output, etc.)</li> </ol> <p>To learn more about the <code>rail</code> spec and the design decisions behind it, check out the Rail Specification. To learn how to write your own <code>rail</code> spec, check out specifying <code>output</code> elements in RAIL.</p>"},{"location":"#roadmap","title":"\ud83d\udccd Roadmap","text":"<ul> <li> Adding more examples, new use cases and domains</li> <li> Adding integrations with langchain, gpt-index, minichain, manifest</li> <li> Expanding validators offering</li> <li> More compilers from <code>.rail</code> -&gt; LLM prompt (e.g. <code>.rail</code> -&gt; TypeScript)</li> <li> Informative logging</li> <li> Improving reasking logic</li> <li> A guardrails.js implementation</li> <li> VSCode extension for <code>.rail</code> files</li> <li> Next version of <code>.rail</code> format</li> <li> Add more LLM providers</li> </ul>"},{"location":"cli/","title":"Using Guardrails from a CLI","text":"<p>Guardrails can be used from the command line to validate the output of an LLM. Currently, the guardrails CLI doesn't support reasking.</p>"},{"location":"cli/#usage","title":"Usage","text":"<pre><code>guardrails validate &lt;path to rail spec&gt; &lt;llm output as string&gt; --out &lt;output path for validated JSON&gt;\n</code></pre>"},{"location":"data_types/","title":"Data Types","text":""},{"location":"data_types/#guardrails.datatypes.Boolean","title":"<code>Boolean</code>","text":"<p>         Bases: <code>ScalarType</code></p> <p>Element tag: <code>&lt;bool&gt;</code></p>"},{"location":"data_types/#guardrails.datatypes.Case","title":"<code>Case(children, format_attr, element)</code>","text":"<p>         Bases: <code>NonScalarType</code></p> <p>Element tag: <code>&lt;case&gt;</code></p>"},{"location":"data_types/#guardrails.datatypes.Choice","title":"<code>Choice(children, format_attr, element)</code>","text":"<p>         Bases: <code>NonScalarType</code></p> <p>Element tag: <code>&lt;object&gt;</code></p>"},{"location":"data_types/#guardrails.datatypes.Date","title":"<code>Date(children, format_attr, element)</code>","text":"<p>         Bases: <code>ScalarType</code></p> <p>Element tag: <code>&lt;date&gt;</code></p> <p>To configure the date format, create a date-format attribute on the element. E.g. <code>&lt;date name=\"...\" ... date-format=\"%Y-%m-%d\" /&gt;</code></p>"},{"location":"data_types/#guardrails.datatypes.Date.date_format","title":"<code>date_format = '%Y-%m-%d'</code>  <code>instance-attribute</code>","text":""},{"location":"data_types/#guardrails.datatypes.Email","title":"<code>Email</code>","text":"<p>         Bases: <code>ScalarType</code></p> <p>Element tag: <code>&lt;email&gt;</code></p>"},{"location":"data_types/#guardrails.datatypes.Field","title":"<code>Field</code>","text":"<p>         Bases: <code>ScalarType</code></p> <p>Element tag: <code>&lt;field&gt;</code></p>"},{"location":"data_types/#guardrails.datatypes.Float","title":"<code>Float</code>","text":"<p>         Bases: <code>ScalarType</code></p> <p>Element tag: <code>&lt;float&gt;</code></p>"},{"location":"data_types/#guardrails.datatypes.Integer","title":"<code>Integer</code>","text":"<p>         Bases: <code>ScalarType</code></p> <p>Element tag: <code>&lt;integer&gt;</code></p>"},{"location":"data_types/#guardrails.datatypes.List","title":"<code>List</code>","text":"<p>         Bases: <code>NonScalarType</code></p> <p>Element tag: <code>&lt;list&gt;</code></p>"},{"location":"data_types/#guardrails.datatypes.Object","title":"<code>Object</code>","text":"<p>         Bases: <code>NonScalarType</code></p> <p>Element tag: <code>&lt;object&gt;</code></p>"},{"location":"data_types/#guardrails.datatypes.Percentage","title":"<code>Percentage</code>","text":"<p>         Bases: <code>ScalarType</code></p> <p>Element tag: <code>&lt;percentage&gt;</code></p>"},{"location":"data_types/#guardrails.datatypes.Pydantic","title":"<code>Pydantic(model, children, format_attr, element)</code>","text":"<p>         Bases: <code>NonScalarType</code></p> <p>Element tag: <code>&lt;pydantic&gt;</code></p>"},{"location":"data_types/#guardrails.datatypes.PythonCode","title":"<code>PythonCode</code>","text":"<p>         Bases: <code>ScalarType</code></p> <p>Element tag: <code>&lt;pythoncode&gt;</code></p>"},{"location":"data_types/#guardrails.datatypes.SQLCode","title":"<code>SQLCode</code>","text":"<p>         Bases: <code>ScalarType</code></p> <p>Element tag: <code>&lt;sql&gt;</code></p>"},{"location":"data_types/#guardrails.datatypes.String","title":"<code>String</code>","text":"<p>         Bases: <code>ScalarType</code></p> <p>Element tag: <code>&lt;string&gt;</code></p>"},{"location":"data_types/#guardrails.datatypes.Time","title":"<code>Time(children, format_attr, element)</code>","text":"<p>         Bases: <code>ScalarType</code></p> <p>Element tag: <code>&lt;time&gt;</code></p> <p>To configure the date format, create a date-format attribute on the element. E.g. <code>&lt;time name=\"...\" ... time-format=\"%H:%M:%S\" /&gt;</code></p>"},{"location":"data_types/#guardrails.datatypes.Time.time_format","title":"<code>time_format = '%H:%M:%S'</code>  <code>instance-attribute</code>","text":""},{"location":"data_types/#guardrails.datatypes.URL","title":"<code>URL</code>","text":"<p>         Bases: <code>ScalarType</code></p> <p>Element tag: <code>&lt;url&gt;</code></p>"},{"location":"getting_started/","title":"Getting Started","text":"<pre><code>doctors_notes = \"\"\"49 y/o Male with chronic macular rash to face &amp; hair, worse in beard, eyebrows &amp; nares.\nItchy, flaky, slightly scaly. Moderate response to OTC steroid cream\"\"\"\n</code></pre> <p>We want our extracted information to contain the following fields:</p> <ol> <li>Patient's gender</li> <li>Patient's age</li> <li>A list of symptoms, each with a severity rating and an affected area</li> <li>A list of medications, each with information about the patient's response to the medication</li> </ol> <pre><code>!pip install guardrails-ai\n</code></pre> <pre><code>&lt;object name=\"patient_info\"&gt;\n&lt;string name=\"gender\" description=\"Patient's gender\" /&gt;\n&lt;integer name=\"age\" format=\"valid-range: 0 100\"/&gt;  &lt;!-- (1)! --&gt;\n&lt;list name=\"symptoms\" description=\"Symptoms that the patient is currently experiencing. Each symptom should be classified into  separate item in the list.\"&gt;\n&lt;object&gt;\n&lt;string name=\"symptom\" description=\"Symptom that a patient is experiencing\" /&gt;\n&lt;string name=\"affected area\" description=\"What part of the body the symptom is affecting\"\nformat=\"valid-choices: {['head', 'neck', 'chest']}\"\non-fail-valid-choices=\"reask\"\n/&gt;  &lt;!-- (2)! --&gt;\n&lt;/object&gt;\n&lt;/list&gt;\n&lt;list name=\"current_meds\" description=\"Medications the patient is currently taking and their response\"&gt;\n&lt;object&gt;\n&lt;string name=\"medication\" description=\"Name of the medication the patient is taking\" /&gt;\n&lt;string name=\"response\" description=\"How the patient is responding to the medication\" /&gt;\n&lt;/object&gt;\n&lt;/list&gt;\n&lt;/object&gt;\n</code></pre> <ol> <li>We specify the <code>valid-range</code> validator for the <code>age</code> field. This validator takes the min and max arguments, which we pass as <code>0</code> and <code>100</code> respectively.</li> <li>We specify the <code>valid-choices</code> validator for the <code>affected_area</code> field. This validator will check that the value of the field is one of the choices specified in the <code>format</code> attribute. We specify that if the <code>affected_area</code> field fails the <code>valid-choices</code> validator, we should re-prompt the LLM to correct its output. This is done by setting the <code>on-fail-valid-choices</code> attribute to <code>reask</code>.</li> </ol> <p>Note</p> <p>In order to pass in a list of choices, we wrap the list in curly braces -- <code>{['head', 'neck', 'chest']}</code>. Anything inside the curly braces will be evaluated as a Python expression. This allows us to pass in more complex data structures or objects as arguments to the validator. </p> <pre><code>from rich import print\nimport guardrails as gd\nguard = gd.Guard.from_rail('getting_started.rail')\n</code></pre> <p>We can see that the <code>Guard</code> object compiles the <code>RAIL</code> output specification and adds it to the provided prompt.</p> <p>Next, we call the <code>Guard</code> object with the LLM API call as the first argument and add any additional arguments to the LLM API call as the remaining arguments.</p> <pre><code>import openai\nimport os\n# Set your OpenAI API key\nos.environ[\"OPENAI_API_KEY\"] = \"YOUR_OPENAI_API_KEY\"\n# Wrap the OpenAI API call with the `guard` object\nraw_llm_output, validated_output = guard(\nopenai.Completion.create,\nprompt_params={\"doctors_notes\": doctors_notes},\nengine=\"text-davinci-003\",\nmax_tokens=1024,\ntemperature=0.3,\n)\n# Print the validated output from the LLM\nprint(validated_output)\n</code></pre> <pre>\n<code>/Users/shreyarajpal/anaconda3/envs/tiff-env/lib/python3.9/site-packages/eliot/json.py:22: FutureWarning: In the future `np.bool` will be defined as the corresponding NumPy scalar.  (This may have returned Python scalars in past versions.\n  if isinstance(o, (numpy.bool, numpy.bool_)):\n</code>\n</pre> <pre>{\n    'patient_info': {\n        'gender': 'Male',\n        'age': 49,\n        'symptoms': [\n            {'symptom': 'macular rash', 'affected area': 'head'},\n            {'symptom': 'itchy, flaky, slightly scaly', 'affected area': 'neck'}\n        ],\n        'current_meds': [{'medication': 'OTC steroid cream', 'response': 'Moderate'}]\n    }\n}\n</pre> <p>We can see that our output was structured correctly, and that the values of the <code>affected_area</code> field were one of the valid choices.</p> <pre><code>print(guard.state.most_recent_call.history[0].rich_group)\n</code></pre> <pre>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Prompt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502                                                                                                                 \u2502\n\u2502                                                                                                                 \u2502\n\u2502 Given the following doctor's notes about a patient, please extract a dictionary that contains the patient's     \u2502\n\u2502 information.                                                                                                    \u2502\n\u2502                                                                                                                 \u2502\n\u2502 49 y/o Male with chronic macular rash to face &amp; hair, worse in beard, eyebrows &amp; nares.                         \u2502\n\u2502 Itchy, flaky, slightly scaly. Moderate response to OTC steroid cream                                            \u2502\n\u2502                                                                                                                 \u2502\n\u2502                                                                                                                 \u2502\n\u2502 Given below is XML that describes the information to extract from this document and the tags to extract it      \u2502\n\u2502 into.                                                                                                           \u2502\n\u2502                                                                                                                 \u2502\n\u2502 &lt;output&gt;                                                                                                        \u2502\n\u2502     &lt;object name=\"patient_info\"&gt;                                                                                \u2502\n\u2502         &lt;string name=\"gender\" description=\"Patient's gender\"/&gt;                                                  \u2502\n\u2502         &lt;integer name=\"age\" format=\"valid-range: min=0 max=100\"/&gt;                                               \u2502\n\u2502         &lt;list name=\"symptoms\" description=\"Symptoms that the patient is currently experiencing. Each symptom    \u2502\n\u2502 should be classified into a separate item in the list.\"&gt;                                                        \u2502\n\u2502             &lt;object&gt;                                                                                            \u2502\n\u2502                 &lt;string name=\"symptom\" description=\"Symptom that a patient is experiencing\"/&gt;                   \u2502\n\u2502                 &lt;string name=\"affected area\" description=\"What part of the body the symptom is affecting\"       \u2502\n\u2502 format=\"valid-choices: choices=['head', 'neck', 'chest']\"/&gt;                                                     \u2502\n\u2502             &lt;/object&gt;                                                                                           \u2502\n\u2502         &lt;/list&gt;                                                                                                 \u2502\n\u2502         &lt;list name=\"current_meds\" description=\"Medications the patient is currently taking and their response\"&gt; \u2502\n\u2502             &lt;object&gt;                                                                                            \u2502\n\u2502                 &lt;string name=\"medication\" description=\"Name of the medication the patient is taking\"/&gt;          \u2502\n\u2502                 &lt;string name=\"response\" description=\"How the patient is responding to the medication\"/&gt;         \u2502\n\u2502             &lt;/object&gt;                                                                                           \u2502\n\u2502         &lt;/list&gt;                                                                                                 \u2502\n\u2502     &lt;/object&gt;                                                                                                   \u2502\n\u2502 &lt;/output&gt;                                                                                                       \u2502\n\u2502                                                                                                                 \u2502\n\u2502                                                                                                                 \u2502\n\u2502 ONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the `name`  \u2502\n\u2502 attribute of the corresponding XML, and the value is of the type specified by the corresponding XML's tag. The  \u2502\n\u2502 JSON MUST conform to the XML format, including any types and format requests e.g. requests for lists, objects   \u2502\n\u2502 and specific types. Be correct and concise.                                                                     \u2502\n\u2502                                                                                                                 \u2502\n\u2502 Here are examples of simple (XML, JSON) pairs that show the expected behavior:                                  \u2502\n\u2502 - `&lt;string name='foo' format='two-words lower-case' /&gt;` =&gt; `{'foo': 'example one'}`                             \u2502\n\u2502 - `&lt;list name='bar'&gt;&lt;string format='upper-case' /&gt;&lt;/list&gt;` =&gt; `{\"bar\": ['STRING ONE', 'STRING TWO', etc.]}`     \u2502\n\u2502 - `&lt;object name='baz'&gt;&lt;string name=\"foo\" format=\"capitalize two-words\" /&gt;&lt;integer name=\"index\"                  \u2502\n\u2502 format=\"1-indexed\" /&gt;&lt;/object&gt;` =&gt; `{'baz': {'foo': 'Some String', 'index': 1}}`                                \u2502\n\u2502                                                                                                                 \u2502\n\u2502                                                                                                                 \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Raw LLM Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 {                                                                                                               \u2502\n\u2502     \"patient_info\": {                                                                                           \u2502\n\u2502         \"gender\": \"Male\",                                                                                       \u2502\n\u2502         \"age\": 49,                                                                                              \u2502\n\u2502         \"symptoms\": [                                                                                           \u2502\n\u2502             {                                                                                                   \u2502\n\u2502                 \"symptom\": \"macular rash\",                                                                      \u2502\n\u2502                 \"affected area\": \"face &amp; hair\"                                                                  \u2502\n\u2502             },                                                                                                  \u2502\n\u2502             {                                                                                                   \u2502\n\u2502                 \"symptom\": \"itchy, flaky, slightly scaly\",                                                      \u2502\n\u2502                 \"affected area\": \"beard, eyebrows &amp; nares\"                                                      \u2502\n\u2502             }                                                                                                   \u2502\n\u2502         ],                                                                                                      \u2502\n\u2502         \"current_meds\": [                                                                                       \u2502\n\u2502             {                                                                                                   \u2502\n\u2502                 \"medication\": \"OTC steroid cream\",                                                              \u2502\n\u2502                 \"response\": \"Moderate\"                                                                          \u2502\n\u2502             }                                                                                                   \u2502\n\u2502         ]                                                                                                       \u2502\n\u2502     }                                                                                                           \u2502\n\u2502 }                                                                                                               \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Validated Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 {                                                                                                               \u2502\n\u2502     'patient_info': {                                                                                           \u2502\n\u2502         'gender': 'Male',                                                                                       \u2502\n\u2502         'age': 49,                                                                                              \u2502\n\u2502         'symptoms': [                                                                                           \u2502\n\u2502             {                                                                                                   \u2502\n\u2502                 'symptom': 'macular rash',                                                                      \u2502\n\u2502                 'affected area': ReAsk(                                                                         \u2502\n\u2502                     incorrect_value='face &amp; hair',                                                              \u2502\n\u2502                     error_message=\"Value face &amp; hair is not in choices ['head', 'neck', 'chest'].\",             \u2502\n\u2502                     fix_value=None,                                                                             \u2502\n\u2502                     path=['patient_info', 'symptoms', 0, 'affected area']                                       \u2502\n\u2502                 )                                                                                               \u2502\n\u2502             },                                                                                                  \u2502\n\u2502             {                                                                                                   \u2502\n\u2502                 'symptom': 'itchy, flaky, slightly scaly',                                                      \u2502\n\u2502                 'affected area': ReAsk(                                                                         \u2502\n\u2502                     incorrect_value='beard, eyebrows &amp; nares',                                                  \u2502\n\u2502                     error_message=\"Value beard, eyebrows &amp; nares is not in choices ['head', 'neck', 'chest'].\", \u2502\n\u2502                     fix_value=None,                                                                             \u2502\n\u2502                     path=['patient_info', 'symptoms', 1, 'affected area']                                       \u2502\n\u2502                 )                                                                                               \u2502\n\u2502             }                                                                                                   \u2502\n\u2502         ],                                                                                                      \u2502\n\u2502         'current_meds': [                                                                                       \u2502\n\u2502             {'medication': 'OTC steroid cream', 'response': 'Moderate'}                                         \u2502\n\u2502         ]                                                                                                       \u2502\n\u2502     }                                                                                                           \u2502\n\u2502 }                                                                                                               \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</pre> <p>We can see that the output returned by the LLM contained invalid values for the <code>affected_area</code> field.</p> <p>On validation, Guardrails created <code>ReAsk</code> objects that contains all of the information needed to re-prompt the LLM to correct its output.</p> <pre><code>print(guard.state.most_recent_call.history[1].rich_group)\n</code></pre> <pre>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Prompt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502                                                                                                                 \u2502\n\u2502 I was given the following JSON response, which had problems due to incorrect values.                            \u2502\n\u2502                                                                                                                 \u2502\n\u2502 {                                                                                                               \u2502\n\u2502   \"patient_info\": {                                                                                             \u2502\n\u2502     \"symptoms\": [                                                                                               \u2502\n\u2502       {                                                                                                         \u2502\n\u2502         \"affected area\": {                                                                                      \u2502\n\u2502           \"incorrect_value\": \"face &amp; hair\",                                                                     \u2502\n\u2502           \"error_message\": \"Value face &amp; hair is not in choices ['head', 'neck', 'chest'].\"                     \u2502\n\u2502         }                                                                                                       \u2502\n\u2502       },                                                                                                        \u2502\n\u2502       {                                                                                                         \u2502\n\u2502         \"affected area\": {                                                                                      \u2502\n\u2502           \"incorrect_value\": \"beard, eyebrows &amp; nares\",                                                         \u2502\n\u2502           \"error_message\": \"Value beard, eyebrows &amp; nares is not in choices ['head', 'neck', 'chest'].\"         \u2502\n\u2502         }                                                                                                       \u2502\n\u2502       }                                                                                                         \u2502\n\u2502     ]                                                                                                           \u2502\n\u2502   }                                                                                                             \u2502\n\u2502 }                                                                                                               \u2502\n\u2502                                                                                                                 \u2502\n\u2502 Help me correct the incorrect values based on the given error messages.                                         \u2502\n\u2502                                                                                                                 \u2502\n\u2502 Given below is XML that describes the information to extract from this document and the tags to extract it      \u2502\n\u2502 into.                                                                                                           \u2502\n\u2502                                                                                                                 \u2502\n\u2502 &lt;output&gt;                                                                                                        \u2502\n\u2502     &lt;object name=\"patient_info\"&gt;                                                                                \u2502\n\u2502         &lt;list name=\"symptoms\" description=\"Symptoms that the patient is currently experiencing. Each symptom    \u2502\n\u2502 should be classified into a separate item in the list.\"&gt;                                                        \u2502\n\u2502             &lt;object&gt;                                                                                            \u2502\n\u2502                 &lt;string name=\"affected area\" description=\"What part of the body the symptom is affecting\"       \u2502\n\u2502 format=\"valid-choices: choices=['head', 'neck', 'chest']\"/&gt;                                                     \u2502\n\u2502             &lt;/object&gt;                                                                                           \u2502\n\u2502         &lt;/list&gt;                                                                                                 \u2502\n\u2502     &lt;/object&gt;                                                                                                   \u2502\n\u2502 &lt;/output&gt;                                                                                                       \u2502\n\u2502                                                                                                                 \u2502\n\u2502                                                                                                                 \u2502\n\u2502 ONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the `name`  \u2502\n\u2502 attribute of the corresponding XML, and the value is of the type specified by the corresponding XML's tag. The  \u2502\n\u2502 JSON MUST conform to the XML format, including any types and format requests e.g. requests for lists, objects   \u2502\n\u2502 and specific types. Be correct and concise. If you are unsure anywhere, enter `None`.                           \u2502\n\u2502                                                                                                                 \u2502\n\u2502 Here are examples of simple (XML, JSON) pairs that show the expected behavior:                                  \u2502\n\u2502 - `&lt;string name='foo' format='two-words lower-case' /&gt;` =&gt; `{{'foo': 'example one'}}`                           \u2502\n\u2502 - `&lt;list name='bar'&gt;&lt;string format='upper-case' /&gt;&lt;/list&gt;` =&gt; `{{\"bar\": ['STRING ONE', 'STRING TWO', etc.]}}`   \u2502\n\u2502 - `&lt;object name='baz'&gt;&lt;string name=\"foo\" format=\"capitalize two-words\" /&gt;&lt;integer name=\"index\"                  \u2502\n\u2502 format=\"1-indexed\" /&gt;&lt;/object&gt;` =&gt; `{{'baz': {{'foo': 'Some String', 'index': 1}}}}`                            \u2502\n\u2502                                                                                                                 \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Raw LLM Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 {                                                                                                               \u2502\n\u2502   \"patient_info\": {                                                                                             \u2502\n\u2502     \"symptoms\": [                                                                                               \u2502\n\u2502       {                                                                                                         \u2502\n\u2502         \"affected area\": \"head\"                                                                                 \u2502\n\u2502       },                                                                                                        \u2502\n\u2502       {                                                                                                         \u2502\n\u2502         \"affected area\": \"neck\"                                                                                 \u2502\n\u2502       }                                                                                                         \u2502\n\u2502     ]                                                                                                           \u2502\n\u2502   }                                                                                                             \u2502\n\u2502 }                                                                                                               \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Validated Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 {                                                                                                               \u2502\n\u2502     'patient_info': {                                                                                           \u2502\n\u2502         'gender': 'Male',                                                                                       \u2502\n\u2502         'age': 49,                                                                                              \u2502\n\u2502         'symptoms': [                                                                                           \u2502\n\u2502             {'symptom': 'macular rash', 'affected area': 'head'},                                               \u2502\n\u2502             {                                                                                                   \u2502\n\u2502                 'symptom': 'itchy, flaky, slightly scaly',                                                      \u2502\n\u2502                 'affected area': 'neck'                                                                         \u2502\n\u2502             }                                                                                                   \u2502\n\u2502         ],                                                                                                      \u2502\n\u2502         'current_meds': [                                                                                       \u2502\n\u2502             {'medication': 'OTC steroid cream', 'response': 'Moderate'}                                         \u2502\n\u2502         ]                                                                                                       \u2502\n\u2502     }                                                                                                           \u2502\n\u2502 }                                                                                                               \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</pre> <p>The prompt to the LLM was fully constructed by Guardrails. Additionally, the prompt only contained the previously invalid values for the <code>affected_area</code> field.</p> <p>On receiving the corrected LLM output, Guardrails merges it with the previously invalid values to create a valid output. It then reruns the validation step to ensure that the output is valid, and returns the output to the user.</p> <pre><code>print(guard.state.most_recent_call.tree)\n</code></pre> <pre>Logs\n\u251c\u2500\u2500 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Step 0 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502   \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Prompt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502   \u2502 \u2502                                                                                                         \u2502 \u2502\n\u2502   \u2502 \u2502                                                                                                         \u2502 \u2502\n\u2502   \u2502 \u2502 Given the following doctor's notes about a patient, please extract a dictionary that contains the       \u2502 \u2502\n\u2502   \u2502 \u2502 patient's information.                                                                                  \u2502 \u2502\n\u2502   \u2502 \u2502                                                                                                         \u2502 \u2502\n\u2502   \u2502 \u2502 49 y/o Male with chronic macular rash to face &amp; hair, worse in beard, eyebrows &amp; nares.                 \u2502 \u2502\n\u2502   \u2502 \u2502 Itchy, flaky, slightly scaly. Moderate response to OTC steroid cream                                    \u2502 \u2502\n\u2502   \u2502 \u2502                                                                                                         \u2502 \u2502\n\u2502   \u2502 \u2502                                                                                                         \u2502 \u2502\n\u2502   \u2502 \u2502 Given below is XML that describes the information to extract from this document and the tags to extract \u2502 \u2502\n\u2502   \u2502 \u2502 it into.                                                                                                \u2502 \u2502\n\u2502   \u2502 \u2502                                                                                                         \u2502 \u2502\n\u2502   \u2502 \u2502 &lt;output&gt;                                                                                                \u2502 \u2502\n\u2502   \u2502 \u2502     &lt;object name=\"patient_info\"&gt;                                                                        \u2502 \u2502\n\u2502   \u2502 \u2502         &lt;string name=\"gender\" description=\"Patient's gender\"/&gt;                                          \u2502 \u2502\n\u2502   \u2502 \u2502         &lt;integer name=\"age\" format=\"valid-range: min=0 max=100\"/&gt;                                       \u2502 \u2502\n\u2502   \u2502 \u2502         &lt;list name=\"symptoms\" description=\"Symptoms that the patient is currently experiencing. Each    \u2502 \u2502\n\u2502   \u2502 \u2502 symptom should be classified into a separate item in the list.\"&gt;                                        \u2502 \u2502\n\u2502   \u2502 \u2502             &lt;object&gt;                                                                                    \u2502 \u2502\n\u2502   \u2502 \u2502                 &lt;string name=\"symptom\" description=\"Symptom that a patient is experiencing\"/&gt;           \u2502 \u2502\n\u2502   \u2502 \u2502                 &lt;string name=\"affected area\" description=\"What part of the body the symptom is          \u2502 \u2502\n\u2502   \u2502 \u2502 affecting\" format=\"valid-choices: choices=['head', 'neck', 'chest']\"/&gt;                                  \u2502 \u2502\n\u2502   \u2502 \u2502             &lt;/object&gt;                                                                                   \u2502 \u2502\n\u2502   \u2502 \u2502         &lt;/list&gt;                                                                                         \u2502 \u2502\n\u2502   \u2502 \u2502         &lt;list name=\"current_meds\" description=\"Medications the patient is currently taking and their    \u2502 \u2502\n\u2502   \u2502 \u2502 response\"&gt;                                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502             &lt;object&gt;                                                                                    \u2502 \u2502\n\u2502   \u2502 \u2502                 &lt;string name=\"medication\" description=\"Name of the medication the patient is taking\"/&gt;  \u2502 \u2502\n\u2502   \u2502 \u2502                 &lt;string name=\"response\" description=\"How the patient is responding to the medication\"/&gt; \u2502 \u2502\n\u2502   \u2502 \u2502             &lt;/object&gt;                                                                                   \u2502 \u2502\n\u2502   \u2502 \u2502         &lt;/list&gt;                                                                                         \u2502 \u2502\n\u2502   \u2502 \u2502     &lt;/object&gt;                                                                                           \u2502 \u2502\n\u2502   \u2502 \u2502 &lt;/output&gt;                                                                                               \u2502 \u2502\n\u2502   \u2502 \u2502                                                                                                         \u2502 \u2502\n\u2502   \u2502 \u2502                                                                                                         \u2502 \u2502\n\u2502   \u2502 \u2502 ONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the \u2502 \u2502\n\u2502   \u2502 \u2502 `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding  \u2502 \u2502\n\u2502   \u2502 \u2502 XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g.        \u2502 \u2502\n\u2502   \u2502 \u2502 requests for lists, objects and specific types. Be correct and concise.                                 \u2502 \u2502\n\u2502   \u2502 \u2502                                                                                                         \u2502 \u2502\n\u2502   \u2502 \u2502 Here are examples of simple (XML, JSON) pairs that show the expected behavior:                          \u2502 \u2502\n\u2502   \u2502 \u2502 - `&lt;string name='foo' format='two-words lower-case' /&gt;` =&gt; `{'foo': 'example one'}`                     \u2502 \u2502\n\u2502   \u2502 \u2502 - `&lt;list name='bar'&gt;&lt;string format='upper-case' /&gt;&lt;/list&gt;` =&gt; `{\"bar\": ['STRING ONE', 'STRING TWO',     \u2502 \u2502\n\u2502   \u2502 \u2502 etc.]}`                                                                                                 \u2502 \u2502\n\u2502   \u2502 \u2502 - `&lt;object name='baz'&gt;&lt;string name=\"foo\" format=\"capitalize two-words\" /&gt;&lt;integer name=\"index\"          \u2502 \u2502\n\u2502   \u2502 \u2502 format=\"1-indexed\" /&gt;&lt;/object&gt;` =&gt; `{'baz': {'foo': 'Some String', 'index': 1}}`                        \u2502 \u2502\n\u2502   \u2502 \u2502                                                                                                         \u2502 \u2502\n\u2502   \u2502 \u2502                                                                                                         \u2502 \u2502\n\u2502   \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502   \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Raw LLM Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502   \u2502 \u2502 {                                                                                                       \u2502 \u2502\n\u2502   \u2502 \u2502     \"patient_info\": {                                                                                   \u2502 \u2502\n\u2502   \u2502 \u2502         \"gender\": \"Male\",                                                                               \u2502 \u2502\n\u2502   \u2502 \u2502         \"age\": 49,                                                                                      \u2502 \u2502\n\u2502   \u2502 \u2502         \"symptoms\": [                                                                                   \u2502 \u2502\n\u2502   \u2502 \u2502             {                                                                                           \u2502 \u2502\n\u2502   \u2502 \u2502                 \"symptom\": \"macular rash\",                                                              \u2502 \u2502\n\u2502   \u2502 \u2502                 \"affected area\": \"face &amp; hair\"                                                          \u2502 \u2502\n\u2502   \u2502 \u2502             },                                                                                          \u2502 \u2502\n\u2502   \u2502 \u2502             {                                                                                           \u2502 \u2502\n\u2502   \u2502 \u2502                 \"symptom\": \"itchy, flaky, slightly scaly\",                                              \u2502 \u2502\n\u2502   \u2502 \u2502                 \"affected area\": \"beard, eyebrows &amp; nares\"                                              \u2502 \u2502\n\u2502   \u2502 \u2502             }                                                                                           \u2502 \u2502\n\u2502   \u2502 \u2502         ],                                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502         \"current_meds\": [                                                                               \u2502 \u2502\n\u2502   \u2502 \u2502             {                                                                                           \u2502 \u2502\n\u2502   \u2502 \u2502                 \"medication\": \"OTC steroid cream\",                                                      \u2502 \u2502\n\u2502   \u2502 \u2502                 \"response\": \"Moderate\"                                                                  \u2502 \u2502\n\u2502   \u2502 \u2502             }                                                                                           \u2502 \u2502\n\u2502   \u2502 \u2502         ]                                                                                               \u2502 \u2502\n\u2502   \u2502 \u2502     }                                                                                                   \u2502 \u2502\n\u2502   \u2502 \u2502 }                                                                                                       \u2502 \u2502\n\u2502   \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502   \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Validated Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502   \u2502 \u2502 {                                                                                                       \u2502 \u2502\n\u2502   \u2502 \u2502     'patient_info': {                                                                                   \u2502 \u2502\n\u2502   \u2502 \u2502         'gender': 'Male',                                                                               \u2502 \u2502\n\u2502   \u2502 \u2502         'age': 49,                                                                                      \u2502 \u2502\n\u2502   \u2502 \u2502         'symptoms': [                                                                                   \u2502 \u2502\n\u2502   \u2502 \u2502             {                                                                                           \u2502 \u2502\n\u2502   \u2502 \u2502                 'symptom': 'macular rash',                                                              \u2502 \u2502\n\u2502   \u2502 \u2502                 'affected area': ReAsk(                                                                 \u2502 \u2502\n\u2502   \u2502 \u2502                     incorrect_value='face &amp; hair',                                                      \u2502 \u2502\n\u2502   \u2502 \u2502                     error_message=\"Value face &amp; hair is not in choices ['head', 'neck', 'chest'].\",     \u2502 \u2502\n\u2502   \u2502 \u2502                     fix_value=None,                                                                     \u2502 \u2502\n\u2502   \u2502 \u2502                     path=['patient_info', 'symptoms', 0, 'affected area']                               \u2502 \u2502\n\u2502   \u2502 \u2502                 )                                                                                       \u2502 \u2502\n\u2502   \u2502 \u2502             },                                                                                          \u2502 \u2502\n\u2502   \u2502 \u2502             {                                                                                           \u2502 \u2502\n\u2502   \u2502 \u2502                 'symptom': 'itchy, flaky, slightly scaly',                                              \u2502 \u2502\n\u2502   \u2502 \u2502                 'affected area': ReAsk(                                                                 \u2502 \u2502\n\u2502   \u2502 \u2502                     incorrect_value='beard, eyebrows &amp; nares',                                          \u2502 \u2502\n\u2502   \u2502 \u2502                     error_message=\"Value beard, eyebrows &amp; nares is not in choices ['head', 'neck',     \u2502 \u2502\n\u2502   \u2502 \u2502 'chest'].\",                                                                                             \u2502 \u2502\n\u2502   \u2502 \u2502                     fix_value=None,                                                                     \u2502 \u2502\n\u2502   \u2502 \u2502                     path=['patient_info', 'symptoms', 1, 'affected area']                               \u2502 \u2502\n\u2502   \u2502 \u2502                 )                                                                                       \u2502 \u2502\n\u2502   \u2502 \u2502             }                                                                                           \u2502 \u2502\n\u2502   \u2502 \u2502         ],                                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502         'current_meds': [                                                                               \u2502 \u2502\n\u2502   \u2502 \u2502             {'medication': 'OTC steroid cream', 'response': 'Moderate'}                                 \u2502 \u2502\n\u2502   \u2502 \u2502         ]                                                                                               \u2502 \u2502\n\u2502   \u2502 \u2502     }                                                                                                   \u2502 \u2502\n\u2502   \u2502 \u2502 }                                                                                                       \u2502 \u2502\n\u2502   \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502   \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u2514\u2500\u2500 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Step 1 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n    \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Prompt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 I was given the following JSON response, which had problems due to incorrect values.                    \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 {                                                                                                       \u2502 \u2502\n    \u2502 \u2502   \"patient_info\": {                                                                                     \u2502 \u2502\n    \u2502 \u2502     \"symptoms\": [                                                                                       \u2502 \u2502\n    \u2502 \u2502       {                                                                                                 \u2502 \u2502\n    \u2502 \u2502         \"affected area\": {                                                                              \u2502 \u2502\n    \u2502 \u2502           \"incorrect_value\": \"face &amp; hair\",                                                             \u2502 \u2502\n    \u2502 \u2502           \"error_message\": \"Value face &amp; hair is not in choices ['head', 'neck', 'chest'].\"             \u2502 \u2502\n    \u2502 \u2502         }                                                                                               \u2502 \u2502\n    \u2502 \u2502       },                                                                                                \u2502 \u2502\n    \u2502 \u2502       {                                                                                                 \u2502 \u2502\n    \u2502 \u2502         \"affected area\": {                                                                              \u2502 \u2502\n    \u2502 \u2502           \"incorrect_value\": \"beard, eyebrows &amp; nares\",                                                 \u2502 \u2502\n    \u2502 \u2502           \"error_message\": \"Value beard, eyebrows &amp; nares is not in choices ['head', 'neck', 'chest'].\" \u2502 \u2502\n    \u2502 \u2502         }                                                                                               \u2502 \u2502\n    \u2502 \u2502       }                                                                                                 \u2502 \u2502\n    \u2502 \u2502     ]                                                                                                   \u2502 \u2502\n    \u2502 \u2502   }                                                                                                     \u2502 \u2502\n    \u2502 \u2502 }                                                                                                       \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 Help me correct the incorrect values based on the given error messages.                                 \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 Given below is XML that describes the information to extract from this document and the tags to extract \u2502 \u2502\n    \u2502 \u2502 it into.                                                                                                \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 &lt;output&gt;                                                                                                \u2502 \u2502\n    \u2502 \u2502     &lt;object name=\"patient_info\"&gt;                                                                        \u2502 \u2502\n    \u2502 \u2502         &lt;list name=\"symptoms\" description=\"Symptoms that the patient is currently experiencing. Each    \u2502 \u2502\n    \u2502 \u2502 symptom should be classified into a separate item in the list.\"&gt;                                        \u2502 \u2502\n    \u2502 \u2502             &lt;object&gt;                                                                                    \u2502 \u2502\n    \u2502 \u2502                 &lt;string name=\"affected area\" description=\"What part of the body the symptom is          \u2502 \u2502\n    \u2502 \u2502 affecting\" format=\"valid-choices: choices=['head', 'neck', 'chest']\"/&gt;                                  \u2502 \u2502\n    \u2502 \u2502             &lt;/object&gt;                                                                                   \u2502 \u2502\n    \u2502 \u2502         &lt;/list&gt;                                                                                         \u2502 \u2502\n    \u2502 \u2502     &lt;/object&gt;                                                                                           \u2502 \u2502\n    \u2502 \u2502 &lt;/output&gt;                                                                                               \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 ONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the \u2502 \u2502\n    \u2502 \u2502 `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding  \u2502 \u2502\n    \u2502 \u2502 XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g.        \u2502 \u2502\n    \u2502 \u2502 requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere,     \u2502 \u2502\n    \u2502 \u2502 enter `None`.                                                                                           \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 Here are examples of simple (XML, JSON) pairs that show the expected behavior:                          \u2502 \u2502\n    \u2502 \u2502 - `&lt;string name='foo' format='two-words lower-case' /&gt;` =&gt; `{{'foo': 'example one'}}`                   \u2502 \u2502\n    \u2502 \u2502 - `&lt;list name='bar'&gt;&lt;string format='upper-case' /&gt;&lt;/list&gt;` =&gt; `{{\"bar\": ['STRING ONE', 'STRING TWO',    \u2502 \u2502\n    \u2502 \u2502 etc.]}}`                                                                                                \u2502 \u2502\n    \u2502 \u2502 - `&lt;object name='baz'&gt;&lt;string name=\"foo\" format=\"capitalize two-words\" /&gt;&lt;integer name=\"index\"          \u2502 \u2502\n    \u2502 \u2502 format=\"1-indexed\" /&gt;&lt;/object&gt;` =&gt; `{{'baz': {{'foo': 'Some String', 'index': 1}}}}`                    \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n    \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Raw LLM Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n    \u2502 \u2502 {                                                                                                       \u2502 \u2502\n    \u2502 \u2502   \"patient_info\": {                                                                                     \u2502 \u2502\n    \u2502 \u2502     \"symptoms\": [                                                                                       \u2502 \u2502\n    \u2502 \u2502       {                                                                                                 \u2502 \u2502\n    \u2502 \u2502         \"affected area\": \"head\"                                                                         \u2502 \u2502\n    \u2502 \u2502       },                                                                                                \u2502 \u2502\n    \u2502 \u2502       {                                                                                                 \u2502 \u2502\n    \u2502 \u2502         \"affected area\": \"neck\"                                                                         \u2502 \u2502\n    \u2502 \u2502       }                                                                                                 \u2502 \u2502\n    \u2502 \u2502     ]                                                                                                   \u2502 \u2502\n    \u2502 \u2502   }                                                                                                     \u2502 \u2502\n    \u2502 \u2502 }                                                                                                       \u2502 \u2502\n    \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n    \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Validated Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n    \u2502 \u2502 {                                                                                                       \u2502 \u2502\n    \u2502 \u2502     'patient_info': {                                                                                   \u2502 \u2502\n    \u2502 \u2502         'gender': 'Male',                                                                               \u2502 \u2502\n    \u2502 \u2502         'age': 49,                                                                                      \u2502 \u2502\n    \u2502 \u2502         'symptoms': [                                                                                   \u2502 \u2502\n    \u2502 \u2502             {'symptom': 'macular rash', 'affected area': 'head'},                                       \u2502 \u2502\n    \u2502 \u2502             {                                                                                           \u2502 \u2502\n    \u2502 \u2502                 'symptom': 'itchy, flaky, slightly scaly',                                              \u2502 \u2502\n    \u2502 \u2502                 'affected area': 'neck'                                                                 \u2502 \u2502\n    \u2502 \u2502             }                                                                                           \u2502 \u2502\n    \u2502 \u2502         ],                                                                                              \u2502 \u2502\n    \u2502 \u2502         'current_meds': [                                                                               \u2502 \u2502\n    \u2502 \u2502             {'medication': 'OTC steroid cream', 'response': 'Moderate'}                                 \u2502 \u2502\n    \u2502 \u2502         ]                                                                                               \u2502 \u2502\n    \u2502 \u2502     }                                                                                                   \u2502 \u2502\n    \u2502 \u2502 }                                                                                                       \u2502 \u2502\n    \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n    \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</pre>"},{"location":"getting_started/#getting-started","title":"Getting Started","text":"<p>In this notebook, we will go through the basics of creating a <code>RAIL</code> spec and using Guardrails to enforce it.</p>"},{"location":"getting_started/#objective","title":"Objective","text":"<p>Our goal is to extract detailed patient information from a medical record. We will use a simple example to demonstrate how Guardrails can be used to enforce a <code>RAIL</code> spec.</p> <p>As an example, we will use the following medical record:</p>"},{"location":"getting_started/#installation","title":"Installation","text":"<p>To get started, install the <code>guardrails</code> package with <code>pip</code>.</p>"},{"location":"getting_started/#creating-an-rail-spec","title":"Creating an <code>RAIL</code> spec","text":"<p>At the heart of <code>Guardrails</code> is the <code>RAIL</code> spec.</p> <p><code>RAIL</code> a flavor of XML (standing for Reliable AI markup Language) that describes the expected structure and type of the output of the LLM, the quality criteria for the output to be valid and corrective actions to be taken if the output is invalid.</p> <p>A <code>RAIL</code> spec is composed of 3 main components:</p> <ol> <li>Output schema</li> <li>Prompt</li> <li>(Optional) Script</li> </ol>"},{"location":"getting_started/#output-schema","title":"Output schema","text":"<p>We start by creating the output schema. The output schema is a <code>RAIL</code> spec that describes the expected structure and type of the output of the LLM. </p>"},{"location":"getting_started/#specifying-structure","title":"Specifying structure","text":"<p>As mentioned earlier, we want our extracted information to contain the following fields: gender, age, symptoms, and medications. Using <code>RAIL</code>, we can create fairly complex output schemas. For example, we can specify that a field is a list of objects, etc. We see an example of this below.</p> RAIL SpecOutput JSON <pre><code>&lt;object name=\"patient_info\"&gt;\n&lt;string name=\"gender\" description=\"Patient's gender\" /&gt;\n&lt;integer name=\"age\"/&gt;\n&lt;list name=\"symptoms\" description=\"Symptoms that the patient is currently experiencing. Each symptom should be classified into  separate item in the list.\"&gt;\n&lt;object&gt;\n&lt;string name=\"symptom\" description=\"Symptom that a patient is experiencing\" /&gt;\n&lt;string name=\"affected area\" description=\"What part of the body the symptom is affecting\" /&gt;\n&lt;/object&gt;\n&lt;/list&gt;\n&lt;list name=\"current_meds\" description=\"Medications the patient is currently taking and their response\"&gt;\n&lt;object&gt;\n&lt;string name=\"medication\" description=\"Name of the medication the patient is taking\" /&gt;\n&lt;string name=\"response\" description=\"How the patient is responding to the medication\" /&gt;\n&lt;/object&gt;\n&lt;/list&gt;\n&lt;/object&gt;\n</code></pre> <pre><code>{\n\"patient_info\": {\n\"gender\": ...,\n\"age\": ...,\n\"symptoms\": [\n{\n\"symptom\": ...,\n\"affected area\": ...\n},\n...\n],\n\"current_meds\": [\n{\n\"medication\": ...,\n\"response\": ...\n},\n...\n]\n}\n}\n</code></pre>"},{"location":"getting_started/#specifying-quality-criteria","title":"Specifying quality criteria","text":"<p>Next, we want to specify the quality criteria for the output to be valid and corrective actions to be taken if the output is invalid. We can do this by adding a <code>format</code> tag to each field in the output schema. Format tags can either be enforced by Guardrails, or they can only be suggetions to the LLM. You can see the list of validators enforced by Guardrails here. Additionally, you can create your own custom validators, see examples here 1, 2, 3.</p> <p>As an example, for our use case we specify that the <code>affected_area</code> of <code>symptoms</code> should be one of the following: <code>['head', 'neck', 'chest']</code>. For this, we use the <code>valid-choices</code> validator.</p>"},{"location":"getting_started/#specifying-corrective-actions","title":"Specifying corrective actions","text":"<p>Additionally, we can specify how to handle invalid output by adding a <code>on-fail-...</code> attribute to an element.</p> <p>For example, we can specify that if the <code>affected_area</code> of a symptom is not one of the valid choices, we should re-prompt the LLM to correct its output.</p> <p>We do this by adding the <code>on-fail-valid-choices='reask'</code> attribute to the <code>affected_area</code> field. To see the full list of corrective actions, see here.</p> <p>Finally, out updated output schema looks like:</p>"},{"location":"getting_started/#prompt","title":"Prompt","text":"<p>The prompt contains high level instructions for the LLM, as well as any parameters that need to be substituted at runtime.</p> <p>For our use case, we create the following prompt:</p> <pre><code>&lt;prompt&gt;\nGiven the following doctor's notes about a patient,\nplease extract a dictionary that contains the patient's information.  &lt;!-- (1)! --&gt;\n{{doctors_notes}}  &lt;!-- (2)! --&gt;\n@complete_json_suffix_v2  &lt;!-- (3)! --&gt;\n&lt;/prompt&gt;\n</code></pre> <ol> <li>This is the high level instructions for the LLM.</li> <li>This is a prompt parameter that will be substituted at runtime. We will see how to do this in the next section.</li> <li>This is some boilerplate text that formats helps the LLM output a valid JSON object. Guardrails will automatically add this text to the end of the LLM's output. You can see the full list of boilerplate text here.</li> </ol>"},{"location":"getting_started/#full-rail-spec","title":"Full <code>rail</code> spec","text":"<p>Putting it all together, the full <code>rail</code> spec for our use case looks like. You can see the full spec here.</p>"},{"location":"getting_started/#using-guardrails-to-enforce-the-rail-spec","title":"Using Guardrails to enforce the <code>RAIL</code> spec","text":"<p>We use the <code>RAIL</code> spec to create a <code>Guard</code> object. The <code>Guard</code> object is used to wrap the LLM API call and enforce the <code>RAIL</code> spec on the output of the LLM call.</p>"},{"location":"getting_started/#inspecting-logs-to-peek-under-the-hood","title":"Inspecting logs to peek under the hood","text":"<p>Guardrails logs all of the steps it takes to enforce the <code>RAIL</code> spec. We inspect these logs below to see all the steps Guardrails took to enforce the <code>RAIL</code> spec.</p>"},{"location":"getting_started/#inspecting-step-1-getting-llm-output","title":"Inspecting Step 1: Getting LLM output","text":""},{"location":"getting_started/#inspecting-step-2-re-prompting-llm","title":"Inspecting Step 2: Re-prompting LLM","text":""},{"location":"getting_started/#bonus-see-the-full-history-of-calls","title":"Bonus: See the full history of calls","text":"<p>Guardrails also logs the full history of calls made to the LLM. This can be useful for debugging purposes.</p>"},{"location":"guard/","title":"Guard","text":"<p>The Guard class.</p> <p>This class is the main entry point for using Guardrails. It is initialized from either <code>from_rail</code> or <code>from_rail_string</code> methods, which take in a <code>.rail</code> file or string, respectively. The <code>__call__</code> method functions as a wrapper around LLM APIs. It takes in an LLM API, and optional prompt parameters, and returns the raw output from the LLM and the validated output.</p> <p>Initialize the Guard.</p>"},{"location":"guard/#guardrails.guard.Guard.from_rail","title":"<code>from_rail(rail_file, num_reasks=1)</code>  <code>classmethod</code>","text":"<p>Create a Schema from a <code>.rail</code> file.</p> <p>Parameters:</p> Name Type Description Default <code>rail_file</code> <code>str</code> <p>The path to the <code>.rail</code> file.</p> required <code>num_reasks</code> <code>int</code> <p>The max times to re-ask the LLM for invalid output.</p> <code>1</code> <p>Returns:</p> Type Description <code>Guard</code> <p>An instance of the <code>Guard</code> class.</p>"},{"location":"guard/#guardrails.guard.Guard.from_rail_string","title":"<code>from_rail_string(rail_string, num_reasks=1)</code>  <code>classmethod</code>","text":"<p>Create a Schema from a <code>.rail</code> string.</p> <p>Parameters:</p> Name Type Description Default <code>rail_string</code> <code>str</code> <p>The <code>.rail</code> string.</p> required <code>num_reasks</code> <code>int</code> <p>The max times to re-ask the LLM for invalid output.</p> <code>1</code> <p>Returns:</p> Type Description <code>Guard</code> <p>An instance of the <code>Guard</code> class.</p>"},{"location":"guard/#guardrails.guard.Guard.__call__","title":"<code>__call__(llm_api, prompt_params=None, num_reasks=1, *args, **kwargs)</code>","text":"<p>Call the LLM and validate the output.</p> <p>Parameters:</p> Name Type Description Default <code>llm_api</code> <code>Callable</code> <p>The LLM API to call (e.g. openai.Completion.create)</p> required <code>prompt_params</code> <code>Dict</code> <p>The parameters to pass to the prompt.format() method.</p> <code>None</code> <code>num_reasks</code> <code>int</code> <p>The max times to re-ask the LLM for invalid output.</p> <code>1</code> <p>Returns:</p> Type Description <code>Tuple[str, Dict]</code> <p>The raw text output from the LLM and the validated output.</p>"},{"location":"guard/#guardrails.guard.Guard.parse","title":"<code>parse(llm_output, llm_api=None, num_reasks=1, prompt_params=None, *args, **kwargs)</code>","text":"<p>Alternate flow to using Guard where the llm_output is known.</p> <p>Parameters:</p> Name Type Description Default <code>llm_output</code> <code>str</code> <p>The output from the LLM.</p> required <code>llm_api</code> <code>PromptCallable</code> <p>The LLM API to use to re-ask the LLM.</p> <code>None</code> <code>num_reasks</code> <code>int</code> <p>The max times to re-ask the LLM for invalid output.</p> <code>1</code> <p>Returns:</p> Type Description <code>Dict</code> <p>The validated response.</p>"},{"location":"llm_api_wrappers/","title":"Use Guardrails with LLM APIs","text":"<p>Guardrails' <code>Guard</code> wrappers provide a simple way to add Guardrails to your LLM API calls. The wrappers are designed to be used with any LLM API.</p> <p>Here are some examples of how to use the wrappers with different LLM providers and models:</p>"},{"location":"llm_api_wrappers/#openai","title":"OpenAI","text":""},{"location":"llm_api_wrappers/#completion-models-eg-gpt-3","title":"Completion Models (e.g. GPT-3)","text":"<pre><code>import openai\nimport guardrails as gd\n# Create a Guard class\nguard = gd.Guard.from_rail(...)\n# Wrap openai API call\nraw_llm_output, guardrail_output = guard(\nopenai.Completion.create,\nprompt_params={\"prompt_param_1\": \"value_1\", \"prompt_param_2\": \"value_2\", ..},\nengine=\"text-davinci-003\",\nmax_tokens=100,\ntemperature=0.0,\n)\n</code></pre>"},{"location":"llm_api_wrappers/#chatcompletion-models-eg-chatgpt","title":"ChatCompletion Models (e.g. ChatGPT)","text":"<pre><code>import openai\nimport guardrails as gd\n# Create a Guard class\nguard = gd.Guard.from_rail(...)\n# Wrap openai API call\nraw_llm_output, guardrail_output = guard(\nopenai.ChatCompletion.create,\nprompt_params={\"prompt_param_1\": \"value_1\", \"prompt_param_2\": \"value_2\", ..},\nsystem_prompt=\"You are a helpful assistant...\",\nmodel=\"gpt-3.5-turbo\",\nmax_tokens=100,\ntemperature=0.0,\n)\n</code></pre>"},{"location":"llm_api_wrappers/#using-manifest","title":"Using Manifest","text":"<p>Manifest is a wrapper around most model APIs and supports hosting local models. It can be used as a LLM API.</p> <pre><code>import guardrails as gd\nimport manifest\n# Create a Guard class\nguard = gd.Guard.from_rail(...)\n# Create a Manifest client - this one points to GPT-4\n# and caches responses in SQLLite\nmanifest = manifest.Manifest(\nclient_name=\"openai\",\nengine=\"gpt-4\",\ncache_name=\"sqlite\",\ncache_connection=\"my_manifest_cache.db\"\n)\n# Wrap openai API call\nraw_llm_output, guardrail_output = guard(\nmanifest,\nprompt_params={\"prompt_param_1\": \"value_1\", \"prompt_param_2\": \"value_2\", ..},\nmax_tokens=100,\ntemperature=0.0,\n)\n</code></pre>"},{"location":"llm_api_wrappers/#using-a-custom-llm-api","title":"Using a custom LLM API","text":"<pre><code>import guardrails as gd\n# Create a Guard class\nguard = gd.Guard.from_rail(...)\n# Function that takes the prompt as a string and returns the LLM output as string\ndef my_llm_api(prompt: str, **kwargs) -&gt; str:\n\"\"\"Custom LLM API wrapper.\n    Args:\n        prompt (str): The prompt to be passed to the LLM API\n        **kwargs: Any additional arguments to be passed to the LLM API\n    Returns:\n        str: The output of the LLM API\n    \"\"\"\n# Call your LLM API here\nreturn ...\n# Wrap your LLM API call\nraw_llm_output, guardrail_output = guard(\nmy_llm_api,\nprompt_params={\"prompt_param_1\": \"value_1\", \"prompt_param_2\": \"value_2\", ..},\n**kwargs,\n)\n</code></pre>"},{"location":"logs/","title":"Inspecting logs","text":"<p>All <code>gd.Guard</code> calls are logged internally, and can be accessed via two methods, <code>gd.Guard.guard_state</code> or <code>guardrails.log</code>.</p>"},{"location":"logs/#accessing-logs-via-guardrailslog","title":"\ud83e\udeb5 Accessing logs via <code>guardrails.log</code>","text":"<p>This is the simplest way to access logs. It returns a list of all <code>gd.Guard</code> calls, in the order they were made.</p> <p>In order to access logs, run:</p> <pre><code>eliot-tree --output-format=ascii guardrails.log\n</code></pre>"},{"location":"logs/#accessing-logs-via-gdguardguard_state","title":"\ud83c\uddfb\ud83c\udde6 Accessing logs via <code>gd.Guard.guard_state</code>","text":"<p><code>guard_state</code> is an attribute of the <code>gd.Guard</code> class. It contains:</p> <ol> <li>A list of all <code>gd.Guard</code> calls, in the order they were made.</li> <li>For each call, reasks needed and their results.</li> </ol> <p>In order to access logs, run:</p> <pre><code>from rich import print\nprint(guard.state.most_recent_call.tree)\n</code></pre> <p></p>"},{"location":"validation/","title":"Validators","text":"<p>This module contains the validators for the Guardrails framework.</p> <p>The name with which a validator is registered is the name that is used in the <code>RAIL</code> spec to specify formatters.</p>"},{"location":"validation/#guardrails.validators.ValidRange","title":"<code>ValidRange</code>","text":"<p>Validate that a value is within a range.</p> <ul> <li>Name for <code>format</code> attribute: <code>valid-range</code></li> <li>Supported data types: <code>integer</code>, <code>float</code>, <code>percentage</code></li> <li>Programmatic fix: Closest value within the range.</li> </ul>"},{"location":"validation/#guardrails.validators.LowerCase","title":"<code>LowerCase</code>","text":"<p>Validate that a value is lower case.</p> Using validator in RAIL spec. <p>Validator Name: <code>lower-case</code> Supported Data Types: <code>string</code> Programmatic Fix: Manually convert to lower case.</p>"},{"location":"validation/#guardrails.validators.UpperCase","title":"<code>UpperCase</code>","text":"<p>Validate that a value is upper case.</p> Using validator in RAIL spec. <p>Validator Name: <code>upper-case</code> Supported Data Types: <code>string</code> Programmatic Fix: Manually convert to upper case.</p>"},{"location":"validation/#guardrails.validators.ValidLength","title":"<code>ValidLength</code>","text":"<p>Validate that the length of value is within the expected range.</p> Using validator in RAIL spec. <p>Validator Name: <code>length</code> Supported Data Types: <code>string</code>, <code>list</code> Programmatic Fix: If shorter than the minimum, pad with empty last elements.     If longer than the maximum, truncate.</p> <p>Parameters:</p> Name Type Description Default <code>min</code> <code>int</code> <p>Minimum length of the value.</p> <code>None</code> <code>max</code> <code>int</code> <p>Maximum length of the value.</p> <code>None</code> <code>on_fail</code> <code>Optional[Callable]</code> <p>String name of the method to call when validation fails.</p> <code>None</code>"},{"location":"validation/#guardrails.validators.TwoWords","title":"<code>TwoWords</code>","text":"<p>Validate that a value is upper case.</p> Using validator in RAIL spec. <p>Validator Name: <code>two-words</code> Supported Data Types: <code>string</code> Programmatic Fix: Pick the first two words.</p>"},{"location":"validation/#guardrails.validators.OneLine","title":"<code>OneLine</code>","text":"<p>Validate that a value is a single line or sentence.</p> Using validator in RAIL spec. <p>Validator Name: <code>one-line</code> Supported Data Types: <code>string</code> Programmatic Fix: Pick the first line.</p>"},{"location":"validation/#guardrails.validators.ValidUrl","title":"<code>ValidUrl</code>","text":"<p>Validate that a value is a valid URL.</p> Using validator in RAIL spec. <p>Validator Name: <code>valid-url</code> Supported Data Types: <code>string</code>, <code>url</code> Programmatic Fix: None</p>"},{"location":"validation/#guardrails.validators.BugFreePython","title":"<code>BugFreePython</code>","text":"<p>Validate that there are no Python syntactic bugs in the generated code.</p> <p>This validator checks for syntax errors by running <code>ast.parse(code)</code>, and will raise an exception if there are any. Only the packages in the <code>python</code> environment are available to the code snippet.</p> Using validator in RAIL spec. <p>Validator Name: <code>bug-free-python</code> Supported Data Types: <code>pythoncode</code> Programmatic Fix: None</p>"},{"location":"validation/#guardrails.validators.BugFreeSQL","title":"<code>BugFreeSQL</code>","text":"<p>Validate that there are no SQL syntactic bugs in the generated code.</p> <p>This is a very minimal implementation that uses the Pypi <code>sqlvalidator</code> package to check if the SQL query is valid. You can implement a custom SQL validator that uses a database connection to check if the query is valid.</p> Using validator in RAIL spec. <p>Validator Name: <code>bug-free-sql</code> Supported Data Types: <code>sql</code> Programmatic Fix: None</p>"},{"location":"validation/#guardrails.validators.SqlColumnPresence","title":"<code>SqlColumnPresence</code>","text":"<p>Validate that all columns in the SQL query are present in the schema.</p> Using validator in RAIL spec. <p>Validator Name: <code>sql-column-presence</code> Supported Data Types: <code>sql</code>, <code>string</code> Programmatic Fix: None</p>"},{"location":"validation/#guardrails.validators.ExcludeSqlPredicates","title":"<code>ExcludeSqlPredicates</code>","text":"<p>Validate that the SQL query does not contain certain predicates.</p> Using validator in RAIL spec. <p>Validator Name: <code>exclude-sql-predicates</code> Supported Data Types: <code>sql</code> Programmatic Fix: None</p>"},{"location":"validation/#guardrails.validators.SimilarToDocument","title":"<code>SimilarToDocument</code>","text":"<p>Validate that a value is similar to the document.</p> <p>This validator checks if the value is similar to the document by checking the cosine similarity between the value and the document, using an embedding.</p> Using validator in RAIL spec. <p>Validator Name: <code>similar-to-document</code> Supported Data Types: <code>string</code> Programmatic Fix: None</p> <p>Parameters:</p> Name Type Description Default <code>document</code> <code>str</code> <p>The document to compare the value to.</p> required <code>threshold</code> <code>float</code> <p>The minimum cosine similarity between the value and the document.</p> <code>0.7</code> <code>model</code> <code>str</code> <p>The embedding model to use.</p> <code>'text-embedding-ada-002'</code> <code>on_fail</code> <code>Optional[Callable]</code> <p>String name of the method to call when validation fails.</p> <code>None</code>"},{"location":"validation/#guardrails.validators.IsProfanityFree","title":"<code>IsProfanityFree</code>","text":"<p>Validate that a translated text does not contain profanity language.</p> <p>This validator uses the <code>alt-profanity-check</code> package to check if a string contains profanity language.</p> Using validator in RAIL spec. <p>Validator Name: <code>is-profanity-free</code> Supported Data Types: <code>string</code> Programmatic Fix: None</p>"},{"location":"validation/#guardrails.validators.IsHighQualityTranslation","title":"<code>IsHighQualityTranslation</code>","text":"<p>Using inpiredco.critique to check if a translation is high quality.</p> Using validator in RAIL spec. <p>Validator Name: <code>is-high-quality-translation</code> Supported Data Types: <code>string</code> Programmatic Fix: None</p>"},{"location":"validation/#guardrails.validators.EndsWith","title":"<code>EndsWith</code>","text":"<p>Validate that a list ends with a given value.</p> <ul> <li>Name for <code>format</code> attribute: <code>ends-with</code></li> <li>Supported data types: <code>list</code></li> <li>Programmatic fix: Append the given value to the list.</li> </ul> <p>Parameters:</p> Name Type Description Default <code>end</code> <code>str</code> <p>The value that the list must end with.</p> required <code>on_fail</code> <code>str</code> <p>What to do when validation fails.</p> <code>'fix'</code> Using validator in RAIL spec. <p>Validator Name: <code>ends-with</code> Supported Data Types: <code>list</code> Programmatic Fix: Append the given value to the list.</p>"},{"location":"validation/#guardrails.validators.ExtractedSummarySentencesMatch","title":"<code>ExtractedSummarySentencesMatch</code>","text":"<p>Validate that each sentence in a string is similar to the source documents.</p> <p>This validator validates that the extracted summary sentences match the original text by performing a cosine similarity in the embedding space.</p> Using validator in RAIL spec. <p>Validator Name: <code>extracted-summary-sentences-match</code> Supported Data Types: <code>string</code> Programmatic Fix: None        </p> <p>Parameters:</p> Name Type Description Default <code>documents_dir</code> <code>str</code> <p>The directory containing the source documents.</p> required <code>threshold</code> <code>float</code> <p>The minimum cosine similarity between a sentence in the summary and a sentence in the document.</p> <code>0.7</code> <code>embedding_model</code> <code>Optional[EmbeddingBase]</code> <p>The embedding model to use.</p> <code>None</code> <code>vector_db</code> <code>Optional[VectorDBBase]</code> <p>The vector database to use.</p> <code>None</code> <code>document_store</code> <code>Optional[DocumentStoreBase]</code> <p>The document store to use.</p> <code>None</code> <code>on_fail</code> <code>Optional[Callable]</code> <p>What to do when validation fails.</p> <code>None</code>"},{"location":"validation/#guardrails.validators.ReadingTime","title":"<code>ReadingTime</code>","text":"<p>Validate that the a string can be read in less than a certain amount of time.</p> <p>This validator estimates the reading time of a string by counting the number of words and assuming that a person can read 200 words per minute. If the string takes longer than the given reading time, then the validator fails.</p> Using validator in RAIL spec. <p>Validator Name: <code>reading-time</code> Supported Data Types: <code>string</code> Programmatic Fix: None           </p> <p>Parameters:</p> Name Type Description Default <code>reading_time</code> <code>int</code> <p>The maximum reading time in seconds.</p> required <code>on_fail</code> <code>str</code> <p>What to do when validation fails.</p> <code>'fix'</code>"},{"location":"validation/#guardrails.validators.ExtractiveSummary","title":"<code>ExtractiveSummary</code>","text":"<p>Validate that a string is a valid extractive summary of a given document.</p> <p>This validator does a fuzzy match between the sentences in the summary and the sentences in the document. Each sentence in the summary must be similar to at least one sentence in the document. After the validation, the summary is updated to include the sentences from the document that were matched, and the citations for those sentences are added to the end of the summary.</p> Using validator in RAIL spec. <p>Validator Name: <code>extractive-summary</code> Supported Data Types: <code>string</code> Programmatic Fix: None           </p> <p>Parameters:</p> Name Type Description Default <code>documents_dir</code> <code>str</code> <p>Path to the directory containing the documents.</p> required <code>threshold</code> <code>int</code> <p>Threshold for fuzzy match between sentences.</p> <code>85</code> <code>on_fail</code> <code>Optional[Callable]</code> <p>Function to call when validation fails.</p> <code>None</code>"},{"location":"validation/#guardrails.validators.RemoveRedundantSentences","title":"<code>RemoveRedundantSentences</code>","text":"<p>Remove redundant sentences from a string.</p> <p>This validator removes sentences from a string that are similar to other sentences in the string. It does this by checking the fuzzy match between each sentence and all other sentences in the string. If the fuzzy match is above a certain threshold, the sentence is removed.</p> Using validator in RAIL spec. <p>Validator Name: <code>remove-redundant-sentences</code> Supported Data Types: <code>string</code> Programmatic Fix: None           </p> <p>Parameters:</p> Name Type Description Default <code>threshold</code> <code>int</code> <p>Threshold for fuzzy match between sentences.</p> <code>70</code> <code>on_fail</code> <code>Optional[Callable]</code> <p>Function to call when validation fails.</p> <code>None</code>"},{"location":"validation/#guardrails.validators.SaliencyCheck","title":"<code>SaliencyCheck</code>","text":"<p>Check that the summary covers the list of topics present in the document.</p> <p>Initialize the SaliencyCheck validator.</p> <p>This validator checks that the summary covers the list of topics present in the document. It does this by extracting topics from the document and summary using the LLM API, and checking if the topics in the summary cover the topics in the document.</p> Using validator in RAIL spec. <p>Validator Name: <code>saliency-check</code> Supported Data Types: <code>string</code> Programmatic Fix: None           </p> <p>Parameters:</p> Name Type Description Default <code>docs_dir</code> <code>str</code> <p>Path to the directory containing the documents.</p> required <code>llm_callable</code> <code>Callable</code> <p>The callable to use for the LLM API.</p> <code>None</code> <code>threshold</code> <code>int</code> <p>Threshold for overlap between topics in document and summary.</p> <code>0.25</code> <code>on_fail</code> <code>Optional[Callable]</code> <p>Function to call when validation fails.</p> <code>None</code>"},{"location":"validation/#guardrails.validators.QARelevanceLLMEval","title":"<code>QARelevanceLLMEval</code>","text":"<p>Check if the answer is relevant to the question.</p> <p>This validator makes a call to the LLM API to check if the answer is relevant to the question. If the answer is not relevant, the validator raises an exception.</p> Using validator in RAIL spec. <p>Validator Name: <code>qa-relevance-llm-eval</code> Supported Data Types: <code>string</code> Programmatic Fix: None           </p> <p>Parameters:</p> Name Type Description Default <code>llm_callable</code> <code>Callable</code> <p>The callable to use for the LLM API.</p> <code>None</code> <code>on_fail</code> <code>Optional[Callable]</code> <p>Function to call when validation fails.</p> <code>None</code>"},{"location":"examples/bug_free_python_code/","title":"Generating bug-free Python code","text":"<pre><code>rail_str = \"\"\"\n&lt;rail version=\"0.1\"&gt;\n&lt;output&gt;\n    &lt;pythoncode\n        name=\"python_code\"\n        format=\"bug-free-python\"\n        on-fail-bug-free-python=\"reask\"\n    /&gt;\n&lt;/output&gt;\n&lt;prompt&gt;\nGiven the following high level leetcode problem description, write a short Python code snippet that solves the problem.\nProblem Description:\n{{leetcode_problem}}\n@complete_json_suffix&lt;/prompt&gt;\n&lt;/rail&gt;\n\"\"\"\n</code></pre> <pre><code>import guardrails as gd\nfrom rich import print\nguard = gd.Guard.from_rail_string(rail_str)\n</code></pre> <p>The <code>Guard</code> object compiles the output schema and adds it to the prompt. We can see the final prompt below:</p> <pre><code>print(guard.base_prompt)\n</code></pre> <pre>\nGiven the following high level leetcode problem description, write a short Python code snippet that solves the \nproblem.\n\nProblem Description:\n{leetcode_problem}\n\n\nGiven below is XML that describes the information to extract from this document and the tags to extract it into.\n\n&lt;output&gt;\n    &lt;pythoncode name=\"python_code\" format=\"bug-free\"/&gt;\n&lt;/output&gt;\n\n\n\n\nONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the `name` \nattribute of the corresponding XML, and the value is of the type specified by the corresponding XML's tag. The JSON\nMUST conform to the XML format, including any types and format requests e.g. requests for lists, objects and \nspecific types. Be correct and concise. If you are unsure anywhere, enter `None`.\n\nHere are examples of simple (XML, JSON) pairs that show the expected behavior:\n- `&lt;string name='foo' format='two-words lower-case' /&gt;` =&gt; `{{'foo': 'example one'}}`\n- `&lt;list name='bar'&gt;&lt;string format='upper-case' /&gt;&lt;/list&gt;` =&gt; `{{\"bar\": ['STRING ONE', 'STRING TWO', etc.]}}`\n- `&lt;object name='baz'&gt;&lt;string name=\"foo\" format=\"capitalize two-words\" /&gt;&lt;integer name=\"index\" format=\"1-indexed\" /&gt;&lt;/object&gt;` =&gt; `{{'baz': {{'foo': 'Some String', 'index': 1}}}}`\n\nJSON Object:\n</pre> <pre><code>import openai\nleetcode_problem = \"\"\"\nGiven a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.\n\"\"\"\nraw_llm_response, validated_response = guard(\nopenai.Completion.create,\nprompt_params={\"leetcode_problem\": leetcode_problem},\nengine=\"text-davinci-003\",\nmax_tokens=2048,\ntemperature=0,\n)\n</code></pre> <p>Running the cell above returns: 1. The raw LLM text output as a single string. 2. A dictionary where the key is <code>python_code</code> and the value is the generated code.</p> <pre><code>print(validated_response)\n</code></pre> <pre>{\n    'python_code': \"def longestPalindrome(s):\\n    longest_palindrome = ''\\n    for i in range(len(s)):\\n        \nfor j in range(i, len(s)):\\n            substring = s[i:j+1]\\n            if substring == substring[::-1] and \nlen(substring) &gt; len(longest_palindrome):\\n                longest_palindrome = substring\\n    return \nlongest_palindrome\"\n}\n</pre> <p>Here's the generated code:</p> <pre><code>print(validated_response[\"python_code\"])\n</code></pre> <pre>def longestPalindrome(s):\n    longest_palindrome = ''\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s\n            if substring == substring[::-1] and len(substring) &gt; len(longest_palindrome):\n                longest_palindrome = substring\n    return longest_palindrome\n</pre> <p>We can confirm that the code is bug free by executing the code in the environment.</p> <pre><code>try:\nexec(validated_response[\"python_code\"])\nprint(\"Success!\")\nexcept Exception as e:\nprint(\"Failed!\")\n</code></pre> <pre>Success!\n</pre>"},{"location":"examples/bug_free_python_code/#generating-bug-free-leetcode-solutions","title":"Generating Bug Free Leetcode Solutions","text":"<p>Note</p> <p>To download this tutorial as a Jupyter notebook, click here.</p> <p>In this example, we want to solve String Maniuplation leetcode problems such that the code is bug free.</p> <p>We make the assumption that:</p> <ol> <li>We don't need any external libraries that are not already installed in the environment.</li> <li>We are able to execute the code in the environment.</li> </ol>"},{"location":"examples/bug_free_python_code/#objective","title":"Objective","text":"<p>We want to generate bug-free code for solving leetcode problems. In this example, we don't account for semantic bugs, only for syntactic bugs.</p> <p>In short, we want to make sure that the code can be executed without any errors.</p>"},{"location":"examples/bug_free_python_code/#step-1-generating-rail-spec","title":"Step 1: Generating <code>RAIL</code> Spec","text":"<p>Ordinarily, we could create a separate <code>RAIL</code> spec in a file. However, for the sake of this example, we will generate the <code>RAIL</code> spec in the notebook as a string.</p>"},{"location":"examples/bug_free_python_code/#step-2-create-a-guard-object-with-the-rail-spec","title":"Step 2: Create a <code>Guard</code> object with the RAIL Spec","text":"<p>We create a <code>gd.Guard</code> object that will check, validate and correct the generated code. This object:</p> <ol> <li>Enforces the quality criteria specified in the RAIL spec (i.e. bug free code).</li> <li>Takes corrective action when the quality criteria are not met (i.e. reasking the LLM).</li> <li>Compiles the schema and type info from the RAIL spec and adds it to the prompt.</li> </ol>"},{"location":"examples/bug_free_python_code/#step-3-wrap-the-llm-api-call-with-guard","title":"Step 3: Wrap the LLM API call with <code>Guard</code>","text":""},{"location":"examples/extracting_entities/","title":"Extracting entities from ToS","text":"<pre><code>import guardrails as gd\nfrom rich import print\ncontent = gd.docs_utils.read_pdf(\"data/chase_card_agreement.pdf\")\nprint(f\"Chase Credit Card Document:\\n\\n{content[:275]}\\n...\")\n</code></pre> <pre>Chase Credit Card Document:\n\n2/25/23, 7:59 PM about:blank\nabout:blank 1/4\nPRICING INFORMATION\nINTEREST RATES AND INTEREST CHARGES\nPurchase Annual\nPercentage Rate (APR) 0% Intro APR for the first 18 months that your Account is open.\nAfter that, 19.49%. This APR will vary with the market based on the Prim\n...\n</pre> <pre><code>rail_str = \"\"\"\n&lt;rail version=\"0.1\"&gt;\n&lt;output&gt;\n    &lt;list name=\"fees\" description=\"What fees and charges are associated with my account?\"&gt;\n        &lt;object&gt;\n            &lt;integer name=\"index\" format=\"1-indexed\" /&gt;\n            &lt;string name=\"name\" format=\"lower-case; two-words\" on-fail-lower-case=\"noop\" on-fail-two-words=\"reask\"/&gt;\n            &lt;string name=\"explanation\" format=\"one-line\" on-fail-one-line=\"noop\" /&gt;\n            &lt;float name=\"value\" format=\"percentage\"/&gt;\n        &lt;/object&gt;\n    &lt;/list&gt;\n    &lt;object name=\"interest_rates\" description=\"What are the interest rates offered by the bank on savings and checking accounts, loans, and credit products?\" /&gt;\n&lt;/output&gt;\n&lt;prompt&gt;\nGiven the following document, answer the following questions. If the answer doesn't exist in the document, enter 'None'.\n{{document}}\n@xml_prefix_prompt\n{output_schema}\n@json_suffix_prompt_v2_wo_none&lt;/prompt&gt;\n&lt;/rail&gt;\n\"\"\"\n</code></pre> <pre><code>guard = gd.Guard.from_rail_string(rail_str)\n</code></pre> <pre>\n<code>/Users/shreyarajpal/guardrails/guardrails/schema.py:187: UserWarning: Validator 1-indexed is not valid for element integer.\n  warnings.warn(\n/Users/shreyarajpal/guardrails/guardrails/schema.py:187: UserWarning: Validator percentage is not valid for element float.\n  warnings.warn(\n</code>\n</pre> <p>As we can see, a few formatters weren't supported. These formatters won't be enforced in the output, but this information can still be used to generate a prompt.</p> <p>We see the prompt that will be sent to the LLM. The <code>{document}</code> is substituted with the user provided value at runtime.</p> <pre><code>print(guard.base_prompt)\n</code></pre> <pre>\nGiven the following document, answer the following questions. If the answer doesn't exist in the document, enter \n'None'.\n\n{document}\n\n\nGiven below is XML that describes the information to extract from this document and the tags to extract it into.\n\n\n&lt;output&gt;\n    &lt;list name=\"fees\" description=\"What fees and charges are associated with my account?\"&gt;\n        &lt;object&gt;\n            &lt;integer name=\"index\" format=\"1-indexed\"/&gt;\n            &lt;string name=\"name\" format=\"lower-case; two-words\"/&gt;\n            &lt;string name=\"explanation\" format=\"one-line\"/&gt;\n            &lt;float name=\"value\" format=\"percentage\"/&gt;\n        &lt;/object&gt;\n    &lt;/list&gt;\n    &lt;object name=\"interest_rates\" description=\"What are the interest rates offered by the bank on savings and \nchecking accounts, loans, and credit products?\"/&gt;\n&lt;/output&gt;\n\n\n\nONLY return a valid JSON object (no other text is necessary). The JSON MUST conform to the XML format, including \nany types and format requests e.g. requests for lists, objects and specific types. Be correct and concise.\n\nJSON Output:\n\n</pre> <pre><code>import openai\nraw_llm_response, validated_response = guard(\nopenai.Completion.create,\nprompt_params={\"document\": content[:6000]},\nengine=\"text-davinci-003\",\nmax_tokens=2048,\ntemperature=0,\n)\n</code></pre> <p>The <code>guard</code> wrapper returns the raw_llm_respose (which is a simple string), and the validated and corrected output (which is a dictionary).</p> <p>We can see that the output is a dictionary with the correct schema and types.</p> <pre><code>print(validated_response)\n</code></pre> <pre>{\n    'fees': [\n        {'index': 1, 'name': 'annual membership', 'explanation': 'Annual Membership Fee', 'value': 0},\n        {\n            'index': 2,\n            'name': 'my-chase-plan',\n            'explanation': 'My Chase Plan Fee (fixed finance charge)',\n            'value': 1.72\n        },\n        {\n            'index': 3,\n            'name': 'balance transfers',\n            'explanation': 'Balance Transfers Intro fee of either $5 or 3% of the amount of each transfer, \nwhichever is greater, on transfers made within 60 days of account opening. After that: Either $5 or 5% of the \namount of each transfer, whichever is greater.',\n            'value': 3\n        },\n        {\n            'index': 4,\n            'name': 'cash advances',\n            'explanation': 'Either $10 or 5% of the amount of each transaction, whichever is greater.',\n            'value': 5\n        },\n        {\n            'index': 5,\n            'name': 'foreign transactions',\n            'explanation': 'Foreign Transactions 3% of the amount of each transaction in U.S. dollars.',\n            'value': 3\n        },\n        {'index': 6, 'name': 'late payment', 'explanation': 'Late Payment Up to $40.', 'value': 0},\n        {'index': 7, 'name': 'over-credit-limit', 'explanation': 'Over-the-Credit-Limit None', 'value': 0},\n        {'index': 8, 'name': 'return payment', 'explanation': 'Return Payment Up to $40.', 'value': 0},\n        {'index': 9, 'name': 'return check', 'explanation': 'Return Check None', 'value': 0}\n    ],\n    'interest_rates': {\n        'purchase': {'apr': 0, 'after_apr': 19.49},\n        'my_chase_loan': {'apr': 19.49},\n        'balance_transfer': {'apr': 0, 'after_apr': 19.49},\n        'cash_advance': {'apr': 29.49},\n        'penalty': {'apr': 0, 'maximum_apr': 29.99}\n    }\n}\n</pre> <pre><code>guard.state.most_recent_call.tree\n</code></pre> <pre>Logs\n\u251c\u2500\u2500 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Step 1 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502   \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Prompt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502   \u2502 \u2502                                                                                                         \u2502 \u2502\n\u2502   \u2502 \u2502 Given the following document, answer the following questions. If the answer doesn't exist in the        \u2502 \u2502\n\u2502   \u2502 \u2502 document, enter 'None'.                                                                                 \u2502 \u2502\n\u2502   \u2502 \u2502                                                                                                         \u2502 \u2502\n\u2502   \u2502 \u2502 2/25/23, 7:59 PM about:blank                                                                            \u2502 \u2502\n\u2502   \u2502 \u2502 about:blank 1/4                                                                                         \u2502 \u2502\n\u2502   \u2502 \u2502 PRICING INFORMATION                                                                                     \u2502 \u2502\n\u2502   \u2502 \u2502 INTEREST RATES AND INTEREST CHARGES                                                                     \u2502 \u2502\n\u2502   \u2502 \u2502 Purchase Annual                                                                                         \u2502 \u2502\n\u2502   \u2502 \u2502 Percentage Rate (APR) 0% Intro APR for the first 18 months that your Account is open.                   \u2502 \u2502\n\u2502   \u2502 \u2502 After that, 19.49%. This APR will vary with the market based on the Prime                               \u2502 \u2502\n\u2502   \u2502 \u2502 Rate.                                                                                                   \u2502 \u2502\n\u2502   \u2502 \u2502 a                                                                                                       \u2502 \u2502\n\u2502   \u2502 \u2502 My Chase Loan                                                                                           \u2502 \u2502\n\u2502   \u2502 \u2502 SM APR 19.49%. This APR will vary with the market based on the Prime Rate.                              \u2502 \u2502\n\u2502   \u2502 \u2502 a                                                                                                       \u2502 \u2502\n\u2502   \u2502 \u2502 Promotional offers with fixed APRs and varying durations may be available from                          \u2502 \u2502\n\u2502   \u2502 \u2502 time to time on some accounts.                                                                          \u2502 \u2502\n\u2502   \u2502 \u2502 Balance Transfer APR 0% Intro APR for the first 18 months that your Account is open.                    \u2502 \u2502\n\u2502   \u2502 \u2502 After that, 19.49%. This APR will vary with the market based on the Prime                               \u2502 \u2502\n\u2502   \u2502 \u2502 Rate.                                                                                                   \u2502 \u2502\n\u2502   \u2502 \u2502 a                                                                                                       \u2502 \u2502\n\u2502   \u2502 \u2502 Cash Advance APR 29.49%. This APR will vary with the market based on the Prime Rate.                    \u2502 \u2502\n\u2502   \u2502 \u2502 b                                                                                                       \u2502 \u2502\n\u2502   \u2502 \u2502 Penalty APR and When                                                                                    \u2502 \u2502\n\u2502   \u2502 \u2502 It Applies                                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502 Up to 29.99%. This APR will vary with the market based on the Prime Rate.                               \u2502 \u2502\n\u2502   \u2502 \u2502 c                                                                                                       \u2502 \u2502\n\u2502   \u2502 \u2502 We may apply the Penalty APR to your account if you:                                                    \u2502 \u2502\n\u2502   \u2502 \u2502 fail to make a Minimum Payment by the date and time that it is due; or                                  \u2502 \u2502\n\u2502   \u2502 \u2502 make a payment to us that is returned unpaid.                                                           \u2502 \u2502\n\u2502   \u2502 \u2502 How Long Will the Penalty APR Apply?: If we apply the Penalty APR for                                   \u2502 \u2502\n\u2502   \u2502 \u2502 either of these reasons, the Penalty APR could potentially remain in effect                             \u2502 \u2502\n\u2502   \u2502 \u2502 indefinitely.                                                                                           \u2502 \u2502\n\u2502   \u2502 \u2502 How to Avoid Paying                                                                                     \u2502 \u2502\n\u2502   \u2502 \u2502 Interest on Purchases                                                                                   \u2502 \u2502\n\u2502   \u2502 \u2502 Your due date will be a minimum of 21 days after the close of each billing cycle.                       \u2502 \u2502\n\u2502   \u2502 \u2502 We will not charge you interest on new purchases if you pay your entire balance                         \u2502 \u2502\n\u2502   \u2502 \u2502 or Interest Saving Balance by the due date each month. We will begin charging                           \u2502 \u2502\n\u2502   \u2502 \u2502 interest on balance transfers and cash advances on the transaction date.                                \u2502 \u2502\n\u2502   \u2502 \u2502 Minimum Interest                                                                                        \u2502 \u2502\n\u2502   \u2502 \u2502 Charge                                                                                                  \u2502 \u2502\n\u2502   \u2502 \u2502 None                                                                                                    \u2502 \u2502\n\u2502   \u2502 \u2502 Credit Card Tips from                                                                                   \u2502 \u2502\n\u2502   \u2502 \u2502 the Consumer Financial                                                                                  \u2502 \u2502\n\u2502   \u2502 \u2502 Protection Bureau                                                                                       \u2502 \u2502\n\u2502   \u2502 \u2502 To learn more about factors to consider when applying for or using a credit card,                       \u2502 \u2502\n\u2502   \u2502 \u2502 visit the website of the Consumer Financial Protection Bureau at                                        \u2502 \u2502\n\u2502   \u2502 \u2502 http://www.consumerfinance.gov/learnmore.                                                               \u2502 \u2502\n\u2502   \u2502 \u2502 FEES                                                                                                    \u2502 \u2502\n\u2502   \u2502 \u2502 Annual Membership                                                                                       \u2502 \u2502\n\u2502   \u2502 \u2502 Fee                                                                                                     \u2502 \u2502\n\u2502   \u2502 \u2502 None                                                                                                    \u2502 \u2502\n\u2502   \u2502 \u2502 My Chase Plan                                                                                           \u2502 \u2502\n\u2502   \u2502 \u2502 SM Fee                                                                                                  \u2502 \u2502\n\u2502   \u2502 \u2502 (fixed finance charge)                                                                                  \u2502 \u2502\n\u2502   \u2502 \u2502 Monthly fee of 0% of the amount of each eligible purchase transaction or                                \u2502 \u2502\n\u2502   \u2502 \u2502 amount selected to create a My Chase Plan while in the 0% Intro Purchase                                \u2502 \u2502\n\u2502   \u2502 \u2502 APR period.                                                                                             \u2502 \u2502\n\u2502   \u2502 \u2502 After that, monthly fee of 1.72% of the amount of each eligible purchase                                \u2502 \u2502\n\u2502   \u2502 \u2502 transaction or amount selected to create a My Chase Plan. The My Chase Plan                             \u2502 \u2502\n\u2502   \u2502 \u2502 Fee will be determined at the time each My Chase Plan is created and will                               \u2502 \u2502\n\u2502   \u2502 \u2502 remain the same until the My Chase Plan is paid in full.                                                \u2502 \u2502\n\u2502   \u2502 \u2502 d                                                                                                       \u2502 \u2502\n\u2502   \u2502 \u2502 Transaction Fees                                                                                        \u2502 \u2502\n\u2502   \u2502 \u2502 Balance Transfers Intro fee of either $5 or 3% of the amount of each transfer, whichever is greater,    \u2502 \u2502\n\u2502   \u2502 \u2502 on transfers made within 60 days of account opening. After that: Either $5 or 5%                        \u2502 \u2502\n\u2502   \u2502 \u2502 of the amount of each transfer, whichever is greater.                                                   \u2502 \u2502\n\u2502   \u2502 \u2502 Cash Advances Either $10 or 5% of the amount of each transaction, whichever is greater.                 \u2502 \u2502\n\u2502   \u2502 \u2502 2/25/23, 7:59 PM about:blank                                                                            \u2502 \u2502\n\u2502   \u2502 \u2502 about:blank 2/4                                                                                         \u2502 \u2502\n\u2502   \u2502 \u2502 Foreign Transactions 3% of the amount of each transaction in U.S. dollars.                              \u2502 \u2502\n\u2502   \u2502 \u2502 Penalty Fees                                                                                            \u2502 \u2502\n\u2502   \u2502 \u2502 Late Payment Up to $40.                                                                                 \u2502 \u2502\n\u2502   \u2502 \u2502 Over-the-Credit-Limit None                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502 Return Payment Up to $40.                                                                               \u2502 \u2502\n\u2502   \u2502 \u2502 Return Check None                                                                                       \u2502 \u2502\n\u2502   \u2502 \u2502 Note: This account may not be eligible for balance transfers.                                           \u2502 \u2502\n\u2502   \u2502 \u2502 Loss of Intro APR: We will end your introductory APR if any required Minimum Payment is 60 days late,   \u2502 \u2502\n\u2502   \u2502 \u2502 and                                                                                                     \u2502 \u2502\n\u2502   \u2502 \u2502 apply the Penalty APR.                                                                                  \u2502 \u2502\n\u2502   \u2502 \u2502 How We Will Calculate Your Balance: We use the daily balance method (including new transactions).       \u2502 \u2502\n\u2502   \u2502 \u2502 Prime Rate: Variable APRs are based on the 7.75% Prime Rate as of 2/7/2023.                             \u2502 \u2502\n\u2502   \u2502 \u2502 aWe add 11.74% to the Prime Rate to determine the Purchase/My Chase Loan/Balance Transfer APR.          \u2502 \u2502\n\u2502   \u2502 \u2502 Maximum APR 29.99%.                                                                                     \u2502 \u2502\n\u2502   \u2502 \u2502 bWe add 21.74% to the Prime Rate to determine the Cash Advance APR. Maximum APR 29.99%.                 \u2502 \u2502\n\u2502   \u2502 \u2502 cWe add up to 26.99% to the Prime Rate to determine the Penalty APR. Maximum APR 29.99%.                \u2502 \u2502\n\u2502   \u2502 \u2502 dMy Chase Plan Fee: The My Chase Plan Fee is calculated at the time each plan is created and is based   \u2502 \u2502\n\u2502   \u2502 \u2502 on                                                                                                      \u2502 \u2502\n\u2502   \u2502 \u2502 the amount of each purchase transaction or amount selected to create the plan, the number of billing    \u2502 \u2502\n\u2502   \u2502 \u2502 periods                                                                                                 \u2502 \u2502\n\u2502   \u2502 \u2502 you choose to pay the balance in full, and other factors. The monthly and aggregate dollar amount of    \u2502 \u2502\n\u2502   \u2502 \u2502 your My                                                                                                 \u2502 \u2502\n\u2502   \u2502 \u2502 Chase Plan Fee will be disclosed during the activation of each My Chase Plan.                           \u2502 \u2502\n\u2502   \u2502 \u2502 MILITARY LENDING ACT NOTICE: Federal law provides important protections to members of the Armed         \u2502 \u2502\n\u2502   \u2502 \u2502 Forces and their dependents relating to extensions of consumer credit. In general, the cost of consumer \u2502 \u2502\n\u2502   \u2502 \u2502 credit                                                                                                  \u2502 \u2502\n\u2502   \u2502 \u2502 to a member of the Armed Forces and his or her dependent may not exceed an annual percentage rate of 36 \u2502 \u2502\n\u2502   \u2502 \u2502 percent. This rate must include, as applicable to the credit transaction or account: the costs          \u2502 \u2502\n\u2502   \u2502 \u2502 associated with                                                                                         \u2502 \u2502\n\u2502   \u2502 \u2502 credit insurance premiums; fees for ancillary products sold in connection with the credit transaction;  \u2502 \u2502\n\u2502   \u2502 \u2502 any                                                                                                     \u2502 \u2502\n\u2502   \u2502 \u2502 application fee charged (other than certain application fees for specified credit transactions or       \u2502 \u2502\n\u2502   \u2502 \u2502 accounts); and                                                                                          \u2502 \u2502\n\u2502   \u2502 \u2502 any participation fee charged (other than certain participation fees for a credit card account). To     \u2502 \u2502\n\u2502   \u2502 \u2502 receive this                                                                                            \u2502 \u2502\n\u2502   \u2502 \u2502 information and a description of your payment obligation verbally, please call 1-800-235-9978.          \u2502 \u2502\n\u2502   \u2502 \u2502 TERMS &amp; CONDITIONS                                                                                      \u2502 \u2502\n\u2502   \u2502 \u2502 Authorization: When you respond to this credit card offer from JPMorgan Chase Bank, N.A., Member FDIC,  \u2502 \u2502\n\u2502   \u2502 \u2502 a                                                                                                       \u2502 \u2502\n\u2502   \u2502 \u2502 subsidiary of JPMorgan Chase &amp; Co. (\"Chase\", \"we\", or \"us\"), you agree to the following:                \u2502 \u2502\n\u2502   \u2502 \u2502 1. You authorize us to obtain credit bureau reports, employment, and income information about you that  \u2502 \u2502\n\u2502   \u2502 \u2502 we                                                                                                      \u2502 \u2502\n\u2502   \u2502 \u2502 will use when considering your application for credit. We may obtain and use information about your     \u2502 \u2502\n\u2502   \u2502 \u2502 accounts with us and others such as Checking, Deposit, Investment, and Utility accounts from credit     \u2502 \u2502\n\u2502   \u2502 \u2502 bureaus and other entities. You also authorize us to obtain credit bureau reports and any other         \u2502 \u2502\n\u2502   \u2502 \u2502 information about you in connection with: 1) extensions of credit on your account; 2) the               \u2502 \u2502\n\u2502   \u2502 \u2502 administration,                                                                                         \u2502 \u2502\n\u2502   \u2502 \u2502 review or collection of your account; and 3) offering you enhanced or additional products and services. \u2502 \u2502\n\u2502   \u2502 \u2502 If                                                                                                      \u2502 \u2502\n\u2502   \u2502 \u2502 you ask, we will tell you the name and address of the credit bureau from which we obtained a report     \u2502 \u2502\n\u2502   \u2502 \u2502 about you.                                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502 2. If an account is opened, you will receive a Cardmember Agreement with your card(s). You agree to the \u2502 \u2502\n\u2502   \u2502 \u2502 terms of this agreement by: using the account or any card, authorizing their use, or making any payment \u2502 \u2502\n\u2502   \u2502 \u2502 on the account.                                                                                         \u2502 \u2502\n\u2502   \u2502 \u2502 3. By providing your mobile ph                                                                          \u2502 \u2502\n\u2502   \u2502 \u2502                                                                                                         \u2502 \u2502\n\u2502   \u2502 \u2502                                                                                                         \u2502 \u2502\n\u2502   \u2502 \u2502 Given below is XML that describes the information to extract from this document and the tags to extract \u2502 \u2502\n\u2502   \u2502 \u2502 it into.                                                                                                \u2502 \u2502\n\u2502   \u2502 \u2502                                                                                                         \u2502 \u2502\n\u2502   \u2502 \u2502                                                                                                         \u2502 \u2502\n\u2502   \u2502 \u2502 &lt;output&gt;                                                                                                \u2502 \u2502\n\u2502   \u2502 \u2502     &lt;list name=\"fees\" description=\"What fees and charges are associated with my account?\"&gt;              \u2502 \u2502\n\u2502   \u2502 \u2502         &lt;object&gt;                                                                                        \u2502 \u2502\n\u2502   \u2502 \u2502             &lt;integer name=\"index\" format=\"1-indexed\"/&gt;                                                  \u2502 \u2502\n\u2502   \u2502 \u2502             &lt;string name=\"name\" format=\"lower-case; two-words\"/&gt;                                        \u2502 \u2502\n\u2502   \u2502 \u2502             &lt;string name=\"explanation\" format=\"one-line\"/&gt;                                              \u2502 \u2502\n\u2502   \u2502 \u2502             &lt;float name=\"value\" format=\"percentage\"/&gt;                                                   \u2502 \u2502\n\u2502   \u2502 \u2502         &lt;/object&gt;                                                                                       \u2502 \u2502\n\u2502   \u2502 \u2502     &lt;/list&gt;                                                                                             \u2502 \u2502\n\u2502   \u2502 \u2502     &lt;object name=\"interest_rates\" description=\"What are the interest rates offered by the bank on       \u2502 \u2502\n\u2502   \u2502 \u2502 savings and checking accounts, loans, and credit products?\"/&gt;                                           \u2502 \u2502\n\u2502   \u2502 \u2502 &lt;/output&gt;                                                                                               \u2502 \u2502\n\u2502   \u2502 \u2502                                                                                                         \u2502 \u2502\n\u2502   \u2502 \u2502                                                                                                         \u2502 \u2502\n\u2502   \u2502 \u2502                                                                                                         \u2502 \u2502\n\u2502   \u2502 \u2502 ONLY return a valid JSON object (no other text is necessary). The JSON MUST conform to the XML format,  \u2502 \u2502\n\u2502   \u2502 \u2502 including any types and format requests e.g. requests for lists, objects and specific types. Be correct \u2502 \u2502\n\u2502   \u2502 \u2502 and concise.                                                                                            \u2502 \u2502\n\u2502   \u2502 \u2502                                                                                                         \u2502 \u2502\n\u2502   \u2502 \u2502 JSON Output:                                                                                            \u2502 \u2502\n\u2502   \u2502 \u2502                                                                                                         \u2502 \u2502\n\u2502   \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502   \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Raw LLM Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502   \u2502 \u2502 {                                                                                                       \u2502 \u2502\n\u2502   \u2502 \u2502     \"fees\": [                                                                                           \u2502 \u2502\n\u2502   \u2502 \u2502         {                                                                                               \u2502 \u2502\n\u2502   \u2502 \u2502             \"index\": 1,                                                                                 \u2502 \u2502\n\u2502   \u2502 \u2502             \"name\": \"annual membership\",                                                                \u2502 \u2502\n\u2502   \u2502 \u2502             \"explanation\": \"Annual Membership Fee\",                                                     \u2502 \u2502\n\u2502   \u2502 \u2502             \"value\": 0                                                                                  \u2502 \u2502\n\u2502   \u2502 \u2502         },                                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502         {                                                                                               \u2502 \u2502\n\u2502   \u2502 \u2502             \"index\": 2,                                                                                 \u2502 \u2502\n\u2502   \u2502 \u2502             \"name\": \"my chase plan\",                                                                    \u2502 \u2502\n\u2502   \u2502 \u2502             \"explanation\": \"My Chase Plan Fee (fixed finance charge)\",                                  \u2502 \u2502\n\u2502   \u2502 \u2502             \"value\": 1.72                                                                               \u2502 \u2502\n\u2502   \u2502 \u2502         },                                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502         {                                                                                               \u2502 \u2502\n\u2502   \u2502 \u2502             \"index\": 3,                                                                                 \u2502 \u2502\n\u2502   \u2502 \u2502             \"name\": \"balance transfers\",                                                                \u2502 \u2502\n\u2502   \u2502 \u2502             \"explanation\": \"Balance Transfers Intro fee of either $5 or 3% of the amount of each        \u2502 \u2502\n\u2502   \u2502 \u2502 transfer, whichever is greater, on transfers made within 60 days of account opening. After that: Either \u2502 \u2502\n\u2502   \u2502 \u2502 $5 or 5% of the amount of each transfer, whichever is greater.\",                                        \u2502 \u2502\n\u2502   \u2502 \u2502             \"value\": 3                                                                                  \u2502 \u2502\n\u2502   \u2502 \u2502         },                                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502         {                                                                                               \u2502 \u2502\n\u2502   \u2502 \u2502             \"index\": 4,                                                                                 \u2502 \u2502\n\u2502   \u2502 \u2502             \"name\": \"cash advances\",                                                                    \u2502 \u2502\n\u2502   \u2502 \u2502             \"explanation\": \"Either $10 or 5% of the amount of each transaction, whichever is greater.\", \u2502 \u2502\n\u2502   \u2502 \u2502             \"value\": 5                                                                                  \u2502 \u2502\n\u2502   \u2502 \u2502         },                                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502         {                                                                                               \u2502 \u2502\n\u2502   \u2502 \u2502             \"index\": 5,                                                                                 \u2502 \u2502\n\u2502   \u2502 \u2502             \"name\": \"foreign transactions\",                                                             \u2502 \u2502\n\u2502   \u2502 \u2502             \"explanation\": \"Foreign Transactions 3% of the amount of each transaction in U.S.           \u2502 \u2502\n\u2502   \u2502 \u2502 dollars.\",                                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502             \"value\": 3                                                                                  \u2502 \u2502\n\u2502   \u2502 \u2502         },                                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502         {                                                                                               \u2502 \u2502\n\u2502   \u2502 \u2502             \"index\": 6,                                                                                 \u2502 \u2502\n\u2502   \u2502 \u2502             \"name\": \"late payment\",                                                                     \u2502 \u2502\n\u2502   \u2502 \u2502             \"explanation\": \"Late Payment Up to $40.\",                                                   \u2502 \u2502\n\u2502   \u2502 \u2502             \"value\": 0                                                                                  \u2502 \u2502\n\u2502   \u2502 \u2502         },                                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502         {                                                                                               \u2502 \u2502\n\u2502   \u2502 \u2502             \"index\": 7,                                                                                 \u2502 \u2502\n\u2502   \u2502 \u2502             \"name\": \"over-the-credit-limit\",                                                            \u2502 \u2502\n\u2502   \u2502 \u2502             \"explanation\": \"Over-the-Credit-Limit None\",                                                \u2502 \u2502\n\u2502   \u2502 \u2502             \"value\": 0                                                                                  \u2502 \u2502\n\u2502   \u2502 \u2502         },                                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502         {                                                                                               \u2502 \u2502\n\u2502   \u2502 \u2502             \"index\": 8,                                                                                 \u2502 \u2502\n\u2502   \u2502 \u2502             \"name\": \"return payment\",                                                                   \u2502 \u2502\n\u2502   \u2502 \u2502             \"explanation\": \"Return Payment Up to $40.\",                                                 \u2502 \u2502\n\u2502   \u2502 \u2502             \"value\": 0                                                                                  \u2502 \u2502\n\u2502   \u2502 \u2502         },                                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502         {                                                                                               \u2502 \u2502\n\u2502   \u2502 \u2502             \"index\": 9,                                                                                 \u2502 \u2502\n\u2502   \u2502 \u2502             \"name\": \"return check\",                                                                     \u2502 \u2502\n\u2502   \u2502 \u2502             \"explanation\": \"Return Check None\",                                                         \u2502 \u2502\n\u2502   \u2502 \u2502             \"value\": 0                                                                                  \u2502 \u2502\n\u2502   \u2502 \u2502         }                                                                                               \u2502 \u2502\n\u2502   \u2502 \u2502     ],                                                                                                  \u2502 \u2502\n\u2502   \u2502 \u2502     \"interest_rates\": {                                                                                 \u2502 \u2502\n\u2502   \u2502 \u2502         \"purchase\": {                                                                                   \u2502 \u2502\n\u2502   \u2502 \u2502             \"apr\": 0,                                                                                   \u2502 \u2502\n\u2502   \u2502 \u2502             \"after_apr\": 19.49                                                                          \u2502 \u2502\n\u2502   \u2502 \u2502         },                                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502         \"my_chase_loan\": {                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502             \"apr\": 19.49                                                                                \u2502 \u2502\n\u2502   \u2502 \u2502         },                                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502         \"balance_transfer\": {                                                                           \u2502 \u2502\n\u2502   \u2502 \u2502             \"apr\": 0,                                                                                   \u2502 \u2502\n\u2502   \u2502 \u2502             \"after_apr\": 19.49                                                                          \u2502 \u2502\n\u2502   \u2502 \u2502         },                                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502         \"cash_advance\": {                                                                               \u2502 \u2502\n\u2502   \u2502 \u2502             \"apr\": 29.49                                                                                \u2502 \u2502\n\u2502   \u2502 \u2502         },                                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502         \"penalty\": {                                                                                    \u2502 \u2502\n\u2502   \u2502 \u2502             \"apr\": 0,                                                                                   \u2502 \u2502\n\u2502   \u2502 \u2502             \"maximum_apr\": 29.99                                                                        \u2502 \u2502\n\u2502   \u2502 \u2502         }                                                                                               \u2502 \u2502\n\u2502   \u2502 \u2502     }                                                                                                   \u2502 \u2502\n\u2502   \u2502 \u2502 }                                                                                                       \u2502 \u2502\n\u2502   \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502   \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Validated Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502   \u2502 \u2502 {                                                                                                       \u2502 \u2502\n\u2502   \u2502 \u2502     'fees': [                                                                                           \u2502 \u2502\n\u2502   \u2502 \u2502         {                                                                                               \u2502 \u2502\n\u2502   \u2502 \u2502             'index': 1,                                                                                 \u2502 \u2502\n\u2502   \u2502 \u2502             'name': 'annual membership',                                                                \u2502 \u2502\n\u2502   \u2502 \u2502             'explanation': 'Annual Membership Fee',                                                     \u2502 \u2502\n\u2502   \u2502 \u2502             'value': 0                                                                                  \u2502 \u2502\n\u2502   \u2502 \u2502         },                                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502         {                                                                                               \u2502 \u2502\n\u2502   \u2502 \u2502             'index': 2,                                                                                 \u2502 \u2502\n\u2502   \u2502 \u2502             'name': ReAsk(                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502                 incorrect_value='my chase plan',                                                        \u2502 \u2502\n\u2502   \u2502 \u2502                 error_message='must be exactly two words',                                              \u2502 \u2502\n\u2502   \u2502 \u2502                 fix_value='my chase',                                                                   \u2502 \u2502\n\u2502   \u2502 \u2502                 path=['fees', 1, 'name']                                                                \u2502 \u2502\n\u2502   \u2502 \u2502             ),                                                                                          \u2502 \u2502\n\u2502   \u2502 \u2502             'explanation': 'My Chase Plan Fee (fixed finance charge)',                                  \u2502 \u2502\n\u2502   \u2502 \u2502             'value': 1.72                                                                               \u2502 \u2502\n\u2502   \u2502 \u2502         },                                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502         {                                                                                               \u2502 \u2502\n\u2502   \u2502 \u2502             'index': 3,                                                                                 \u2502 \u2502\n\u2502   \u2502 \u2502             'name': 'balance transfers',                                                                \u2502 \u2502\n\u2502   \u2502 \u2502             'explanation': 'Balance Transfers Intro fee of either $5 or 3% of the amount of each        \u2502 \u2502\n\u2502   \u2502 \u2502 transfer, whichever is greater, on transfers made within 60 days of account opening. After that: Either \u2502 \u2502\n\u2502   \u2502 \u2502 $5 or 5% of the amount of each transfer, whichever is greater.',                                        \u2502 \u2502\n\u2502   \u2502 \u2502             'value': 3                                                                                  \u2502 \u2502\n\u2502   \u2502 \u2502         },                                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502         {                                                                                               \u2502 \u2502\n\u2502   \u2502 \u2502             'index': 4,                                                                                 \u2502 \u2502\n\u2502   \u2502 \u2502             'name': 'cash advances',                                                                    \u2502 \u2502\n\u2502   \u2502 \u2502             'explanation': 'Either $10 or 5% of the amount of each transaction, whichever is greater.', \u2502 \u2502\n\u2502   \u2502 \u2502             'value': 5                                                                                  \u2502 \u2502\n\u2502   \u2502 \u2502         },                                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502         {                                                                                               \u2502 \u2502\n\u2502   \u2502 \u2502             'index': 5,                                                                                 \u2502 \u2502\n\u2502   \u2502 \u2502             'name': 'foreign transactions',                                                             \u2502 \u2502\n\u2502   \u2502 \u2502             'explanation': 'Foreign Transactions 3% of the amount of each transaction in U.S.           \u2502 \u2502\n\u2502   \u2502 \u2502 dollars.',                                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502             'value': 3                                                                                  \u2502 \u2502\n\u2502   \u2502 \u2502         },                                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502         {                                                                                               \u2502 \u2502\n\u2502   \u2502 \u2502             'index': 6,                                                                                 \u2502 \u2502\n\u2502   \u2502 \u2502             'name': 'late payment',                                                                     \u2502 \u2502\n\u2502   \u2502 \u2502             'explanation': 'Late Payment Up to $40.',                                                   \u2502 \u2502\n\u2502   \u2502 \u2502             'value': 0                                                                                  \u2502 \u2502\n\u2502   \u2502 \u2502         },                                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502         {                                                                                               \u2502 \u2502\n\u2502   \u2502 \u2502             'index': 7,                                                                                 \u2502 \u2502\n\u2502   \u2502 \u2502             'name': ReAsk(                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502                 incorrect_value='over-the-credit-limit',                                                \u2502 \u2502\n\u2502   \u2502 \u2502                 error_message='must be exactly two words',                                              \u2502 \u2502\n\u2502   \u2502 \u2502                 fix_value='over-the-credit-limit',                                                      \u2502 \u2502\n\u2502   \u2502 \u2502                 path=['fees', 6, 'name']                                                                \u2502 \u2502\n\u2502   \u2502 \u2502             ),                                                                                          \u2502 \u2502\n\u2502   \u2502 \u2502             'explanation': 'Over-the-Credit-Limit None',                                                \u2502 \u2502\n\u2502   \u2502 \u2502             'value': 0                                                                                  \u2502 \u2502\n\u2502   \u2502 \u2502         },                                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502         {                                                                                               \u2502 \u2502\n\u2502   \u2502 \u2502             'index': 8,                                                                                 \u2502 \u2502\n\u2502   \u2502 \u2502             'name': 'return payment',                                                                   \u2502 \u2502\n\u2502   \u2502 \u2502             'explanation': 'Return Payment Up to $40.',                                                 \u2502 \u2502\n\u2502   \u2502 \u2502             'value': 0                                                                                  \u2502 \u2502\n\u2502   \u2502 \u2502         },                                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502         {                                                                                               \u2502 \u2502\n\u2502   \u2502 \u2502             'index': 9,                                                                                 \u2502 \u2502\n\u2502   \u2502 \u2502             'name': 'return check',                                                                     \u2502 \u2502\n\u2502   \u2502 \u2502             'explanation': 'Return Check None',                                                         \u2502 \u2502\n\u2502   \u2502 \u2502             'value': 0                                                                                  \u2502 \u2502\n\u2502   \u2502 \u2502         }                                                                                               \u2502 \u2502\n\u2502   \u2502 \u2502     ],                                                                                                  \u2502 \u2502\n\u2502   \u2502 \u2502     'interest_rates': {                                                                                 \u2502 \u2502\n\u2502   \u2502 \u2502         'purchase': {'apr': 0, 'after_apr': 19.49},                                                     \u2502 \u2502\n\u2502   \u2502 \u2502         'my_chase_loan': {'apr': 19.49},                                                                \u2502 \u2502\n\u2502   \u2502 \u2502         'balance_transfer': {'apr': 0, 'after_apr': 19.49},                                             \u2502 \u2502\n\u2502   \u2502 \u2502         'cash_advance': {'apr': 29.49},                                                                 \u2502 \u2502\n\u2502   \u2502 \u2502         'penalty': {'apr': 0, 'maximum_apr': 29.99}                                                     \u2502 \u2502\n\u2502   \u2502 \u2502     }                                                                                                   \u2502 \u2502\n\u2502   \u2502 \u2502 }                                                                                                       \u2502 \u2502\n\u2502   \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502   \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u2514\u2500\u2500 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Step 2 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n    \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Prompt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 I was given the following JSON response, which had problems due to incorrect values.                    \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 {                                                                                                       \u2502 \u2502\n    \u2502 \u2502   \"fees\": [                                                                                             \u2502 \u2502\n    \u2502 \u2502     {                                                                                                   \u2502 \u2502\n    \u2502 \u2502       \"name\": {                                                                                         \u2502 \u2502\n    \u2502 \u2502         \"incorrect_value\": \"my chase plan\",                                                             \u2502 \u2502\n    \u2502 \u2502         \"error_message\": \"must be exactly two words\"                                                    \u2502 \u2502\n    \u2502 \u2502       }                                                                                                 \u2502 \u2502\n    \u2502 \u2502     },                                                                                                  \u2502 \u2502\n    \u2502 \u2502     {                                                                                                   \u2502 \u2502\n    \u2502 \u2502       \"name\": {                                                                                         \u2502 \u2502\n    \u2502 \u2502         \"incorrect_value\": \"over-the-credit-limit\",                                                     \u2502 \u2502\n    \u2502 \u2502         \"error_message\": \"must be exactly two words\"                                                    \u2502 \u2502\n    \u2502 \u2502       }                                                                                                 \u2502 \u2502\n    \u2502 \u2502     }                                                                                                   \u2502 \u2502\n    \u2502 \u2502   ]                                                                                                     \u2502 \u2502\n    \u2502 \u2502 }                                                                                                       \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 Help me correct the incorrect values based on the given error messages.                                 \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 Given below is XML that describes the information to extract from this document and the tags to extract \u2502 \u2502\n    \u2502 \u2502 it into.                                                                                                \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 &lt;output&gt;                                                                                                \u2502 \u2502\n    \u2502 \u2502     &lt;list name=\"fees\" description=\"What fees and charges are associated with my account?\"&gt;              \u2502 \u2502\n    \u2502 \u2502         &lt;object&gt;                                                                                        \u2502 \u2502\n    \u2502 \u2502             &lt;string name=\"name\" format=\"lower-case; two-words\"/&gt;                                        \u2502 \u2502\n    \u2502 \u2502         &lt;/object&gt;                                                                                       \u2502 \u2502\n    \u2502 \u2502     &lt;/list&gt;                                                                                             \u2502 \u2502\n    \u2502 \u2502 &lt;/output&gt;                                                                                               \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 ONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the \u2502 \u2502\n    \u2502 \u2502 `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding  \u2502 \u2502\n    \u2502 \u2502 XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g.        \u2502 \u2502\n    \u2502 \u2502 requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere,     \u2502 \u2502\n    \u2502 \u2502 enter `None`.                                                                                           \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 Here are examples of simple (XML, JSON) pairs that show the expected behavior:                          \u2502 \u2502\n    \u2502 \u2502 - `&lt;string name='foo' format='two-words lower-case' /&gt;` =&gt; `{{'foo': 'example one'}}`                   \u2502 \u2502\n    \u2502 \u2502 - `&lt;list name='bar'&gt;&lt;string format='upper-case' /&gt;&lt;/list&gt;` =&gt; `{{\"bar\": ['STRING ONE', 'STRING TWO',    \u2502 \u2502\n    \u2502 \u2502 etc.]}}`                                                                                                \u2502 \u2502\n    \u2502 \u2502 - `&lt;object name='baz'&gt;&lt;string name=\"foo\" format=\"capitalize two-words\" /&gt;&lt;integer name=\"index\"          \u2502 \u2502\n    \u2502 \u2502 format=\"1-indexed\" /&gt;&lt;/object&gt;` =&gt; `{{'baz': {{'foo': 'Some String', 'index': 1}}}}`                    \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 JSON Object:                                                                                            \u2502 \u2502\n    \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n    \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Raw LLM Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 {                                                                                                       \u2502 \u2502\n    \u2502 \u2502   \"fees\": [                                                                                             \u2502 \u2502\n    \u2502 \u2502     {                                                                                                   \u2502 \u2502\n    \u2502 \u2502       \"name\": \"my-chase-plan\"                                                                           \u2502 \u2502\n    \u2502 \u2502     },                                                                                                  \u2502 \u2502\n    \u2502 \u2502     {                                                                                                   \u2502 \u2502\n    \u2502 \u2502       \"name\": \"over-credit-limit\"                                                                       \u2502 \u2502\n    \u2502 \u2502     }                                                                                                   \u2502 \u2502\n    \u2502 \u2502   ]                                                                                                     \u2502 \u2502\n    \u2502 \u2502 }                                                                                                       \u2502 \u2502\n    \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n    \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Validated Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n    \u2502 \u2502 {                                                                                                       \u2502 \u2502\n    \u2502 \u2502     'fees': [                                                                                           \u2502 \u2502\n    \u2502 \u2502         {                                                                                               \u2502 \u2502\n    \u2502 \u2502             'index': 1,                                                                                 \u2502 \u2502\n    \u2502 \u2502             'name': 'annual membership',                                                                \u2502 \u2502\n    \u2502 \u2502             'explanation': 'Annual Membership Fee',                                                     \u2502 \u2502\n    \u2502 \u2502             'value': 0                                                                                  \u2502 \u2502\n    \u2502 \u2502         },                                                                                              \u2502 \u2502\n    \u2502 \u2502         {                                                                                               \u2502 \u2502\n    \u2502 \u2502             'index': 2,                                                                                 \u2502 \u2502\n    \u2502 \u2502             'name': 'my-chase-plan',                                                                    \u2502 \u2502\n    \u2502 \u2502             'explanation': 'My Chase Plan Fee (fixed finance charge)',                                  \u2502 \u2502\n    \u2502 \u2502             'value': 1.72                                                                               \u2502 \u2502\n    \u2502 \u2502         },                                                                                              \u2502 \u2502\n    \u2502 \u2502         {                                                                                               \u2502 \u2502\n    \u2502 \u2502             'index': 3,                                                                                 \u2502 \u2502\n    \u2502 \u2502             'name': 'balance transfers',                                                                \u2502 \u2502\n    \u2502 \u2502             'explanation': 'Balance Transfers Intro fee of either $5 or 3% of the amount of each        \u2502 \u2502\n    \u2502 \u2502 transfer, whichever is greater, on transfers made within 60 days of account opening. After that: Either \u2502 \u2502\n    \u2502 \u2502 $5 or 5% of the amount of each transfer, whichever is greater.',                                        \u2502 \u2502\n    \u2502 \u2502             'value': 3                                                                                  \u2502 \u2502\n    \u2502 \u2502         },                                                                                              \u2502 \u2502\n    \u2502 \u2502         {                                                                                               \u2502 \u2502\n    \u2502 \u2502             'index': 4,                                                                                 \u2502 \u2502\n    \u2502 \u2502             'name': 'cash advances',                                                                    \u2502 \u2502\n    \u2502 \u2502             'explanation': 'Either $10 or 5% of the amount of each transaction, whichever is greater.', \u2502 \u2502\n    \u2502 \u2502             'value': 5                                                                                  \u2502 \u2502\n    \u2502 \u2502         },                                                                                              \u2502 \u2502\n    \u2502 \u2502         {                                                                                               \u2502 \u2502\n    \u2502 \u2502             'index': 5,                                                                                 \u2502 \u2502\n    \u2502 \u2502             'name': 'foreign transactions',                                                             \u2502 \u2502\n    \u2502 \u2502             'explanation': 'Foreign Transactions 3% of the amount of each transaction in U.S.           \u2502 \u2502\n    \u2502 \u2502 dollars.',                                                                                              \u2502 \u2502\n    \u2502 \u2502             'value': 3                                                                                  \u2502 \u2502\n    \u2502 \u2502         },                                                                                              \u2502 \u2502\n    \u2502 \u2502         {                                                                                               \u2502 \u2502\n    \u2502 \u2502             'index': 6,                                                                                 \u2502 \u2502\n    \u2502 \u2502             'name': 'late payment',                                                                     \u2502 \u2502\n    \u2502 \u2502             'explanation': 'Late Payment Up to $40.',                                                   \u2502 \u2502\n    \u2502 \u2502             'value': 0                                                                                  \u2502 \u2502\n    \u2502 \u2502         },                                                                                              \u2502 \u2502\n    \u2502 \u2502         {                                                                                               \u2502 \u2502\n    \u2502 \u2502             'index': 7,                                                                                 \u2502 \u2502\n    \u2502 \u2502             'name': 'over-credit-limit',                                                                \u2502 \u2502\n    \u2502 \u2502             'explanation': 'Over-the-Credit-Limit None',                                                \u2502 \u2502\n    \u2502 \u2502             'value': 0                                                                                  \u2502 \u2502\n    \u2502 \u2502         },                                                                                              \u2502 \u2502\n    \u2502 \u2502         {                                                                                               \u2502 \u2502\n    \u2502 \u2502             'index': 8,                                                                                 \u2502 \u2502\n    \u2502 \u2502             'name': 'return payment',                                                                   \u2502 \u2502\n    \u2502 \u2502             'explanation': 'Return Payment Up to $40.',                                                 \u2502 \u2502\n    \u2502 \u2502             'value': 0                                                                                  \u2502 \u2502\n    \u2502 \u2502         },                                                                                              \u2502 \u2502\n    \u2502 \u2502         {                                                                                               \u2502 \u2502\n    \u2502 \u2502             'index': 9,                                                                                 \u2502 \u2502\n    \u2502 \u2502             'name': 'return check',                                                                     \u2502 \u2502\n    \u2502 \u2502             'explanation': 'Return Check None',                                                         \u2502 \u2502\n    \u2502 \u2502             'value': 0                                                                                  \u2502 \u2502\n    \u2502 \u2502         }                                                                                               \u2502 \u2502\n    \u2502 \u2502     ],                                                                                                  \u2502 \u2502\n    \u2502 \u2502     'interest_rates': {                                                                                 \u2502 \u2502\n    \u2502 \u2502         'purchase': {'apr': 0, 'after_apr': 19.49},                                                     \u2502 \u2502\n    \u2502 \u2502         'my_chase_loan': {'apr': 19.49},                                                                \u2502 \u2502\n    \u2502 \u2502         'balance_transfer': {'apr': 0, 'after_apr': 19.49},                                             \u2502 \u2502\n    \u2502 \u2502         'cash_advance': {'apr': 29.49},                                                                 \u2502 \u2502\n    \u2502 \u2502         'penalty': {'apr': 0, 'maximum_apr': 29.99}                                                     \u2502 \u2502\n    \u2502 \u2502     }                                                                                                   \u2502 \u2502\n    \u2502 \u2502 }                                                                                                       \u2502 \u2502\n    \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n    \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</pre>"},{"location":"examples/extracting_entities/#extracting-entities-from-a-terms-of-service-document","title":"Extracting entities from a Terms of Service document","text":"<p>Note</p> <p>To download this example as a Jupyter notebook, click here.</p> <p>In this example, we will use Guardrails to extract key information from a Terms-of-Service document.</p>"},{"location":"examples/extracting_entities/#objective","title":"Objective","text":"<p>We want to extract structured information about all fees and interest rates associated with the Chase credit card.</p>"},{"location":"examples/extracting_entities/#step-0-download-pdf-and-load-it-as-string","title":"Step 0: Download PDF and load it as string","text":"<p>To get started, download the document from here and save it in <code>data/chase_card_agreement.pdf</code>.</p> <p>Guardrails has some built-in functions to help with common tasks. Here, we will use the <code>read_pdf</code> function to load the PDF as a string.</p>"},{"location":"examples/extracting_entities/#step-1-create-the-rail-spec","title":"Step 1: Create the RAIL Spec","text":"<p>Ordinarily, we would create an RAIL spec in a separate file. For the purposes of this example, we will create the spec in this notebook as a string following the RAIL syntax. For more information on RAIL, see the RAIL documentation.</p> <p>Here, we request:</p> <ol> <li>A list of the fees associated with the card. We ask for sub-information, each with its own quality criteria and corrective action.</li> <li>A object (i.e. key-value pairs) for the interest.</li> </ol>"},{"location":"examples/extracting_entities/#step-2-create-a-guard-object-with-the-rail-spec","title":"Step 2: Create a <code>Guard</code> object with the RAIL Spec","text":"<p>We create a <code>gd.Guard</code> object that will check, validate and correct the output of the LLM. This object:</p> <ol> <li>Enforces the quality criteria specified in the RAIL spec.</li> <li>Takes corrective action when the quality criteria are not met.</li> <li>Compiles the schema and type info from the RAIL spec and adds it to the prompt.</li> </ol>"},{"location":"examples/extracting_entities/#step-3-wrap-the-llm-api-call-with-guard","title":"Step 3: Wrap the LLM API call with <code>Guard</code>","text":""},{"location":"examples/generate_structured_data/","title":"Generate structured synthetic data","text":"<pre><code>rail_str = \"\"\"\n&lt;rail version=\"0.1\"&gt;\n&lt;output&gt;\n    &lt;list name=\"user_orders\" description=\"Generate a list of user, and how many orders they have placed in the past.\" format=\"length: 10 10\" on-fail-length=\"noop\"&gt;\n        &lt;object&gt;\n            &lt;string name=\"user_id\" description=\"The user's id.\" format=\"1-indexed\" /&gt;\n            &lt;string name=\"user_name\" description=\"The user's first name and last name\" format=\"two-words\" /&gt;\n            &lt;integer name=\"num_orders\" description=\"The number of orders the user has placed\" format=\"valid-range: 0 50\" /&gt;\n            &lt;date name=\"last_order_date\" description=\"Date of last order\" /&gt;\n        &lt;/object&gt;\n    &lt;/list&gt;\n&lt;/output&gt;\n&lt;prompt&gt;\nGenerate a dataset of fake user orders. Each row of the dataset should be valid.\n@complete_json_suffix&lt;/prompt&gt;\n&lt;/rail&gt;\n\"\"\"\n</code></pre> <pre><code>import guardrails as gd\nfrom rich import print\nguard = gd.Guard.from_rail_string(rail_str)\n</code></pre> <pre>\n<code>/Users/shreyarajpal/guardrails/guardrails/schema.py:187: UserWarning: Validator 1-indexed is not valid for element string.\n  warnings.warn(\n</code>\n</pre> <p>The <code>Guard</code> object compiles the output schema and adds it to the prompt. We can see the final prompt below:</p> <pre><code>print(guard.base_prompt)\n</code></pre> <pre>\nGenerate a dataset of fake user orders. Each row of the dataset should be valid.\n\n\nGiven below is XML that describes the information to extract from this document and the tags to extract it into.\n\n&lt;output&gt;\n    &lt;list name=\"user_orders\" description=\"Generate a list of user, and how many orders they have placed in the \npast.\" format=\"length: min=10 max=10\"&gt;\n        &lt;object&gt;\n            &lt;string name=\"user_id\" description=\"The user's id.\" format=\"1-indexed\"/&gt;\n            &lt;string name=\"user_name\" description=\"The user's first name and last name\" format=\"two-words\"/&gt;\n            &lt;integer name=\"num_orders\" description=\"The number of orders the user has placed\" format=\"valid-range: \n0 50\"/&gt;\n            &lt;date name=\"last_order_date\" description=\"Date of last order\"/&gt;\n        &lt;/object&gt;\n    &lt;/list&gt;\n&lt;/output&gt;\n\n\nONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the `name` \nattribute of the corresponding XML, and the value is of the type specified by the corresponding XML's tag. The JSON\nMUST conform to the XML format, including any types and format requests e.g. requests for lists, objects and \nspecific types. Be correct and concise. If you are unsure anywhere, enter `None`.\n\nHere are examples of simple (XML, JSON) pairs that show the expected behavior:\n- `&lt;string name='foo' format='two-words lower-case' /&gt;` =&gt; `{{'foo': 'example one'}}`\n- `&lt;list name='bar'&gt;&lt;string format='upper-case' /&gt;&lt;/list&gt;` =&gt; `{{\"bar\": ['STRING ONE', 'STRING TWO', etc.]}}`\n- `&lt;object name='baz'&gt;&lt;string name=\"foo\" format=\"capitalize two-words\" /&gt;&lt;integer name=\"index\" format=\"1-indexed\" /&gt;&lt;/object&gt;` =&gt; `{{'baz': {{'foo': 'Some String', 'index': 1}}}}`\n\nJSON Object:\n</pre> <pre><code>import openai\nraw_llm_response, validated_response = guard(\nopenai.Completion.create, engine=\"text-davinci-003\", max_tokens=2048, temperature=0\n)\n</code></pre> <pre>\n<code>/Users/shreyarajpal/anaconda3/envs/tiff-env/lib/python3.9/site-packages/eliot/json.py:22: FutureWarning: In the future `np.bool` will be defined as the corresponding NumPy scalar.  (This may have returned Python scalars in past versions.\n  if isinstance(o, (numpy.bool, numpy.bool_)):\n</code>\n</pre> <p>Running the cell above returns: 1. The raw LLM text output as a single string. 2. A dictionary where the key <code>user_orders</code> key contains a list of dictionaries, where each dictionary represents a row in the dataframe.</p> <pre><code>print(validated_response)\n</code></pre> <pre>{\n    'user_orders': [\n        {'user_id': 1, 'user_name': 'John Smith', 'num_orders': 10, 'last_order_date': '2020-01-01'},\n        {'user_id': 2, 'user_name': 'Jane Doe', 'num_orders': 5, 'last_order_date': '2020-02-01'},\n        {'user_id': 3, 'user_name': 'Bob Jones', 'num_orders': 25, 'last_order_date': '2020-03-01'},\n        {'user_id': 4, 'user_name': 'Alice Johnson', 'num_orders': 0, 'last_order_date': '2020-04-01'},\n        {'user_id': 5, 'user_name': 'John Doe', 'num_orders': 15, 'last_order_date': '2020-05-01'},\n        {'user_id': 6, 'user_name': 'Jane Smith', 'num_orders': 20, 'last_order_date': '2020-06-01'},\n        {'user_id': 7, 'user_name': 'Bob Johnson', 'num_orders': 10, 'last_order_date': '2020-07-01'},\n        {'user_id': 8, 'user_name': 'Alice Jones', 'num_orders': 30, 'last_order_date': '2020-08-01'},\n        {'user_id': 9, 'user_name': 'John Johnson', 'num_orders': 40, 'last_order_date': '2020-09-01'},\n        {'user_id': 10, 'user_name': 'Jane Jones', 'num_orders': 35, 'last_order_date': '2020-10-01'}\n    ]\n}\n</pre> <pre><code>print(guard.state.most_recent_call.tree)\n</code></pre> <pre>Logs\n\u2514\u2500\u2500 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Step 1 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n    \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Prompt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 Generate a dataset of fake user orders. Each row of the dataset should be valid.                        \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 Given below is XML that describes the information to extract from this document and the tags to extract \u2502 \u2502\n    \u2502 \u2502 it into.                                                                                                \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 &lt;output&gt;                                                                                                \u2502 \u2502\n    \u2502 \u2502     &lt;list name=\"user_orders\" description=\"Generate a list of user, and how many orders they have placed \u2502 \u2502\n    \u2502 \u2502 in the past.\" format=\"length: min=10 max=10\"&gt;                                                           \u2502 \u2502\n    \u2502 \u2502         &lt;object&gt;                                                                                        \u2502 \u2502\n    \u2502 \u2502             &lt;string name=\"user_id\" description=\"The user's id.\" format=\"1-indexed\"/&gt;                    \u2502 \u2502\n    \u2502 \u2502             &lt;string name=\"user_name\" description=\"The user's first name and last name\"                  \u2502 \u2502\n    \u2502 \u2502 format=\"two-words\"/&gt;                                                                                    \u2502 \u2502\n    \u2502 \u2502             &lt;integer name=\"num_orders\" description=\"The number of orders the user has placed\"           \u2502 \u2502\n    \u2502 \u2502 format=\"valid-range: 0 50\"/&gt;                                                                            \u2502 \u2502\n    \u2502 \u2502             &lt;date name=\"last_order_date\" description=\"Date of last order\"/&gt;                             \u2502 \u2502\n    \u2502 \u2502         &lt;/object&gt;                                                                                       \u2502 \u2502\n    \u2502 \u2502     &lt;/list&gt;                                                                                             \u2502 \u2502\n    \u2502 \u2502 &lt;/output&gt;                                                                                               \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 ONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the \u2502 \u2502\n    \u2502 \u2502 `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding  \u2502 \u2502\n    \u2502 \u2502 XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g.        \u2502 \u2502\n    \u2502 \u2502 requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere,     \u2502 \u2502\n    \u2502 \u2502 enter `None`.                                                                                           \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 Here are examples of simple (XML, JSON) pairs that show the expected behavior:                          \u2502 \u2502\n    \u2502 \u2502 - `&lt;string name='foo' format='two-words lower-case' /&gt;` =&gt; `{'foo': 'example one'}`                     \u2502 \u2502\n    \u2502 \u2502 - `&lt;list name='bar'&gt;&lt;string format='upper-case' /&gt;&lt;/list&gt;` =&gt; `{\"bar\": ['STRING ONE', 'STRING TWO',     \u2502 \u2502\n    \u2502 \u2502 etc.]}`                                                                                                 \u2502 \u2502\n    \u2502 \u2502 - `&lt;object name='baz'&gt;&lt;string name=\"foo\" format=\"capitalize two-words\" /&gt;&lt;integer name=\"index\"          \u2502 \u2502\n    \u2502 \u2502 format=\"1-indexed\" /&gt;&lt;/object&gt;` =&gt; `{'baz': {'foo': 'Some String', 'index': 1}}`                        \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 JSON Object:                                                                                            \u2502 \u2502\n    \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n    \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Raw LLM Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 {                                                                                                       \u2502 \u2502\n    \u2502 \u2502     \"user_orders\": [                                                                                    \u2502 \u2502\n    \u2502 \u2502         {                                                                                               \u2502 \u2502\n    \u2502 \u2502             \"user_id\": 1,                                                                               \u2502 \u2502\n    \u2502 \u2502             \"user_name\": \"John Smith\",                                                                  \u2502 \u2502\n    \u2502 \u2502             \"num_orders\": 10,                                                                           \u2502 \u2502\n    \u2502 \u2502             \"last_order_date\": \"2020-01-01\"                                                             \u2502 \u2502\n    \u2502 \u2502         },                                                                                              \u2502 \u2502\n    \u2502 \u2502         {                                                                                               \u2502 \u2502\n    \u2502 \u2502             \"user_id\": 2,                                                                               \u2502 \u2502\n    \u2502 \u2502             \"user_name\": \"Jane Doe\",                                                                    \u2502 \u2502\n    \u2502 \u2502             \"num_orders\": 5,                                                                            \u2502 \u2502\n    \u2502 \u2502             \"last_order_date\": \"2020-02-01\"                                                             \u2502 \u2502\n    \u2502 \u2502         },                                                                                              \u2502 \u2502\n    \u2502 \u2502         {                                                                                               \u2502 \u2502\n    \u2502 \u2502             \"user_id\": 3,                                                                               \u2502 \u2502\n    \u2502 \u2502             \"user_name\": \"Bob Jones\",                                                                   \u2502 \u2502\n    \u2502 \u2502             \"num_orders\": 25,                                                                           \u2502 \u2502\n    \u2502 \u2502             \"last_order_date\": \"2020-03-01\"                                                             \u2502 \u2502\n    \u2502 \u2502         },                                                                                              \u2502 \u2502\n    \u2502 \u2502         {                                                                                               \u2502 \u2502\n    \u2502 \u2502             \"user_id\": 4,                                                                               \u2502 \u2502\n    \u2502 \u2502             \"user_name\": \"Alice Johnson\",                                                               \u2502 \u2502\n    \u2502 \u2502             \"num_orders\": 0,                                                                            \u2502 \u2502\n    \u2502 \u2502             \"last_order_date\": \"2020-04-01\"                                                             \u2502 \u2502\n    \u2502 \u2502         },                                                                                              \u2502 \u2502\n    \u2502 \u2502         {                                                                                               \u2502 \u2502\n    \u2502 \u2502             \"user_id\": 5,                                                                               \u2502 \u2502\n    \u2502 \u2502             \"user_name\": \"John Doe\",                                                                    \u2502 \u2502\n    \u2502 \u2502             \"num_orders\": 15,                                                                           \u2502 \u2502\n    \u2502 \u2502             \"last_order_date\": \"2020-05-01\"                                                             \u2502 \u2502\n    \u2502 \u2502         },                                                                                              \u2502 \u2502\n    \u2502 \u2502         {                                                                                               \u2502 \u2502\n    \u2502 \u2502             \"user_id\": 6,                                                                               \u2502 \u2502\n    \u2502 \u2502             \"user_name\": \"Jane Smith\",                                                                  \u2502 \u2502\n    \u2502 \u2502             \"num_orders\": 20,                                                                           \u2502 \u2502\n    \u2502 \u2502             \"last_order_date\": \"2020-06-01\"                                                             \u2502 \u2502\n    \u2502 \u2502         },                                                                                              \u2502 \u2502\n    \u2502 \u2502         {                                                                                               \u2502 \u2502\n    \u2502 \u2502             \"user_id\": 7,                                                                               \u2502 \u2502\n    \u2502 \u2502             \"user_name\": \"Bob Johnson\",                                                                 \u2502 \u2502\n    \u2502 \u2502             \"num_orders\": 10,                                                                           \u2502 \u2502\n    \u2502 \u2502             \"last_order_date\": \"2020-07-01\"                                                             \u2502 \u2502\n    \u2502 \u2502         },                                                                                              \u2502 \u2502\n    \u2502 \u2502         {                                                                                               \u2502 \u2502\n    \u2502 \u2502             \"user_id\": 8,                                                                               \u2502 \u2502\n    \u2502 \u2502             \"user_name\": \"Alice Jones\",                                                                 \u2502 \u2502\n    \u2502 \u2502             \"num_orders\": 30,                                                                           \u2502 \u2502\n    \u2502 \u2502             \"last_order_date\": \"2020-08-01\"                                                             \u2502 \u2502\n    \u2502 \u2502         },                                                                                              \u2502 \u2502\n    \u2502 \u2502         {                                                                                               \u2502 \u2502\n    \u2502 \u2502             \"user_id\": 9,                                                                               \u2502 \u2502\n    \u2502 \u2502             \"user_name\": \"John Johnson\",                                                                \u2502 \u2502\n    \u2502 \u2502             \"num_orders\": 40,                                                                           \u2502 \u2502\n    \u2502 \u2502             \"last_order_date\": \"2020-09-01\"                                                             \u2502 \u2502\n    \u2502 \u2502         },                                                                                              \u2502 \u2502\n    \u2502 \u2502         {                                                                                               \u2502 \u2502\n    \u2502 \u2502             \"user_id\": 10,                                                                              \u2502 \u2502\n    \u2502 \u2502             \"user_name\": \"Jane Jones\",                                                                  \u2502 \u2502\n    \u2502 \u2502             \"num_orders\": 35,                                                                           \u2502 \u2502\n    \u2502 \u2502             \"last_order_date\": \"2020-10-01\"                                                             \u2502 \u2502\n    \u2502 \u2502         }                                                                                               \u2502 \u2502\n    \u2502 \u2502     ]                                                                                                   \u2502 \u2502\n    \u2502 \u2502 }                                                                                                       \u2502 \u2502\n    \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n    \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Validated Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n    \u2502 \u2502 {                                                                                                       \u2502 \u2502\n    \u2502 \u2502     'user_orders': [                                                                                    \u2502 \u2502\n    \u2502 \u2502         {                                                                                               \u2502 \u2502\n    \u2502 \u2502             'user_id': 1,                                                                               \u2502 \u2502\n    \u2502 \u2502             'user_name': 'John Smith',                                                                  \u2502 \u2502\n    \u2502 \u2502             'num_orders': 10,                                                                           \u2502 \u2502\n    \u2502 \u2502             'last_order_date': '2020-01-01'                                                             \u2502 \u2502\n    \u2502 \u2502         },                                                                                              \u2502 \u2502\n    \u2502 \u2502         {                                                                                               \u2502 \u2502\n    \u2502 \u2502             'user_id': 2,                                                                               \u2502 \u2502\n    \u2502 \u2502             'user_name': 'Jane Doe',                                                                    \u2502 \u2502\n    \u2502 \u2502             'num_orders': 5,                                                                            \u2502 \u2502\n    \u2502 \u2502             'last_order_date': '2020-02-01'                                                             \u2502 \u2502\n    \u2502 \u2502         },                                                                                              \u2502 \u2502\n    \u2502 \u2502         {                                                                                               \u2502 \u2502\n    \u2502 \u2502             'user_id': 3,                                                                               \u2502 \u2502\n    \u2502 \u2502             'user_name': 'Bob Jones',                                                                   \u2502 \u2502\n    \u2502 \u2502             'num_orders': 25,                                                                           \u2502 \u2502\n    \u2502 \u2502             'last_order_date': '2020-03-01'                                                             \u2502 \u2502\n    \u2502 \u2502         },                                                                                              \u2502 \u2502\n    \u2502 \u2502         {                                                                                               \u2502 \u2502\n    \u2502 \u2502             'user_id': 4,                                                                               \u2502 \u2502\n    \u2502 \u2502             'user_name': 'Alice Johnson',                                                               \u2502 \u2502\n    \u2502 \u2502             'num_orders': 0,                                                                            \u2502 \u2502\n    \u2502 \u2502             'last_order_date': '2020-04-01'                                                             \u2502 \u2502\n    \u2502 \u2502         },                                                                                              \u2502 \u2502\n    \u2502 \u2502         {                                                                                               \u2502 \u2502\n    \u2502 \u2502             'user_id': 5,                                                                               \u2502 \u2502\n    \u2502 \u2502             'user_name': 'John Doe',                                                                    \u2502 \u2502\n    \u2502 \u2502             'num_orders': 15,                                                                           \u2502 \u2502\n    \u2502 \u2502             'last_order_date': '2020-05-01'                                                             \u2502 \u2502\n    \u2502 \u2502         },                                                                                              \u2502 \u2502\n    \u2502 \u2502         {                                                                                               \u2502 \u2502\n    \u2502 \u2502             'user_id': 6,                                                                               \u2502 \u2502\n    \u2502 \u2502             'user_name': 'Jane Smith',                                                                  \u2502 \u2502\n    \u2502 \u2502             'num_orders': 20,                                                                           \u2502 \u2502\n    \u2502 \u2502             'last_order_date': '2020-06-01'                                                             \u2502 \u2502\n    \u2502 \u2502         },                                                                                              \u2502 \u2502\n    \u2502 \u2502         {                                                                                               \u2502 \u2502\n    \u2502 \u2502             'user_id': 7,                                                                               \u2502 \u2502\n    \u2502 \u2502             'user_name': 'Bob Johnson',                                                                 \u2502 \u2502\n    \u2502 \u2502             'num_orders': 10,                                                                           \u2502 \u2502\n    \u2502 \u2502             'last_order_date': '2020-07-01'                                                             \u2502 \u2502\n    \u2502 \u2502         },                                                                                              \u2502 \u2502\n    \u2502 \u2502         {                                                                                               \u2502 \u2502\n    \u2502 \u2502             'user_id': 8,                                                                               \u2502 \u2502\n    \u2502 \u2502             'user_name': 'Alice Jones',                                                                 \u2502 \u2502\n    \u2502 \u2502             'num_orders': 30,                                                                           \u2502 \u2502\n    \u2502 \u2502             'last_order_date': '2020-08-01'                                                             \u2502 \u2502\n    \u2502 \u2502         },                                                                                              \u2502 \u2502\n    \u2502 \u2502         {                                                                                               \u2502 \u2502\n    \u2502 \u2502             'user_id': 9,                                                                               \u2502 \u2502\n    \u2502 \u2502             'user_name': 'John Johnson',                                                                \u2502 \u2502\n    \u2502 \u2502             'num_orders': 40,                                                                           \u2502 \u2502\n    \u2502 \u2502             'last_order_date': '2020-09-01'                                                             \u2502 \u2502\n    \u2502 \u2502         },                                                                                              \u2502 \u2502\n    \u2502 \u2502         {                                                                                               \u2502 \u2502\n    \u2502 \u2502             'user_id': 10,                                                                              \u2502 \u2502\n    \u2502 \u2502             'user_name': 'Jane Jones',                                                                  \u2502 \u2502\n    \u2502 \u2502             'num_orders': 35,                                                                           \u2502 \u2502\n    \u2502 \u2502             'last_order_date': '2020-10-01'                                                             \u2502 \u2502\n    \u2502 \u2502         }                                                                                               \u2502 \u2502\n    \u2502 \u2502     ]                                                                                                   \u2502 \u2502\n    \u2502 \u2502 }                                                                                                       \u2502 \u2502\n    \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n    \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</pre>"},{"location":"examples/generate_structured_data/#generating-structured-synthetic-data","title":"Generating Structured Synthetic Data","text":"<p>Note</p> <p>To download this tutorial as a Jupyter notebook, click here.</p> <p>In this example, we'll generate structured dummy data for a <code>pandas</code> dataframe.</p> <p>We make the assumption that:</p> <ol> <li>We don't need any external libraries that are not already installed in the environment.</li> <li>We are able to execute the code in the environment.</li> </ol>"},{"location":"examples/generate_structured_data/#objective","title":"Objective","text":"<p>We want to generate structured synthetic data, where each column has a specific data type. All rows in the dataset must respect the column data types. Additionally, we have some more constraints we want the data to respect:</p> <ol> <li>There should be exactly 10 rows in the dataset.</li> <li>Each user should have a first name and a last name.</li> <li>The number of orders associated with each user should be between 0 and 50.</li> <li>Each user should have a most recent order date.</li> </ol>"},{"location":"examples/generate_structured_data/#step-1-generating-rail-spec","title":"Step 1: Generating <code>RAIL</code> Spec","text":"<p>Ordinarily, we could create a separate <code>RAIL</code> spec in a file. However, for the sake of this example, we will generate the <code>RAIL</code> spec in the notebook as a string.</p>"},{"location":"examples/generate_structured_data/#step-2-create-a-guard-object-with-the-rail-spec","title":"Step 2: Create a <code>Guard</code> object with the RAIL Spec","text":"<p>We create a <code>gd.Guard</code> object that will check, validate and correct the generated code. This object:</p> <ol> <li>Enforces the quality criteria specified in the RAIL spec (i.e. bug free code).</li> <li>Takes corrective action when the quality criteria are not met (i.e. reasking the LLM).</li> <li>Compiles the schema and type info from the RAIL spec and adds it to the prompt.</li> </ol>"},{"location":"examples/generate_structured_data/#step-3-wrap-the-llm-api-call-with-guard","title":"Step 3: Wrap the LLM API call with <code>Guard</code>","text":""},{"location":"examples/guardrails_with_chat_models/","title":"Use Guardrails with Chat Models","text":"<pre><code>import guardrails as gd\nfrom rich import print\ncontent = gd.docs_utils.read_pdf(\"data/chase_card_agreement.pdf\")\nprint(f\"Chase Credit Card Document:\\n\\n{content[:275]}\\n...\")\n</code></pre> <pre>Chase Credit Card Document:\n\n2/25/23, 7:59 PM about:blank\nabout:blank 1/4\nPRICING INFORMATION\nINTEREST RATES AND INTEREST CHARGES\nPurchase Annual\nPercentage Rate (APR) 0% Intro APR for the first 18 months that your Account is open.\nAfter that, 19.49%. This APR will vary with the market based on the Prim\n...\n</pre> <pre><code>rail_str = \"\"\"\n&lt;rail version=\"0.1\"&gt;\n&lt;output&gt;\n    &lt;list name=\"fees\" description=\"What fees and charges are associated with my account?\"&gt;\n        &lt;object&gt;\n            &lt;integer name=\"index\" format=\"1-indexed\" /&gt;\n            &lt;string name=\"name\" format=\"lower-case; two-words\" on-fail-lower-case=\"fix\" on-fail-two-words=\"reask\" /&gt;\n            &lt;string name=\"explanation\" format=\"one-line\" /&gt;\n            &lt;float name=\"value\" format=\"percentage\"/&gt;\n        &lt;/object&gt;\n    &lt;/list&gt;\n    &lt;object name=\"interest_rates\" description=\"What are the interest rates offered by the bank on savings and checking accounts, loans, and credit products?\" /&gt;\n&lt;/output&gt;\n&lt;instructions&gt;\nYou are a helpful assistant only capable of communicating with valid JSON, and no other text.\n@json_suffix_prompt_examples\n&lt;/instructions&gt;\n&lt;prompt&gt;\nGiven the following document, answer the following questions. If the answer doesn't exist in the document, enter \n`null`.\n{{document}}\nExtract information from this document and return a JSON that follows the correct schema.\n@xml_prefix_prompt\n{output_schema}\n&lt;/prompt&gt;\n&lt;/rail&gt;\n\"\"\"\n</code></pre> <pre><code>guard = gd.Guard.from_rail_string(rail_str)\n</code></pre> <pre>\n<code>/Users/shreyarajpal/guardrails/guardrails/schema.py:197: UserWarning: Validator 1-indexed is not valid for element integer.\n  warnings.warn(\n/Users/shreyarajpal/guardrails/guardrails/schema.py:197: UserWarning: Validator percentage is not valid for element float.\n  warnings.warn(\n</code>\n</pre> <p>As we can see, a few formatters weren't supported. These formatters won't be enforced in the output, but this information can still be used to generate a prompt.</p> <p>We see the prompt that will be sent to the LLM. The <code>{document}</code> is substituted with the user provided value at runtime.</p> <pre><code>print(guard.base_prompt)\n</code></pre> <pre>\nGiven the following document, answer the following questions. If the answer doesn't exist in the document, enter \n`null`.\n\n{document}\n\nExtract information from this document and return a JSON that follows the correct schema.\n\n\nGiven below is XML that describes the information to extract from this document and the tags to extract it into.\n\n\n&lt;output&gt;\n    &lt;list name=\"fees\" description=\"What fees and charges are associated with my account?\"&gt;\n        &lt;object&gt;\n            &lt;integer name=\"index\" format=\"1-indexed\"/&gt;\n            &lt;string name=\"name\" format=\"lower-case; two-words\"/&gt;\n            &lt;string name=\"explanation\" format=\"one-line\"/&gt;\n            &lt;float name=\"value\" format=\"percentage\"/&gt;\n        &lt;/object&gt;\n    &lt;/list&gt;\n    &lt;object name=\"interest_rates\" description=\"What are the interest rates offered by the bank on savings and \nchecking accounts, loans, and credit products?\"/&gt;\n&lt;/output&gt;\n\n\n</pre> <p>Here's the formatted instructions sent as the system message to the LLM.</p> <pre><code>print(guard.instructions.source)\n</code></pre> <pre>\nYou are a helpful assistant only capable of communicating with valid JSON, and no other text.\n\n\nONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the `name` \nattribute of the corresponding XML, and the value is of the type specified by the corresponding XML's tag. The JSON\nMUST conform to the XML format, including any types and format requests e.g. requests for lists, objects and \nspecific types. Be correct and concise. If you are unsure anywhere, enter `None`.\n\nHere are examples of simple (XML, JSON) pairs that show the expected behavior:\n- `&lt;string name='foo' format='two-words lower-case' /&gt;` =&gt; `{{'foo': 'example one'}}`\n- `&lt;list name='bar'&gt;&lt;string format='upper-case' /&gt;&lt;/list&gt;` =&gt; `{{\"bar\": ['STRING ONE', 'STRING TWO', etc.]}}`\n- `&lt;object name='baz'&gt;&lt;string name=\"foo\" format=\"capitalize two-words\" /&gt;&lt;integer name=\"index\" format=\"1-indexed\" /&gt;&lt;/object&gt;` =&gt; `{{'baz': {{'foo': 'Some String', 'index': 1}}}}`\n\n\n</pre> <pre><code>import openai\nraw_llm_response, validated_response = guard(\nopenai.ChatCompletion.create,\nprompt_params={\"document\": content[:6000]},\nmodel=\"gpt-3.5-turbo\",\nmax_tokens=2048,\ntemperature=0,\n)\n</code></pre> <pre>\n<code>/Users/shreyarajpal/anaconda3/envs/tiff-env/lib/python3.9/site-packages/eliot/json.py:22: FutureWarning: In the future `np.bool` will be defined as the corresponding NumPy scalar.  (This may have returned Python scalars in past versions.\n  if isinstance(o, (numpy.bool, numpy.bool_)):\n</code>\n</pre> <p>The <code>guard</code> wrapper returns the raw_llm_respose (which is a simple string), and the validated and corrected output (which is a dictionary).</p> <p>We can see that the output is a dictionary with the correct schema and types.</p> <pre><code>print(validated_response)\n</code></pre> <pre>{\n    'fees': [\n        {'index': 1, 'name': 'annual membership', 'explanation': 'None', 'value': 0.0},\n        {\n            'index': 2,\n            'name': 'My Chase',\n            'explanation': 'monthly fee of 0% of the amount of each eligible purchase transaction or amount \nselected to create a my chase plan while in the 0% intro purchase apr period. after that, monthly fee of 1.72% of \nthe amount of each eligible purchase transaction or amount selected to create a my chase plan. the my chase plan \nfee will be determined at the time each my chase plan is created and will remain the same until the my chase plan \nis paid in full.',\n            'value': 1.72\n        },\n        {\n            'index': 3,\n            'name': 'balance transfers',\n            'explanation': 'intro fee of either $5 or 3% of the amount of each transfer, whichever is greater, on \ntransfers made within 60 days of account opening. after that: either $5 or 5% of the amount of each transfer, \nwhichever is greater.',\n            'value': 5.0\n        },\n        {\n            'index': 4,\n            'name': 'cash advances',\n            'explanation': 'Either $10 or 5% of the amount of each transaction, whichever is greater.',\n            'value': 5.0\n        },\n        {\n            'index': 5,\n            'name': 'foreign transactions',\n            'explanation': '3% of the amount of each transaction in U.S. dollars.',\n            'value': 3.0\n        },\n        {'index': 6, 'name': 'Late Payment', 'explanation': 'Up to $40.', 'value': None},\n        {'index': 7, 'name': 'over-the-credit-limit penalty', 'explanation': 'None', 'value': None},\n        {'index': 8, 'name': 'Return Payment', 'explanation': 'Up to $40.', 'value': None},\n        {'index': 9, 'name': 'Return Check', 'explanation': 'None', 'value': None}\n    ],\n    'interest_rates': {\n        'purchase annual percentage rate (apr)': {\n            'introductory rate': 0.0,\n            'introductory period': 'first 18 months',\n            'standard rate': 19.49,\n            'variable': True,\n            'description': 'The interest rate charged on purchases made with the credit card.'\n        },\n        'my chase loan sm apr': {\n            'rate': 19.49,\n            'variable': True,\n            'description': 'The interest rate charged on My Chase Loan balances.'\n        },\n        'balance transfer apr': {\n            'introductory rate': 0.0,\n            'introductory period': 'first 18 months',\n            'standard rate': 19.49,\n            'variable': True,\n            'description': 'The interest rate charged on balances transferred to the credit card.'\n        },\n        'cash advance apr': {\n            'rate': 29.49,\n            'variable': True,\n            'description': 'The interest rate charged on cash advances taken with the credit card.'\n        },\n        'penalty apr and when it applies': {\n            'rate': 'Up to 29.99%',\n            'variable': True,\n            'description': 'The interest rate charged on the credit card when a penalty is applied.'\n        },\n        'maximum apr': {\n            'rate': 29.99,\n            'variable': True,\n            'description': 'The highest interest rate that can be charged on the credit card.'\n        }\n    }\n}\n</pre> <pre><code>guard.state.most_recent_call.tree\n</code></pre> <pre>Logs\n\u251c\u2500\u2500 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Step 0 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502   \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Prompt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502   \u2502 \u2502                                                                                                         \u2502 \u2502\n\u2502   \u2502 \u2502 Given the following document, answer the following questions. If the answer doesn't exist in the        \u2502 \u2502\n\u2502   \u2502 \u2502 document, enter                                                                                         \u2502 \u2502\n\u2502   \u2502 \u2502 `null`.                                                                                                 \u2502 \u2502\n\u2502   \u2502 \u2502                                                                                                         \u2502 \u2502\n\u2502   \u2502 \u2502 2/25/23, 7:59 PM about:blank                                                                            \u2502 \u2502\n\u2502   \u2502 \u2502 about:blank 1/4                                                                                         \u2502 \u2502\n\u2502   \u2502 \u2502 PRICING INFORMATION                                                                                     \u2502 \u2502\n\u2502   \u2502 \u2502 INTEREST RATES AND INTEREST CHARGES                                                                     \u2502 \u2502\n\u2502   \u2502 \u2502 Purchase Annual                                                                                         \u2502 \u2502\n\u2502   \u2502 \u2502 Percentage Rate (APR) 0% Intro APR for the first 18 months that your Account is open.                   \u2502 \u2502\n\u2502   \u2502 \u2502 After that, 19.49%. This APR will vary with the market based on the Prime                               \u2502 \u2502\n\u2502   \u2502 \u2502 Rate.                                                                                                   \u2502 \u2502\n\u2502   \u2502 \u2502 a                                                                                                       \u2502 \u2502\n\u2502   \u2502 \u2502 My Chase Loan                                                                                           \u2502 \u2502\n\u2502   \u2502 \u2502 SM APR 19.49%. This APR will vary with the market based on the Prime Rate.                              \u2502 \u2502\n\u2502   \u2502 \u2502 a                                                                                                       \u2502 \u2502\n\u2502   \u2502 \u2502 Promotional offers with fixed APRs and varying durations may be available from                          \u2502 \u2502\n\u2502   \u2502 \u2502 time to time on some accounts.                                                                          \u2502 \u2502\n\u2502   \u2502 \u2502 Balance Transfer APR 0% Intro APR for the first 18 months that your Account is open.                    \u2502 \u2502\n\u2502   \u2502 \u2502 After that, 19.49%. This APR will vary with the market based on the Prime                               \u2502 \u2502\n\u2502   \u2502 \u2502 Rate.                                                                                                   \u2502 \u2502\n\u2502   \u2502 \u2502 a                                                                                                       \u2502 \u2502\n\u2502   \u2502 \u2502 Cash Advance APR 29.49%. This APR will vary with the market based on the Prime Rate.                    \u2502 \u2502\n\u2502   \u2502 \u2502 b                                                                                                       \u2502 \u2502\n\u2502   \u2502 \u2502 Penalty APR and When                                                                                    \u2502 \u2502\n\u2502   \u2502 \u2502 It Applies                                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502 Up to 29.99%. This APR will vary with the market based on the Prime Rate.                               \u2502 \u2502\n\u2502   \u2502 \u2502 c                                                                                                       \u2502 \u2502\n\u2502   \u2502 \u2502 We may apply the Penalty APR to your account if you:                                                    \u2502 \u2502\n\u2502   \u2502 \u2502 fail to make a Minimum Payment by the date and time that it is due; or                                  \u2502 \u2502\n\u2502   \u2502 \u2502 make a payment to us that is returned unpaid.                                                           \u2502 \u2502\n\u2502   \u2502 \u2502 How Long Will the Penalty APR Apply?: If we apply the Penalty APR for                                   \u2502 \u2502\n\u2502   \u2502 \u2502 either of these reasons, the Penalty APR could potentially remain in effect                             \u2502 \u2502\n\u2502   \u2502 \u2502 indefinitely.                                                                                           \u2502 \u2502\n\u2502   \u2502 \u2502 How to Avoid Paying                                                                                     \u2502 \u2502\n\u2502   \u2502 \u2502 Interest on Purchases                                                                                   \u2502 \u2502\n\u2502   \u2502 \u2502 Your due date will be a minimum of 21 days after the close of each billing cycle.                       \u2502 \u2502\n\u2502   \u2502 \u2502 We will not charge you interest on new purchases if you pay your entire balance                         \u2502 \u2502\n\u2502   \u2502 \u2502 or Interest Saving Balance by the due date each month. We will begin charging                           \u2502 \u2502\n\u2502   \u2502 \u2502 interest on balance transfers and cash advances on the transaction date.                                \u2502 \u2502\n\u2502   \u2502 \u2502 Minimum Interest                                                                                        \u2502 \u2502\n\u2502   \u2502 \u2502 Charge                                                                                                  \u2502 \u2502\n\u2502   \u2502 \u2502 None                                                                                                    \u2502 \u2502\n\u2502   \u2502 \u2502 Credit Card Tips from                                                                                   \u2502 \u2502\n\u2502   \u2502 \u2502 the Consumer Financial                                                                                  \u2502 \u2502\n\u2502   \u2502 \u2502 Protection Bureau                                                                                       \u2502 \u2502\n\u2502   \u2502 \u2502 To learn more about factors to consider when applying for or using a credit card,                       \u2502 \u2502\n\u2502   \u2502 \u2502 visit the website of the Consumer Financial Protection Bureau at                                        \u2502 \u2502\n\u2502   \u2502 \u2502 http://www.consumerfinance.gov/learnmore.                                                               \u2502 \u2502\n\u2502   \u2502 \u2502 FEES                                                                                                    \u2502 \u2502\n\u2502   \u2502 \u2502 Annual Membership                                                                                       \u2502 \u2502\n\u2502   \u2502 \u2502 Fee                                                                                                     \u2502 \u2502\n\u2502   \u2502 \u2502 None                                                                                                    \u2502 \u2502\n\u2502   \u2502 \u2502 My Chase Plan                                                                                           \u2502 \u2502\n\u2502   \u2502 \u2502 SM Fee                                                                                                  \u2502 \u2502\n\u2502   \u2502 \u2502 (fixed finance charge)                                                                                  \u2502 \u2502\n\u2502   \u2502 \u2502 Monthly fee of 0% of the amount of each eligible purchase transaction or                                \u2502 \u2502\n\u2502   \u2502 \u2502 amount selected to create a My Chase Plan while in the 0% Intro Purchase                                \u2502 \u2502\n\u2502   \u2502 \u2502 APR period.                                                                                             \u2502 \u2502\n\u2502   \u2502 \u2502 After that, monthly fee of 1.72% of the amount of each eligible purchase                                \u2502 \u2502\n\u2502   \u2502 \u2502 transaction or amount selected to create a My Chase Plan. The My Chase Plan                             \u2502 \u2502\n\u2502   \u2502 \u2502 Fee will be determined at the time each My Chase Plan is created and will                               \u2502 \u2502\n\u2502   \u2502 \u2502 remain the same until the My Chase Plan is paid in full.                                                \u2502 \u2502\n\u2502   \u2502 \u2502 d                                                                                                       \u2502 \u2502\n\u2502   \u2502 \u2502 Transaction Fees                                                                                        \u2502 \u2502\n\u2502   \u2502 \u2502 Balance Transfers Intro fee of either $5 or 3% of the amount of each transfer, whichever is greater,    \u2502 \u2502\n\u2502   \u2502 \u2502 on transfers made within 60 days of account opening. After that: Either $5 or 5%                        \u2502 \u2502\n\u2502   \u2502 \u2502 of the amount of each transfer, whichever is greater.                                                   \u2502 \u2502\n\u2502   \u2502 \u2502 Cash Advances Either $10 or 5% of the amount of each transaction, whichever is greater.                 \u2502 \u2502\n\u2502   \u2502 \u2502 2/25/23, 7:59 PM about:blank                                                                            \u2502 \u2502\n\u2502   \u2502 \u2502 about:blank 2/4                                                                                         \u2502 \u2502\n\u2502   \u2502 \u2502 Foreign Transactions 3% of the amount of each transaction in U.S. dollars.                              \u2502 \u2502\n\u2502   \u2502 \u2502 Penalty Fees                                                                                            \u2502 \u2502\n\u2502   \u2502 \u2502 Late Payment Up to $40.                                                                                 \u2502 \u2502\n\u2502   \u2502 \u2502 Over-the-Credit-Limit None                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502 Return Payment Up to $40.                                                                               \u2502 \u2502\n\u2502   \u2502 \u2502 Return Check None                                                                                       \u2502 \u2502\n\u2502   \u2502 \u2502 Note: This account may not be eligible for balance transfers.                                           \u2502 \u2502\n\u2502   \u2502 \u2502 Loss of Intro APR: We will end your introductory APR if any required Minimum Payment is 60 days late,   \u2502 \u2502\n\u2502   \u2502 \u2502 and                                                                                                     \u2502 \u2502\n\u2502   \u2502 \u2502 apply the Penalty APR.                                                                                  \u2502 \u2502\n\u2502   \u2502 \u2502 How We Will Calculate Your Balance: We use the daily balance method (including new transactions).       \u2502 \u2502\n\u2502   \u2502 \u2502 Prime Rate: Variable APRs are based on the 7.75% Prime Rate as of 2/7/2023.                             \u2502 \u2502\n\u2502   \u2502 \u2502 aWe add 11.74% to the Prime Rate to determine the Purchase/My Chase Loan/Balance Transfer APR.          \u2502 \u2502\n\u2502   \u2502 \u2502 Maximum APR 29.99%.                                                                                     \u2502 \u2502\n\u2502   \u2502 \u2502 bWe add 21.74% to the Prime Rate to determine the Cash Advance APR. Maximum APR 29.99%.                 \u2502 \u2502\n\u2502   \u2502 \u2502 cWe add up to 26.99% to the Prime Rate to determine the Penalty APR. Maximum APR 29.99%.                \u2502 \u2502\n\u2502   \u2502 \u2502 dMy Chase Plan Fee: The My Chase Plan Fee is calculated at the time each plan is created and is based   \u2502 \u2502\n\u2502   \u2502 \u2502 on                                                                                                      \u2502 \u2502\n\u2502   \u2502 \u2502 the amount of each purchase transaction or amount selected to create the plan, the number of billing    \u2502 \u2502\n\u2502   \u2502 \u2502 periods                                                                                                 \u2502 \u2502\n\u2502   \u2502 \u2502 you choose to pay the balance in full, and other factors. The monthly and aggregate dollar amount of    \u2502 \u2502\n\u2502   \u2502 \u2502 your My                                                                                                 \u2502 \u2502\n\u2502   \u2502 \u2502 Chase Plan Fee will be disclosed during the activation of each My Chase Plan.                           \u2502 \u2502\n\u2502   \u2502 \u2502 MILITARY LENDING ACT NOTICE: Federal law provides important protections to members of the Armed         \u2502 \u2502\n\u2502   \u2502 \u2502 Forces and their dependents relating to extensions of consumer credit. In general, the cost of consumer \u2502 \u2502\n\u2502   \u2502 \u2502 credit                                                                                                  \u2502 \u2502\n\u2502   \u2502 \u2502 to a member of the Armed Forces and his or her dependent may not exceed an annual percentage rate of 36 \u2502 \u2502\n\u2502   \u2502 \u2502 percent. This rate must include, as applicable to the credit transaction or account: the costs          \u2502 \u2502\n\u2502   \u2502 \u2502 associated with                                                                                         \u2502 \u2502\n\u2502   \u2502 \u2502 credit insurance premiums; fees for ancillary products sold in connection with the credit transaction;  \u2502 \u2502\n\u2502   \u2502 \u2502 any                                                                                                     \u2502 \u2502\n\u2502   \u2502 \u2502 application fee charged (other than certain application fees for specified credit transactions or       \u2502 \u2502\n\u2502   \u2502 \u2502 accounts); and                                                                                          \u2502 \u2502\n\u2502   \u2502 \u2502 any participation fee charged (other than certain participation fees for a credit card account). To     \u2502 \u2502\n\u2502   \u2502 \u2502 receive this                                                                                            \u2502 \u2502\n\u2502   \u2502 \u2502 information and a description of your payment obligation verbally, please call 1-800-235-9978.          \u2502 \u2502\n\u2502   \u2502 \u2502 TERMS &amp; CONDITIONS                                                                                      \u2502 \u2502\n\u2502   \u2502 \u2502 Authorization: When you respond to this credit card offer from JPMorgan Chase Bank, N.A., Member FDIC,  \u2502 \u2502\n\u2502   \u2502 \u2502 a                                                                                                       \u2502 \u2502\n\u2502   \u2502 \u2502 subsidiary of JPMorgan Chase &amp; Co. (\"Chase\", \"we\", or \"us\"), you agree to the following:                \u2502 \u2502\n\u2502   \u2502 \u2502 1. You authorize us to obtain credit bureau reports, employment, and income information about you that  \u2502 \u2502\n\u2502   \u2502 \u2502 we                                                                                                      \u2502 \u2502\n\u2502   \u2502 \u2502 will use when considering your application for credit. We may obtain and use information about your     \u2502 \u2502\n\u2502   \u2502 \u2502 accounts with us and others such as Checking, Deposit, Investment, and Utility accounts from credit     \u2502 \u2502\n\u2502   \u2502 \u2502 bureaus and other entities. You also authorize us to obtain credit bureau reports and any other         \u2502 \u2502\n\u2502   \u2502 \u2502 information about you in connection with: 1) extensions of credit on your account; 2) the               \u2502 \u2502\n\u2502   \u2502 \u2502 administration,                                                                                         \u2502 \u2502\n\u2502   \u2502 \u2502 review or collection of your account; and 3) offering you enhanced or additional products and services. \u2502 \u2502\n\u2502   \u2502 \u2502 If                                                                                                      \u2502 \u2502\n\u2502   \u2502 \u2502 you ask, we will tell you the name and address of the credit bureau from which we obtained a report     \u2502 \u2502\n\u2502   \u2502 \u2502 about you.                                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502 2. If an account is opened, you will receive a Cardmember Agreement with your card(s). You agree to the \u2502 \u2502\n\u2502   \u2502 \u2502 terms of this agreement by: using the account or any card, authorizing their use, or making any payment \u2502 \u2502\n\u2502   \u2502 \u2502 on the account.                                                                                         \u2502 \u2502\n\u2502   \u2502 \u2502 3. By providing your mobile ph                                                                          \u2502 \u2502\n\u2502   \u2502 \u2502                                                                                                         \u2502 \u2502\n\u2502   \u2502 \u2502 Extract information from this document and return a JSON that follows the correct schema.               \u2502 \u2502\n\u2502   \u2502 \u2502                                                                                                         \u2502 \u2502\n\u2502   \u2502 \u2502                                                                                                         \u2502 \u2502\n\u2502   \u2502 \u2502 Given below is XML that describes the information to extract from this document and the tags to extract \u2502 \u2502\n\u2502   \u2502 \u2502 it into.                                                                                                \u2502 \u2502\n\u2502   \u2502 \u2502                                                                                                         \u2502 \u2502\n\u2502   \u2502 \u2502                                                                                                         \u2502 \u2502\n\u2502   \u2502 \u2502 &lt;output&gt;                                                                                                \u2502 \u2502\n\u2502   \u2502 \u2502     &lt;list name=\"fees\" description=\"What fees and charges are associated with my account?\"&gt;              \u2502 \u2502\n\u2502   \u2502 \u2502         &lt;object&gt;                                                                                        \u2502 \u2502\n\u2502   \u2502 \u2502             &lt;integer name=\"index\" format=\"1-indexed\"/&gt;                                                  \u2502 \u2502\n\u2502   \u2502 \u2502             &lt;string name=\"name\" format=\"lower-case; two-words\"/&gt;                                        \u2502 \u2502\n\u2502   \u2502 \u2502             &lt;string name=\"explanation\" format=\"one-line\"/&gt;                                              \u2502 \u2502\n\u2502   \u2502 \u2502             &lt;float name=\"value\" format=\"percentage\"/&gt;                                                   \u2502 \u2502\n\u2502   \u2502 \u2502         &lt;/object&gt;                                                                                       \u2502 \u2502\n\u2502   \u2502 \u2502     &lt;/list&gt;                                                                                             \u2502 \u2502\n\u2502   \u2502 \u2502     &lt;object name=\"interest_rates\" description=\"What are the interest rates offered by the bank on       \u2502 \u2502\n\u2502   \u2502 \u2502 savings and checking accounts, loans, and credit products?\"/&gt;                                           \u2502 \u2502\n\u2502   \u2502 \u2502 &lt;/output&gt;                                                                                               \u2502 \u2502\n\u2502   \u2502 \u2502                                                                                                         \u2502 \u2502\n\u2502   \u2502 \u2502                                                                                                         \u2502 \u2502\n\u2502   \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502   \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Instructions \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502   \u2502 \u2502                                                                                                         \u2502 \u2502\n\u2502   \u2502 \u2502 You are a helpful assistant only capable of communicating with valid JSON, and no other text.           \u2502 \u2502\n\u2502   \u2502 \u2502                                                                                                         \u2502 \u2502\n\u2502   \u2502 \u2502                                                                                                         \u2502 \u2502\n\u2502   \u2502 \u2502 ONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the \u2502 \u2502\n\u2502   \u2502 \u2502 `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding  \u2502 \u2502\n\u2502   \u2502 \u2502 XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g.        \u2502 \u2502\n\u2502   \u2502 \u2502 requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere,     \u2502 \u2502\n\u2502   \u2502 \u2502 enter `None`.                                                                                           \u2502 \u2502\n\u2502   \u2502 \u2502                                                                                                         \u2502 \u2502\n\u2502   \u2502 \u2502 Here are examples of simple (XML, JSON) pairs that show the expected behavior:                          \u2502 \u2502\n\u2502   \u2502 \u2502 - `&lt;string name='foo' format='two-words lower-case' /&gt;` =&gt; `{'foo': 'example one'}`                     \u2502 \u2502\n\u2502   \u2502 \u2502 - `&lt;list name='bar'&gt;&lt;string format='upper-case' /&gt;&lt;/list&gt;` =&gt; `{\"bar\": ['STRING ONE', 'STRING TWO',     \u2502 \u2502\n\u2502   \u2502 \u2502 etc.]}`                                                                                                 \u2502 \u2502\n\u2502   \u2502 \u2502 - `&lt;object name='baz'&gt;&lt;string name=\"foo\" format=\"capitalize two-words\" /&gt;&lt;integer name=\"index\"          \u2502 \u2502\n\u2502   \u2502 \u2502 format=\"1-indexed\" /&gt;&lt;/object&gt;` =&gt; `{'baz': {'foo': 'Some String', 'index': 1}}`                        \u2502 \u2502\n\u2502   \u2502 \u2502                                                                                                         \u2502 \u2502\n\u2502   \u2502 \u2502                                                                                                         \u2502 \u2502\n\u2502   \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502   \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Raw LLM Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502   \u2502 \u2502 {                                                                                                       \u2502 \u2502\n\u2502   \u2502 \u2502     \"fees\": [                                                                                           \u2502 \u2502\n\u2502   \u2502 \u2502         {                                                                                               \u2502 \u2502\n\u2502   \u2502 \u2502             \"index\": 1,                                                                                 \u2502 \u2502\n\u2502   \u2502 \u2502             \"name\": \"annual membership fee\",                                                            \u2502 \u2502\n\u2502   \u2502 \u2502             \"explanation\": \"None\",                                                                      \u2502 \u2502\n\u2502   \u2502 \u2502             \"value\": 0.0                                                                                \u2502 \u2502\n\u2502   \u2502 \u2502         },                                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502         {                                                                                               \u2502 \u2502\n\u2502   \u2502 \u2502             \"index\": 2,                                                                                 \u2502 \u2502\n\u2502   \u2502 \u2502             \"name\": \"my chase plan sm fee\",                                                             \u2502 \u2502\n\u2502   \u2502 \u2502             \"explanation\": \"monthly fee of 0% of the amount of each eligible purchase transaction or    \u2502 \u2502\n\u2502   \u2502 \u2502 amount selected to create a my chase plan while in the 0% intro purchase apr period. after that,        \u2502 \u2502\n\u2502   \u2502 \u2502 monthly fee of 1.72% of the amount of each eligible purchase transaction or amount selected to create a \u2502 \u2502\n\u2502   \u2502 \u2502 my chase plan. the my chase plan fee will be determined at the time each my chase plan is created and   \u2502 \u2502\n\u2502   \u2502 \u2502 will remain the same until the my chase plan is paid in full.\",                                         \u2502 \u2502\n\u2502   \u2502 \u2502             \"value\": 1.72                                                                               \u2502 \u2502\n\u2502   \u2502 \u2502         },                                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502         {                                                                                               \u2502 \u2502\n\u2502   \u2502 \u2502             \"index\": 3,                                                                                 \u2502 \u2502\n\u2502   \u2502 \u2502             \"name\": \"balance transfers transaction fee\",                                                \u2502 \u2502\n\u2502   \u2502 \u2502             \"explanation\": \"intro fee of either $5 or 3% of the amount of each transfer, whichever is   \u2502 \u2502\n\u2502   \u2502 \u2502 greater, on transfers made within 60 days of account opening. after that: either $5 or 5% of the amount \u2502 \u2502\n\u2502   \u2502 \u2502 of each transfer, whichever is greater.\",                                                               \u2502 \u2502\n\u2502   \u2502 \u2502             \"value\": 5.0                                                                                \u2502 \u2502\n\u2502   \u2502 \u2502         },                                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502         {                                                                                               \u2502 \u2502\n\u2502   \u2502 \u2502             \"index\": 4,                                                                                 \u2502 \u2502\n\u2502   \u2502 \u2502             \"name\": \"cash advances transaction fee\",                                                    \u2502 \u2502\n\u2502   \u2502 \u2502             \"explanation\": \"Either $10 or 5% of the amount of each transaction, whichever is greater.\", \u2502 \u2502\n\u2502   \u2502 \u2502             \"value\": 5.0                                                                                \u2502 \u2502\n\u2502   \u2502 \u2502         },                                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502         {                                                                                               \u2502 \u2502\n\u2502   \u2502 \u2502             \"index\": 5,                                                                                 \u2502 \u2502\n\u2502   \u2502 \u2502             \"name\": \"foreign transactions transaction fee\",                                             \u2502 \u2502\n\u2502   \u2502 \u2502             \"explanation\": \"3% of the amount of each transaction in U.S. dollars.\",                     \u2502 \u2502\n\u2502   \u2502 \u2502             \"value\": 3.0                                                                                \u2502 \u2502\n\u2502   \u2502 \u2502         },                                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502         {                                                                                               \u2502 \u2502\n\u2502   \u2502 \u2502             \"index\": 6,                                                                                 \u2502 \u2502\n\u2502   \u2502 \u2502             \"name\": \"late payment penalty fee\",                                                         \u2502 \u2502\n\u2502   \u2502 \u2502             \"explanation\": \"Up to $40.\",                                                                \u2502 \u2502\n\u2502   \u2502 \u2502             \"value\": null                                                                               \u2502 \u2502\n\u2502   \u2502 \u2502         },                                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502         {                                                                                               \u2502 \u2502\n\u2502   \u2502 \u2502             \"index\": 7,                                                                                 \u2502 \u2502\n\u2502   \u2502 \u2502             \"name\": \"over-the-credit-limit penalty fee\",                                                \u2502 \u2502\n\u2502   \u2502 \u2502             \"explanation\": \"None\",                                                                      \u2502 \u2502\n\u2502   \u2502 \u2502             \"value\": null                                                                               \u2502 \u2502\n\u2502   \u2502 \u2502         },                                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502         {                                                                                               \u2502 \u2502\n\u2502   \u2502 \u2502             \"index\": 8,                                                                                 \u2502 \u2502\n\u2502   \u2502 \u2502             \"name\": \"return payment penalty fee\",                                                       \u2502 \u2502\n\u2502   \u2502 \u2502             \"explanation\": \"Up to $40.\",                                                                \u2502 \u2502\n\u2502   \u2502 \u2502             \"value\": null                                                                               \u2502 \u2502\n\u2502   \u2502 \u2502         },                                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502         {                                                                                               \u2502 \u2502\n\u2502   \u2502 \u2502             \"index\": 9,                                                                                 \u2502 \u2502\n\u2502   \u2502 \u2502             \"name\": \"return check penalty fee\",                                                         \u2502 \u2502\n\u2502   \u2502 \u2502             \"explanation\": \"None\",                                                                      \u2502 \u2502\n\u2502   \u2502 \u2502             \"value\": null                                                                               \u2502 \u2502\n\u2502   \u2502 \u2502         }                                                                                               \u2502 \u2502\n\u2502   \u2502 \u2502     ],                                                                                                  \u2502 \u2502\n\u2502   \u2502 \u2502     \"interest_rates\": {                                                                                 \u2502 \u2502\n\u2502   \u2502 \u2502         \"purchase annual percentage rate (apr)\": {                                                      \u2502 \u2502\n\u2502   \u2502 \u2502             \"introductory rate\": 0.0,                                                                   \u2502 \u2502\n\u2502   \u2502 \u2502             \"introductory period\": \"first 18 months\",                                                   \u2502 \u2502\n\u2502   \u2502 \u2502             \"standard rate\": 19.49,                                                                     \u2502 \u2502\n\u2502   \u2502 \u2502             \"variable\": true,                                                                           \u2502 \u2502\n\u2502   \u2502 \u2502             \"description\": \"The interest rate charged on purchases made with the credit card.\"          \u2502 \u2502\n\u2502   \u2502 \u2502         },                                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502         \"my chase loan sm apr\": {                                                                       \u2502 \u2502\n\u2502   \u2502 \u2502             \"rate\": 19.49,                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502             \"variable\": true,                                                                           \u2502 \u2502\n\u2502   \u2502 \u2502             \"description\": \"The interest rate charged on My Chase Loan balances.\"                       \u2502 \u2502\n\u2502   \u2502 \u2502         },                                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502         \"balance transfer apr\": {                                                                       \u2502 \u2502\n\u2502   \u2502 \u2502             \"introductory rate\": 0.0,                                                                   \u2502 \u2502\n\u2502   \u2502 \u2502             \"introductory period\": \"first 18 months\",                                                   \u2502 \u2502\n\u2502   \u2502 \u2502             \"standard rate\": 19.49,                                                                     \u2502 \u2502\n\u2502   \u2502 \u2502             \"variable\": true,                                                                           \u2502 \u2502\n\u2502   \u2502 \u2502             \"description\": \"The interest rate charged on balances transferred to the credit card.\"      \u2502 \u2502\n\u2502   \u2502 \u2502         },                                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502         \"cash advance apr\": {                                                                           \u2502 \u2502\n\u2502   \u2502 \u2502             \"rate\": 29.49,                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502             \"variable\": true,                                                                           \u2502 \u2502\n\u2502   \u2502 \u2502             \"description\": \"The interest rate charged on cash advances taken with the credit card.\"     \u2502 \u2502\n\u2502   \u2502 \u2502         },                                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502         \"penalty apr and when it applies\": {                                                            \u2502 \u2502\n\u2502   \u2502 \u2502             \"rate\": \"Up to 29.99%\",                                                                     \u2502 \u2502\n\u2502   \u2502 \u2502             \"variable\": true,                                                                           \u2502 \u2502\n\u2502   \u2502 \u2502             \"description\": \"The interest rate charged on the credit card when a penalty is applied.\"    \u2502 \u2502\n\u2502   \u2502 \u2502         },                                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502         \"maximum apr\": {                                                                                \u2502 \u2502\n\u2502   \u2502 \u2502             \"rate\": 29.99,                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502             \"variable\": true,                                                                           \u2502 \u2502\n\u2502   \u2502 \u2502             \"description\": \"The highest interest rate that can be charged on the credit card.\"          \u2502 \u2502\n\u2502   \u2502 \u2502         }                                                                                               \u2502 \u2502\n\u2502   \u2502 \u2502     }                                                                                                   \u2502 \u2502\n\u2502   \u2502 \u2502 }                                                                                                       \u2502 \u2502\n\u2502   \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502   \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Validated Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502   \u2502 \u2502 {                                                                                                       \u2502 \u2502\n\u2502   \u2502 \u2502     'fees': [                                                                                           \u2502 \u2502\n\u2502   \u2502 \u2502         {                                                                                               \u2502 \u2502\n\u2502   \u2502 \u2502             'index': 1,                                                                                 \u2502 \u2502\n\u2502   \u2502 \u2502             'name': ReAsk(                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502                 incorrect_value='annual membership fee',                                                \u2502 \u2502\n\u2502   \u2502 \u2502                 error_message='must be exactly two words',                                              \u2502 \u2502\n\u2502   \u2502 \u2502                 fix_value='annual membership',                                                          \u2502 \u2502\n\u2502   \u2502 \u2502                 path=['fees', 0, 'name']                                                                \u2502 \u2502\n\u2502   \u2502 \u2502             ),                                                                                          \u2502 \u2502\n\u2502   \u2502 \u2502             'explanation': 'None',                                                                      \u2502 \u2502\n\u2502   \u2502 \u2502             'value': 0.0                                                                                \u2502 \u2502\n\u2502   \u2502 \u2502         },                                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502         {                                                                                               \u2502 \u2502\n\u2502   \u2502 \u2502             'index': 2,                                                                                 \u2502 \u2502\n\u2502   \u2502 \u2502             'name': ReAsk(                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502                 incorrect_value='my chase plan sm fee',                                                 \u2502 \u2502\n\u2502   \u2502 \u2502                 error_message='must be exactly two words',                                              \u2502 \u2502\n\u2502   \u2502 \u2502                 fix_value='my chase',                                                                   \u2502 \u2502\n\u2502   \u2502 \u2502                 path=['fees', 1, 'name']                                                                \u2502 \u2502\n\u2502   \u2502 \u2502             ),                                                                                          \u2502 \u2502\n\u2502   \u2502 \u2502             'explanation': 'monthly fee of 0% of the amount of each eligible purchase transaction or    \u2502 \u2502\n\u2502   \u2502 \u2502 amount selected to create a my chase plan while in the 0% intro purchase apr period. after that,        \u2502 \u2502\n\u2502   \u2502 \u2502 monthly fee of 1.72% of the amount of each eligible purchase transaction or amount selected to create a \u2502 \u2502\n\u2502   \u2502 \u2502 my chase plan. the my chase plan fee will be determined at the time each my chase plan is created and   \u2502 \u2502\n\u2502   \u2502 \u2502 will remain the same until the my chase plan is paid in full.',                                         \u2502 \u2502\n\u2502   \u2502 \u2502             'value': 1.72                                                                               \u2502 \u2502\n\u2502   \u2502 \u2502         },                                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502         {                                                                                               \u2502 \u2502\n\u2502   \u2502 \u2502             'index': 3,                                                                                 \u2502 \u2502\n\u2502   \u2502 \u2502             'name': ReAsk(                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502                 incorrect_value='balance transfers transaction fee',                                    \u2502 \u2502\n\u2502   \u2502 \u2502                 error_message='must be exactly two words',                                              \u2502 \u2502\n\u2502   \u2502 \u2502                 fix_value='balance transfers',                                                          \u2502 \u2502\n\u2502   \u2502 \u2502                 path=['fees', 2, 'name']                                                                \u2502 \u2502\n\u2502   \u2502 \u2502             ),                                                                                          \u2502 \u2502\n\u2502   \u2502 \u2502             'explanation': 'intro fee of either $5 or 3% of the amount of each transfer, whichever is   \u2502 \u2502\n\u2502   \u2502 \u2502 greater, on transfers made within 60 days of account opening. after that: either $5 or 5% of the amount \u2502 \u2502\n\u2502   \u2502 \u2502 of each transfer, whichever is greater.',                                                               \u2502 \u2502\n\u2502   \u2502 \u2502             'value': 5.0                                                                                \u2502 \u2502\n\u2502   \u2502 \u2502         },                                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502         {                                                                                               \u2502 \u2502\n\u2502   \u2502 \u2502             'index': 4,                                                                                 \u2502 \u2502\n\u2502   \u2502 \u2502             'name': ReAsk(                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502                 incorrect_value='cash advances transaction fee',                                        \u2502 \u2502\n\u2502   \u2502 \u2502                 error_message='must be exactly two words',                                              \u2502 \u2502\n\u2502   \u2502 \u2502                 fix_value='cash advances',                                                              \u2502 \u2502\n\u2502   \u2502 \u2502                 path=['fees', 3, 'name']                                                                \u2502 \u2502\n\u2502   \u2502 \u2502             ),                                                                                          \u2502 \u2502\n\u2502   \u2502 \u2502             'explanation': 'Either $10 or 5% of the amount of each transaction, whichever is greater.', \u2502 \u2502\n\u2502   \u2502 \u2502             'value': 5.0                                                                                \u2502 \u2502\n\u2502   \u2502 \u2502         },                                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502         {                                                                                               \u2502 \u2502\n\u2502   \u2502 \u2502             'index': 5,                                                                                 \u2502 \u2502\n\u2502   \u2502 \u2502             'name': ReAsk(                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502                 incorrect_value='foreign transactions transaction fee',                                 \u2502 \u2502\n\u2502   \u2502 \u2502                 error_message='must be exactly two words',                                              \u2502 \u2502\n\u2502   \u2502 \u2502                 fix_value='foreign transactions',                                                       \u2502 \u2502\n\u2502   \u2502 \u2502                 path=['fees', 4, 'name']                                                                \u2502 \u2502\n\u2502   \u2502 \u2502             ),                                                                                          \u2502 \u2502\n\u2502   \u2502 \u2502             'explanation': '3% of the amount of each transaction in U.S. dollars.',                     \u2502 \u2502\n\u2502   \u2502 \u2502             'value': 3.0                                                                                \u2502 \u2502\n\u2502   \u2502 \u2502         },                                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502         {                                                                                               \u2502 \u2502\n\u2502   \u2502 \u2502             'index': 6,                                                                                 \u2502 \u2502\n\u2502   \u2502 \u2502             'name': ReAsk(                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502                 incorrect_value='late payment penalty fee',                                             \u2502 \u2502\n\u2502   \u2502 \u2502                 error_message='must be exactly two words',                                              \u2502 \u2502\n\u2502   \u2502 \u2502                 fix_value='late payment',                                                               \u2502 \u2502\n\u2502   \u2502 \u2502                 path=['fees', 5, 'name']                                                                \u2502 \u2502\n\u2502   \u2502 \u2502             ),                                                                                          \u2502 \u2502\n\u2502   \u2502 \u2502             'explanation': 'Up to $40.',                                                                \u2502 \u2502\n\u2502   \u2502 \u2502             'value': None                                                                               \u2502 \u2502\n\u2502   \u2502 \u2502         },                                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502         {                                                                                               \u2502 \u2502\n\u2502   \u2502 \u2502             'index': 7,                                                                                 \u2502 \u2502\n\u2502   \u2502 \u2502             'name': ReAsk(                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502                 incorrect_value='over-the-credit-limit penalty fee',                                    \u2502 \u2502\n\u2502   \u2502 \u2502                 error_message='must be exactly two words',                                              \u2502 \u2502\n\u2502   \u2502 \u2502                 fix_value='over-the-credit-limit penalty',                                              \u2502 \u2502\n\u2502   \u2502 \u2502                 path=['fees', 6, 'name']                                                                \u2502 \u2502\n\u2502   \u2502 \u2502             ),                                                                                          \u2502 \u2502\n\u2502   \u2502 \u2502             'explanation': 'None',                                                                      \u2502 \u2502\n\u2502   \u2502 \u2502             'value': None                                                                               \u2502 \u2502\n\u2502   \u2502 \u2502         },                                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502         {                                                                                               \u2502 \u2502\n\u2502   \u2502 \u2502             'index': 8,                                                                                 \u2502 \u2502\n\u2502   \u2502 \u2502             'name': ReAsk(                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502                 incorrect_value='return payment penalty fee',                                           \u2502 \u2502\n\u2502   \u2502 \u2502                 error_message='must be exactly two words',                                              \u2502 \u2502\n\u2502   \u2502 \u2502                 fix_value='return payment',                                                             \u2502 \u2502\n\u2502   \u2502 \u2502                 path=['fees', 7, 'name']                                                                \u2502 \u2502\n\u2502   \u2502 \u2502             ),                                                                                          \u2502 \u2502\n\u2502   \u2502 \u2502             'explanation': 'Up to $40.',                                                                \u2502 \u2502\n\u2502   \u2502 \u2502             'value': None                                                                               \u2502 \u2502\n\u2502   \u2502 \u2502         },                                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502         {                                                                                               \u2502 \u2502\n\u2502   \u2502 \u2502             'index': 9,                                                                                 \u2502 \u2502\n\u2502   \u2502 \u2502             'name': ReAsk(                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502                 incorrect_value='return check penalty fee',                                             \u2502 \u2502\n\u2502   \u2502 \u2502                 error_message='must be exactly two words',                                              \u2502 \u2502\n\u2502   \u2502 \u2502                 fix_value='return check',                                                               \u2502 \u2502\n\u2502   \u2502 \u2502                 path=['fees', 8, 'name']                                                                \u2502 \u2502\n\u2502   \u2502 \u2502             ),                                                                                          \u2502 \u2502\n\u2502   \u2502 \u2502             'explanation': 'None',                                                                      \u2502 \u2502\n\u2502   \u2502 \u2502             'value': None                                                                               \u2502 \u2502\n\u2502   \u2502 \u2502         }                                                                                               \u2502 \u2502\n\u2502   \u2502 \u2502     ],                                                                                                  \u2502 \u2502\n\u2502   \u2502 \u2502     'interest_rates': {                                                                                 \u2502 \u2502\n\u2502   \u2502 \u2502         'purchase annual percentage rate (apr)': {                                                      \u2502 \u2502\n\u2502   \u2502 \u2502             'introductory rate': 0.0,                                                                   \u2502 \u2502\n\u2502   \u2502 \u2502             'introductory period': 'first 18 months',                                                   \u2502 \u2502\n\u2502   \u2502 \u2502             'standard rate': 19.49,                                                                     \u2502 \u2502\n\u2502   \u2502 \u2502             'variable': True,                                                                           \u2502 \u2502\n\u2502   \u2502 \u2502             'description': 'The interest rate charged on purchases made with the credit card.'          \u2502 \u2502\n\u2502   \u2502 \u2502         },                                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502         'my chase loan sm apr': {                                                                       \u2502 \u2502\n\u2502   \u2502 \u2502             'rate': 19.49,                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502             'variable': True,                                                                           \u2502 \u2502\n\u2502   \u2502 \u2502             'description': 'The interest rate charged on My Chase Loan balances.'                       \u2502 \u2502\n\u2502   \u2502 \u2502         },                                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502         'balance transfer apr': {                                                                       \u2502 \u2502\n\u2502   \u2502 \u2502             'introductory rate': 0.0,                                                                   \u2502 \u2502\n\u2502   \u2502 \u2502             'introductory period': 'first 18 months',                                                   \u2502 \u2502\n\u2502   \u2502 \u2502             'standard rate': 19.49,                                                                     \u2502 \u2502\n\u2502   \u2502 \u2502             'variable': True,                                                                           \u2502 \u2502\n\u2502   \u2502 \u2502             'description': 'The interest rate charged on balances transferred to the credit card.'      \u2502 \u2502\n\u2502   \u2502 \u2502         },                                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502         'cash advance apr': {                                                                           \u2502 \u2502\n\u2502   \u2502 \u2502             'rate': 29.49,                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502             'variable': True,                                                                           \u2502 \u2502\n\u2502   \u2502 \u2502             'description': 'The interest rate charged on cash advances taken with the credit card.'     \u2502 \u2502\n\u2502   \u2502 \u2502         },                                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502         'penalty apr and when it applies': {                                                            \u2502 \u2502\n\u2502   \u2502 \u2502             'rate': 'Up to 29.99%',                                                                     \u2502 \u2502\n\u2502   \u2502 \u2502             'variable': True,                                                                           \u2502 \u2502\n\u2502   \u2502 \u2502             'description': 'The interest rate charged on the credit card when a penalty is applied.'    \u2502 \u2502\n\u2502   \u2502 \u2502         },                                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502         'maximum apr': {                                                                                \u2502 \u2502\n\u2502   \u2502 \u2502             'rate': 29.99,                                                                              \u2502 \u2502\n\u2502   \u2502 \u2502             'variable': True,                                                                           \u2502 \u2502\n\u2502   \u2502 \u2502             'description': 'The highest interest rate that can be charged on the credit card.'          \u2502 \u2502\n\u2502   \u2502 \u2502         }                                                                                               \u2502 \u2502\n\u2502   \u2502 \u2502     }                                                                                                   \u2502 \u2502\n\u2502   \u2502 \u2502 }                                                                                                       \u2502 \u2502\n\u2502   \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502   \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u2514\u2500\u2500 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Step 1 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n    \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Prompt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 I was given the following JSON response, which had problems due to incorrect values.                    \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 {                                                                                                       \u2502 \u2502\n    \u2502 \u2502   \"fees\": [                                                                                             \u2502 \u2502\n    \u2502 \u2502     {                                                                                                   \u2502 \u2502\n    \u2502 \u2502       \"name\": {                                                                                         \u2502 \u2502\n    \u2502 \u2502         \"incorrect_value\": \"annual membership fee\",                                                     \u2502 \u2502\n    \u2502 \u2502         \"error_message\": \"must be exactly two words\"                                                    \u2502 \u2502\n    \u2502 \u2502       }                                                                                                 \u2502 \u2502\n    \u2502 \u2502     },                                                                                                  \u2502 \u2502\n    \u2502 \u2502     {                                                                                                   \u2502 \u2502\n    \u2502 \u2502       \"name\": {                                                                                         \u2502 \u2502\n    \u2502 \u2502         \"incorrect_value\": \"my chase plan sm fee\",                                                      \u2502 \u2502\n    \u2502 \u2502         \"error_message\": \"must be exactly two words\"                                                    \u2502 \u2502\n    \u2502 \u2502       }                                                                                                 \u2502 \u2502\n    \u2502 \u2502     },                                                                                                  \u2502 \u2502\n    \u2502 \u2502     {                                                                                                   \u2502 \u2502\n    \u2502 \u2502       \"name\": {                                                                                         \u2502 \u2502\n    \u2502 \u2502         \"incorrect_value\": \"balance transfers transaction fee\",                                         \u2502 \u2502\n    \u2502 \u2502         \"error_message\": \"must be exactly two words\"                                                    \u2502 \u2502\n    \u2502 \u2502       }                                                                                                 \u2502 \u2502\n    \u2502 \u2502     },                                                                                                  \u2502 \u2502\n    \u2502 \u2502     {                                                                                                   \u2502 \u2502\n    \u2502 \u2502       \"name\": {                                                                                         \u2502 \u2502\n    \u2502 \u2502         \"incorrect_value\": \"cash advances transaction fee\",                                             \u2502 \u2502\n    \u2502 \u2502         \"error_message\": \"must be exactly two words\"                                                    \u2502 \u2502\n    \u2502 \u2502       }                                                                                                 \u2502 \u2502\n    \u2502 \u2502     },                                                                                                  \u2502 \u2502\n    \u2502 \u2502     {                                                                                                   \u2502 \u2502\n    \u2502 \u2502       \"name\": {                                                                                         \u2502 \u2502\n    \u2502 \u2502         \"incorrect_value\": \"foreign transactions transaction fee\",                                      \u2502 \u2502\n    \u2502 \u2502         \"error_message\": \"must be exactly two words\"                                                    \u2502 \u2502\n    \u2502 \u2502       }                                                                                                 \u2502 \u2502\n    \u2502 \u2502     },                                                                                                  \u2502 \u2502\n    \u2502 \u2502     {                                                                                                   \u2502 \u2502\n    \u2502 \u2502       \"name\": {                                                                                         \u2502 \u2502\n    \u2502 \u2502         \"incorrect_value\": \"late payment penalty fee\",                                                  \u2502 \u2502\n    \u2502 \u2502         \"error_message\": \"must be exactly two words\"                                                    \u2502 \u2502\n    \u2502 \u2502       }                                                                                                 \u2502 \u2502\n    \u2502 \u2502     },                                                                                                  \u2502 \u2502\n    \u2502 \u2502     {                                                                                                   \u2502 \u2502\n    \u2502 \u2502       \"name\": {                                                                                         \u2502 \u2502\n    \u2502 \u2502         \"incorrect_value\": \"over-the-credit-limit penalty fee\",                                         \u2502 \u2502\n    \u2502 \u2502         \"error_message\": \"must be exactly two words\"                                                    \u2502 \u2502\n    \u2502 \u2502       }                                                                                                 \u2502 \u2502\n    \u2502 \u2502     },                                                                                                  \u2502 \u2502\n    \u2502 \u2502     {                                                                                                   \u2502 \u2502\n    \u2502 \u2502       \"name\": {                                                                                         \u2502 \u2502\n    \u2502 \u2502         \"incorrect_value\": \"return payment penalty fee\",                                                \u2502 \u2502\n    \u2502 \u2502         \"error_message\": \"must be exactly two words\"                                                    \u2502 \u2502\n    \u2502 \u2502       }                                                                                                 \u2502 \u2502\n    \u2502 \u2502     },                                                                                                  \u2502 \u2502\n    \u2502 \u2502     {                                                                                                   \u2502 \u2502\n    \u2502 \u2502       \"name\": {                                                                                         \u2502 \u2502\n    \u2502 \u2502         \"incorrect_value\": \"return check penalty fee\",                                                  \u2502 \u2502\n    \u2502 \u2502         \"error_message\": \"must be exactly two words\"                                                    \u2502 \u2502\n    \u2502 \u2502       }                                                                                                 \u2502 \u2502\n    \u2502 \u2502     }                                                                                                   \u2502 \u2502\n    \u2502 \u2502   ]                                                                                                     \u2502 \u2502\n    \u2502 \u2502 }                                                                                                       \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 Help me correct the incorrect values based on the given error messages.                                 \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 Given below is XML that describes the information to extract from this document and the tags to extract \u2502 \u2502\n    \u2502 \u2502 it into.                                                                                                \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 &lt;output&gt;                                                                                                \u2502 \u2502\n    \u2502 \u2502     &lt;list name=\"fees\" description=\"What fees and charges are associated with my account?\"&gt;              \u2502 \u2502\n    \u2502 \u2502         &lt;object&gt;                                                                                        \u2502 \u2502\n    \u2502 \u2502             &lt;string name=\"name\" format=\"lower-case; two-words\"/&gt;                                        \u2502 \u2502\n    \u2502 \u2502         &lt;/object&gt;                                                                                       \u2502 \u2502\n    \u2502 \u2502     &lt;/list&gt;                                                                                             \u2502 \u2502\n    \u2502 \u2502 &lt;/output&gt;                                                                                               \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 ONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the \u2502 \u2502\n    \u2502 \u2502 `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding  \u2502 \u2502\n    \u2502 \u2502 XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g.        \u2502 \u2502\n    \u2502 \u2502 requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere,     \u2502 \u2502\n    \u2502 \u2502 enter `None`.                                                                                           \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 Here are examples of simple (XML, JSON) pairs that show the expected behavior:                          \u2502 \u2502\n    \u2502 \u2502 - `&lt;string name='foo' format='two-words lower-case' /&gt;` =&gt; `{{'foo': 'example one'}}`                   \u2502 \u2502\n    \u2502 \u2502 - `&lt;list name='bar'&gt;&lt;string format='upper-case' /&gt;&lt;/list&gt;` =&gt; `{{\"bar\": ['STRING ONE', 'STRING TWO',    \u2502 \u2502\n    \u2502 \u2502 etc.]}}`                                                                                                \u2502 \u2502\n    \u2502 \u2502 - `&lt;object name='baz'&gt;&lt;string name=\"foo\" format=\"capitalize two-words\" /&gt;&lt;integer name=\"index\"          \u2502 \u2502\n    \u2502 \u2502 format=\"1-indexed\" /&gt;&lt;/object&gt;` =&gt; `{{'baz': {{'foo': 'Some String', 'index': 1}}}}`                    \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n    \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Instructions \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 You are a helpful assistant only capable of communicating with valid JSON, and no other text.           \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 ONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the \u2502 \u2502\n    \u2502 \u2502 `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding  \u2502 \u2502\n    \u2502 \u2502 XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g.        \u2502 \u2502\n    \u2502 \u2502 requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere,     \u2502 \u2502\n    \u2502 \u2502 enter `None`.                                                                                           \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 Here are examples of simple (XML, JSON) pairs that show the expected behavior:                          \u2502 \u2502\n    \u2502 \u2502 - `&lt;string name='foo' format='two-words lower-case' /&gt;` =&gt; `{'foo': 'example one'}`                     \u2502 \u2502\n    \u2502 \u2502 - `&lt;list name='bar'&gt;&lt;string format='upper-case' /&gt;&lt;/list&gt;` =&gt; `{\"bar\": ['STRING ONE', 'STRING TWO',     \u2502 \u2502\n    \u2502 \u2502 etc.]}`                                                                                                 \u2502 \u2502\n    \u2502 \u2502 - `&lt;object name='baz'&gt;&lt;string name=\"foo\" format=\"capitalize two-words\" /&gt;&lt;integer name=\"index\"          \u2502 \u2502\n    \u2502 \u2502 format=\"1-indexed\" /&gt;&lt;/object&gt;` =&gt; `{'baz': {'foo': 'Some String', 'index': 1}}`                        \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n    \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Raw LLM Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n    \u2502 \u2502 {                                                                                                       \u2502 \u2502\n    \u2502 \u2502   \"fees\": [                                                                                             \u2502 \u2502\n    \u2502 \u2502     {                                                                                                   \u2502 \u2502\n    \u2502 \u2502       \"name\": \"Annual Membership\"                                                                       \u2502 \u2502\n    \u2502 \u2502     },                                                                                                  \u2502 \u2502\n    \u2502 \u2502     {                                                                                                   \u2502 \u2502\n    \u2502 \u2502       \"name\": \"My Chase Plan Sm\"                                                                        \u2502 \u2502\n    \u2502 \u2502     },                                                                                                  \u2502 \u2502\n    \u2502 \u2502     {                                                                                                   \u2502 \u2502\n    \u2502 \u2502       \"name\": \"Balance Transfers\"                                                                       \u2502 \u2502\n    \u2502 \u2502     },                                                                                                  \u2502 \u2502\n    \u2502 \u2502     {                                                                                                   \u2502 \u2502\n    \u2502 \u2502       \"name\": \"Cash Advances\"                                                                           \u2502 \u2502\n    \u2502 \u2502     },                                                                                                  \u2502 \u2502\n    \u2502 \u2502     {                                                                                                   \u2502 \u2502\n    \u2502 \u2502       \"name\": \"Foreign Transactions\"                                                                    \u2502 \u2502\n    \u2502 \u2502     },                                                                                                  \u2502 \u2502\n    \u2502 \u2502     {                                                                                                   \u2502 \u2502\n    \u2502 \u2502       \"name\": \"Late Payment Penalty\"                                                                    \u2502 \u2502\n    \u2502 \u2502     },                                                                                                  \u2502 \u2502\n    \u2502 \u2502     {                                                                                                   \u2502 \u2502\n    \u2502 \u2502       \"name\": \"Over-The-Credit-Limit Penalty\"                                                           \u2502 \u2502\n    \u2502 \u2502     },                                                                                                  \u2502 \u2502\n    \u2502 \u2502     {                                                                                                   \u2502 \u2502\n    \u2502 \u2502       \"name\": \"Return Payment Penalty\"                                                                  \u2502 \u2502\n    \u2502 \u2502     },                                                                                                  \u2502 \u2502\n    \u2502 \u2502     {                                                                                                   \u2502 \u2502\n    \u2502 \u2502       \"name\": \"Return Check Penalty\"                                                                    \u2502 \u2502\n    \u2502 \u2502     }                                                                                                   \u2502 \u2502\n    \u2502 \u2502   ]                                                                                                     \u2502 \u2502\n    \u2502 \u2502 }                                                                                                       \u2502 \u2502\n    \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n    \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Validated Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n    \u2502 \u2502 {                                                                                                       \u2502 \u2502\n    \u2502 \u2502     'fees': [                                                                                           \u2502 \u2502\n    \u2502 \u2502         {                                                                                               \u2502 \u2502\n    \u2502 \u2502             'index': 1,                                                                                 \u2502 \u2502\n    \u2502 \u2502             'name': 'annual membership',                                                                \u2502 \u2502\n    \u2502 \u2502             'explanation': 'None',                                                                      \u2502 \u2502\n    \u2502 \u2502             'value': 0.0                                                                                \u2502 \u2502\n    \u2502 \u2502         },                                                                                              \u2502 \u2502\n    \u2502 \u2502         {                                                                                               \u2502 \u2502\n    \u2502 \u2502             'index': 2,                                                                                 \u2502 \u2502\n    \u2502 \u2502             'name': 'My Chase',                                                                         \u2502 \u2502\n    \u2502 \u2502             'explanation': 'monthly fee of 0% of the amount of each eligible purchase transaction or    \u2502 \u2502\n    \u2502 \u2502 amount selected to create a my chase plan while in the 0% intro purchase apr period. after that,        \u2502 \u2502\n    \u2502 \u2502 monthly fee of 1.72% of the amount of each eligible purchase transaction or amount selected to create a \u2502 \u2502\n    \u2502 \u2502 my chase plan. the my chase plan fee will be determined at the time each my chase plan is created and   \u2502 \u2502\n    \u2502 \u2502 will remain the same until the my chase plan is paid in full.',                                         \u2502 \u2502\n    \u2502 \u2502             'value': 1.72                                                                               \u2502 \u2502\n    \u2502 \u2502         },                                                                                              \u2502 \u2502\n    \u2502 \u2502         {                                                                                               \u2502 \u2502\n    \u2502 \u2502             'index': 3,                                                                                 \u2502 \u2502\n    \u2502 \u2502             'name': 'balance transfers',                                                                \u2502 \u2502\n    \u2502 \u2502             'explanation': 'intro fee of either $5 or 3% of the amount of each transfer, whichever is   \u2502 \u2502\n    \u2502 \u2502 greater, on transfers made within 60 days of account opening. after that: either $5 or 5% of the amount \u2502 \u2502\n    \u2502 \u2502 of each transfer, whichever is greater.',                                                               \u2502 \u2502\n    \u2502 \u2502             'value': 5.0                                                                                \u2502 \u2502\n    \u2502 \u2502         },                                                                                              \u2502 \u2502\n    \u2502 \u2502         {                                                                                               \u2502 \u2502\n    \u2502 \u2502             'index': 4,                                                                                 \u2502 \u2502\n    \u2502 \u2502             'name': 'cash advances',                                                                    \u2502 \u2502\n    \u2502 \u2502             'explanation': 'Either $10 or 5% of the amount of each transaction, whichever is greater.', \u2502 \u2502\n    \u2502 \u2502             'value': 5.0                                                                                \u2502 \u2502\n    \u2502 \u2502         },                                                                                              \u2502 \u2502\n    \u2502 \u2502         {                                                                                               \u2502 \u2502\n    \u2502 \u2502             'index': 5,                                                                                 \u2502 \u2502\n    \u2502 \u2502             'name': 'foreign transactions',                                                             \u2502 \u2502\n    \u2502 \u2502             'explanation': '3% of the amount of each transaction in U.S. dollars.',                     \u2502 \u2502\n    \u2502 \u2502             'value': 3.0                                                                                \u2502 \u2502\n    \u2502 \u2502         },                                                                                              \u2502 \u2502\n    \u2502 \u2502         {                                                                                               \u2502 \u2502\n    \u2502 \u2502             'index': 6,                                                                                 \u2502 \u2502\n    \u2502 \u2502             'name': 'Late Payment',                                                                     \u2502 \u2502\n    \u2502 \u2502             'explanation': 'Up to $40.',                                                                \u2502 \u2502\n    \u2502 \u2502             'value': None                                                                               \u2502 \u2502\n    \u2502 \u2502         },                                                                                              \u2502 \u2502\n    \u2502 \u2502         {                                                                                               \u2502 \u2502\n    \u2502 \u2502             'index': 7,                                                                                 \u2502 \u2502\n    \u2502 \u2502             'name': 'over-the-credit-limit penalty',                                                    \u2502 \u2502\n    \u2502 \u2502             'explanation': 'None',                                                                      \u2502 \u2502\n    \u2502 \u2502             'value': None                                                                               \u2502 \u2502\n    \u2502 \u2502         },                                                                                              \u2502 \u2502\n    \u2502 \u2502         {                                                                                               \u2502 \u2502\n    \u2502 \u2502             'index': 8,                                                                                 \u2502 \u2502\n    \u2502 \u2502             'name': 'Return Payment',                                                                   \u2502 \u2502\n    \u2502 \u2502             'explanation': 'Up to $40.',                                                                \u2502 \u2502\n    \u2502 \u2502             'value': None                                                                               \u2502 \u2502\n    \u2502 \u2502         },                                                                                              \u2502 \u2502\n    \u2502 \u2502         {                                                                                               \u2502 \u2502\n    \u2502 \u2502             'index': 9,                                                                                 \u2502 \u2502\n    \u2502 \u2502             'name': 'Return Check',                                                                     \u2502 \u2502\n    \u2502 \u2502             'explanation': 'None',                                                                      \u2502 \u2502\n    \u2502 \u2502             'value': None                                                                               \u2502 \u2502\n    \u2502 \u2502         }                                                                                               \u2502 \u2502\n    \u2502 \u2502     ],                                                                                                  \u2502 \u2502\n    \u2502 \u2502     'interest_rates': {                                                                                 \u2502 \u2502\n    \u2502 \u2502         'purchase annual percentage rate (apr)': {                                                      \u2502 \u2502\n    \u2502 \u2502             'introductory rate': 0.0,                                                                   \u2502 \u2502\n    \u2502 \u2502             'introductory period': 'first 18 months',                                                   \u2502 \u2502\n    \u2502 \u2502             'standard rate': 19.49,                                                                     \u2502 \u2502\n    \u2502 \u2502             'variable': True,                                                                           \u2502 \u2502\n    \u2502 \u2502             'description': 'The interest rate charged on purchases made with the credit card.'          \u2502 \u2502\n    \u2502 \u2502         },                                                                                              \u2502 \u2502\n    \u2502 \u2502         'my chase loan sm apr': {                                                                       \u2502 \u2502\n    \u2502 \u2502             'rate': 19.49,                                                                              \u2502 \u2502\n    \u2502 \u2502             'variable': True,                                                                           \u2502 \u2502\n    \u2502 \u2502             'description': 'The interest rate charged on My Chase Loan balances.'                       \u2502 \u2502\n    \u2502 \u2502         },                                                                                              \u2502 \u2502\n    \u2502 \u2502         'balance transfer apr': {                                                                       \u2502 \u2502\n    \u2502 \u2502             'introductory rate': 0.0,                                                                   \u2502 \u2502\n    \u2502 \u2502             'introductory period': 'first 18 months',                                                   \u2502 \u2502\n    \u2502 \u2502             'standard rate': 19.49,                                                                     \u2502 \u2502\n    \u2502 \u2502             'variable': True,                                                                           \u2502 \u2502\n    \u2502 \u2502             'description': 'The interest rate charged on balances transferred to the credit card.'      \u2502 \u2502\n    \u2502 \u2502         },                                                                                              \u2502 \u2502\n    \u2502 \u2502         'cash advance apr': {                                                                           \u2502 \u2502\n    \u2502 \u2502             'rate': 29.49,                                                                              \u2502 \u2502\n    \u2502 \u2502             'variable': True,                                                                           \u2502 \u2502\n    \u2502 \u2502             'description': 'The interest rate charged on cash advances taken with the credit card.'     \u2502 \u2502\n    \u2502 \u2502         },                                                                                              \u2502 \u2502\n    \u2502 \u2502         'penalty apr and when it applies': {                                                            \u2502 \u2502\n    \u2502 \u2502             'rate': 'Up to 29.99%',                                                                     \u2502 \u2502\n    \u2502 \u2502             'variable': True,                                                                           \u2502 \u2502\n    \u2502 \u2502             'description': 'The interest rate charged on the credit card when a penalty is applied.'    \u2502 \u2502\n    \u2502 \u2502         },                                                                                              \u2502 \u2502\n    \u2502 \u2502         'maximum apr': {                                                                                \u2502 \u2502\n    \u2502 \u2502             'rate': 29.99,                                                                              \u2502 \u2502\n    \u2502 \u2502             'variable': True,                                                                           \u2502 \u2502\n    \u2502 \u2502             'description': 'The highest interest rate that can be charged on the credit card.'          \u2502 \u2502\n    \u2502 \u2502         }                                                                                               \u2502 \u2502\n    \u2502 \u2502     }                                                                                                   \u2502 \u2502\n    \u2502 \u2502 }                                                                                                       \u2502 \u2502\n    \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n    \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</pre>"},{"location":"examples/guardrails_with_chat_models/#using-guardrails-with-chat-models","title":"Using Guardrails with Chat Models","text":"<p>Note</p> <p>To download this example as a Jupyter notebook, click here.</p> <p>In this example, we will set up Guardrails with a chat model.</p>"},{"location":"examples/guardrails_with_chat_models/#objective","title":"Objective","text":"<p>We retry the entity extraction example using a chat model.</p>"},{"location":"examples/guardrails_with_chat_models/#step-0-download-pdf-and-load-it-as-string","title":"Step 0: Download PDF and load it as string","text":"<p>To get started, download the document from here and save it in <code>data/chase_card_agreement.pdf</code>.</p> <p>Guardrails has some built-in functions to help with common tasks. Here, we will use the <code>read_pdf</code> function to load the PDF as a string.</p>"},{"location":"examples/guardrails_with_chat_models/#step-1-create-the-rail-spec-with-instructions-tags","title":"Step 1: Create the RAIL Spec with <code>&lt;instructions&gt;</code> tags","text":"<p>In order to use Guardrails with a chat model, we need to add <code>&lt;instructions&gt;</code> tags to the RAIL spec. These tags will be used to generate the system message for the chat model.</p> <p>Ordinarily, everything that is contained in the <code>&lt;prompt&gt;</code> tag will be split across <code>&lt;prompt&gt;</code> and <code>&lt;instructions&gt;</code> tags. Here's an example illustrating the differences.</p> RAIL Spec with instruction tagRAIL Spec without instruction tag <pre><code>&lt;instructions&gt;\nYou are a helpful assistant only capable of communicating with valid JSON, and no other text.\n\n@json_suffix_prompt_examples\n&lt;/instructions&gt;\n&lt;prompt&gt;\nGiven the following document, answer the following questions. If the answer doesn't exist in the document, enter `null`.\n\n{{document}}\n\nExtract information from this document and return a JSON that follows the correct schema.\n\n@xml_prefix_prompt\n\n{output_schema}\n&lt;/prompt&gt;\n</code></pre> <pre><code>&lt;prompt&gt;\nGiven the following document, answer the following questions. If the answer doesn't exist in the document, enter `null`.\n\n{{document}}\n\n@xml_prefix_prompt\n\n{output_schema}\n\n@json_suffix_prompt_v2_wo_none\n&lt;/prompt&gt;\n</code></pre> <p>After materialization, the two specs will look like this:</p> RAIL Spec with instruction tagRAIL Spec without instruction tag <pre><code>&lt;instructions&gt;\nYou are a helpful assistant only capable of communicating with valid JSON, and no other text.\n\nONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere, enter `None`.\n\nHere are examples of simple (XML, JSON) pairs that show the expected behavior:\n- `&lt;string name='foo' format='two-words lower-case' /&gt;` =&gt; `{'foo': 'example one'}`\n- `&lt;list name='bar'&gt;&lt;string format='upper-case' /&gt;&lt;/list&gt;` =&gt; `{\"bar\": ['STRING ONE', 'STRING TWO', etc.]}`\n- `&lt;object name='baz'&gt;&lt;string name=\"foo\" format=\"capitalize two-words\" /&gt;&lt;integer name=\"index\" format=\"1-indexed\" /&gt;&lt;/object&gt;` =&gt; `{'baz': {'foo': 'Some String', 'index': 1}}`\n&lt;/instructions&gt;\n&lt;prompt&gt;\nGiven the following document, answer the following questions. If the answer doesn't exist in the document, enter `null`.\n\n{{document}}\n\nExtract information from this document and return a JSON that follows the correct schema.\n\nGiven below is XML that describes the information to extract from this document and the tags to extract it into.\n\n{output_schema}\n&lt;/prompt&gt;\n</code></pre> <pre><code>&lt;prompt&gt;\nGiven the following document, answer the following questions. If the answer doesn't exist in the document, enter `null`.\n\n{{document}}\n\nGiven below is XML that describes the information to extract from this document and the tags to extract it into.\n\n{output_schema}\n\nONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere, enter `None`.\n\nHere are examples of simple (XML, JSON) pairs that show the expected behavior:\n- `&lt;string name='foo' format='two-words lower-case' /&gt;` =&gt; `{'foo': 'example one'}`\n- `&lt;list name='bar'&gt;&lt;string format='upper-case' /&gt;&lt;/list&gt;` =&gt; `{\"bar\": ['STRING ONE', 'STRING TWO', etc.]}`\n- `&lt;object name='baz'&gt;&lt;string name=\"foo\" format=\"capitalize two-words\" /&gt;&lt;integer name=\"index\" format=\"1-indexed\" /&gt;&lt;/object&gt;` =&gt; `{'baz': {'foo': 'Some String', 'index': 1}}`\n&lt;/prompt&gt;\n</code></pre> <p>Here's the final RAIL spec:</p>"},{"location":"examples/guardrails_with_chat_models/#step-2-create-a-guard-object-with-the-rail-spec","title":"Step 2: Create a <code>Guard</code> object with the RAIL Spec","text":"<p>We create a <code>gd.Guard</code> object that will check, validate and correct the output of the LLM. This object:</p> <ol> <li>Enforces the quality criteria specified in the RAIL spec.</li> <li>Takes corrective action when the quality criteria are not met.</li> <li>Compiles the schema and type info from the RAIL spec and adds it to the prompt.</li> </ol>"},{"location":"examples/guardrails_with_chat_models/#step-3-wrap-the-llm-api-call-with-guard","title":"Step 3: Wrap the LLM API call with <code>Guard</code>","text":"<p>Compared to the entity extraction example, we call the OpenAI ChatCompletion API instead of the OpenAI Completion API.</p> <p>We also pass the <code>model</code> argument instead of the <code>engine</code> argument.</p>"},{"location":"examples/no_secrets_in_generated_text/","title":"No secrets in generated text","text":"<pre><code>rail_str = \"\"\"\n&lt;rail version=\"0.1\"&gt;\n&lt;script language='python'&gt;\nfrom dataclasses import dataclass\nfrom guardrails.validators import Validator, EventDetail, register_validator\nimport re\nfrom typing import Dict, List\nOPENAI_KEY_PATTERN = re.compile(r\"sk-[a-zA-Z0-9]{24}\")\n@register_validator(name=\"no-code-secrets\", data_type=\"string\")\nclass NoCodeSecrets(Validator):\n    def validate(self, key, value, schema) -&gt; Dict:\n        global OPENAI_KEY_PATTERN\n        if re.search(OPENAI_KEY_PATTERN, value) is not None:\n            # Corrected value should replace the OpenAI API key with \"sk-xxx\"\n            correct_value = re.sub(OPENAI_KEY_PATTERN, \"sk-xxx\", value)\n            raise EventDetail(\n                key,\n                value,\n                schema,\n                f\"Value {value} is an OpenAI API key.\",\n                correct_value,\n            )\n        return schema\n&lt;/script&gt;\n&lt;output&gt;\n    &lt;string name=\"api_help\" description=\"Show an example curl command for using openai Completion API\" format=\"no-code-secrets\" on-fail-no-code-secrets=\"fix\" /&gt;\n&lt;/output&gt;\n&lt;prompt&gt;\nHow do I use OpenAI's Completion API?\n@complete_json_suffix\n&lt;/prompt&gt;\n&lt;/rail&gt;\n\"\"\"\n</code></pre> <pre><code>import guardrails as gd\nfrom rich import print\nguard = gd.Guard.from_rail_string(rail_str)\n</code></pre> <p>We see the prompt that will be sent to the LLM.</p> <pre><code>print(guard.base_prompt)\n</code></pre> <pre>\n\nHow do I use OpenAI's Completion API?\n\n\nGiven below is XML that describes the information to extract from this document and the tags to extract it into.\n\n&lt;output&gt;\n    &lt;string name=\"api_help\" description=\"Show an example curl command for using openai Completion API\" format=\"no-code-secrets: \"/&gt;\n&lt;/output&gt;\n\n\nONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the `name` \nattribute of the corresponding XML, and the value is of the type specified by the corresponding XML's tag. The JSON\nMUST conform to the XML format, including any types and format requests e.g. requests for lists, objects and \nspecific types. Be correct and concise. If you are unsure anywhere, enter `None`.\n\nHere are examples of simple (XML, JSON) pairs that show the expected behavior:\n- `&lt;string name='foo' format='two-words lower-case' /&gt;` =&gt; `{{'foo': 'example one'}}`\n- `&lt;list name='bar'&gt;&lt;string format='upper-case' /&gt;&lt;/list&gt;` =&gt; `{{\"bar\": ['STRING ONE', 'STRING TWO', etc.]}}`\n- `&lt;object name='baz'&gt;&lt;string name=\"foo\" format=\"capitalize two-words\" /&gt;&lt;integer name=\"index\" format=\"1-indexed\" /&gt;&lt;/object&gt;` =&gt; `{{'baz': {{'foo': 'Some String', 'index': 1}}}}`\n\nJSON Object:\n\n</pre> <pre><code>import openai\nraw_llm_response, validated_response = guard(\nopenai.Completion.create, engine=\"text-davinci-003\", max_tokens=2048, temperature=0\n)\n</code></pre> <pre>\n<code>/Users/shreyarajpal/anaconda3/envs/tiff-env/lib/python3.9/site-packages/eliot/json.py:22: FutureWarning: In the future `np.bool` will be defined as the corresponding NumPy scalar.  (This may have returned Python scalars in past versions.\n  if isinstance(o, (numpy.bool, numpy.bool_)):\n</code>\n</pre> <p>The <code>guard</code> wrapper returns the raw_llm_respose (which is a simple string), and the validated and corrected output (which is a dictionary).</p> <p>We can see that the output is a dictionary with the correct schema and types.</p> <pre><code>print(validated_response)\n</code></pre> <pre>{\n    'api_help': 'curl -X POST -H \\'Content-Type: application/json\\' -d \\'{\"prompt\": \"The quick brown fox\", \n\"max_tokens\": 10}\\' https://api.openai.com/v1/engines/completion/completions'\n}\n</pre> <pre><code>print(guard.state.most_recent_call.tree)\n</code></pre> <pre>Logs\n\u2514\u2500\u2500 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Step 1 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n    \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Prompt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 How do I use OpenAI's Completion API?                                                                   \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 Given below is XML that describes the information to extract from this document and the tags to extract \u2502 \u2502\n    \u2502 \u2502 it into.                                                                                                \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 &lt;output&gt;                                                                                                \u2502 \u2502\n    \u2502 \u2502     &lt;string name=\"api_help\" description=\"Show an example curl command for using openai Completion API\"  \u2502 \u2502\n    \u2502 \u2502 format=\"no-code-secrets: \"/&gt;                                                                            \u2502 \u2502\n    \u2502 \u2502 &lt;/output&gt;                                                                                               \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 ONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the \u2502 \u2502\n    \u2502 \u2502 `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding  \u2502 \u2502\n    \u2502 \u2502 XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g.        \u2502 \u2502\n    \u2502 \u2502 requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere,     \u2502 \u2502\n    \u2502 \u2502 enter `None`.                                                                                           \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 Here are examples of simple (XML, JSON) pairs that show the expected behavior:                          \u2502 \u2502\n    \u2502 \u2502 - `&lt;string name='foo' format='two-words lower-case' /&gt;` =&gt; `{'foo': 'example one'}`                     \u2502 \u2502\n    \u2502 \u2502 - `&lt;list name='bar'&gt;&lt;string format='upper-case' /&gt;&lt;/list&gt;` =&gt; `{\"bar\": ['STRING ONE', 'STRING TWO',     \u2502 \u2502\n    \u2502 \u2502 etc.]}`                                                                                                 \u2502 \u2502\n    \u2502 \u2502 - `&lt;object name='baz'&gt;&lt;string name=\"foo\" format=\"capitalize two-words\" /&gt;&lt;integer name=\"index\"          \u2502 \u2502\n    \u2502 \u2502 format=\"1-indexed\" /&gt;&lt;/object&gt;` =&gt; `{'baz': {'foo': 'Some String', 'index': 1}}`                        \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 JSON Object:                                                                                            \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n    \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Raw LLM Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n    \u2502 \u2502 {\"api_help\": \"curl -X POST -H 'Content-Type: application/json' -d '{\\\"prompt\\\": \\\"The quick brown       \u2502 \u2502\n    \u2502 \u2502 fox\\\", \\\"max_tokens\\\": 10}' https://api.openai.com/v1/engines/completion/completions\"}                  \u2502 \u2502\n    \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n    \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Validated Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n    \u2502 \u2502 {                                                                                                       \u2502 \u2502\n    \u2502 \u2502     'api_help': 'curl -X POST -H \\'Content-Type: application/json\\' -d \\'{\"prompt\": \"The quick brown    \u2502 \u2502\n    \u2502 \u2502 fox\", \"max_tokens\": 10}\\' https://api.openai.com/v1/engines/completion/completions'                     \u2502 \u2502\n    \u2502 \u2502 }                                                                                                       \u2502 \u2502\n    \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n    \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</pre>"},{"location":"examples/no_secrets_in_generated_text/#generating-strings-that-dont-have-any-secrets","title":"Generating strings that don't have any secrets","text":"<p>Note</p> <p>To download this example as a Jupyter notebook, click here.</p> <p>In this example, we will use Guardrails to generate strings that don't have any secrets.</p> <p>This is also a good example to show how to use the <code>script</code> element of the <code>RAIL</code> specification. In this case, we will use the <code>script</code> element to create a custom Validator that checks if a string has any secrets.</p>"},{"location":"examples/no_secrets_in_generated_text/#objective","title":"Objective","text":"<p>We want to ask help with an API, but make sure that the generated text has no secrets.</p>"},{"location":"examples/no_secrets_in_generated_text/#step-1-create-the-rail-spec","title":"Step 1: Create the RAIL Spec","text":"<p>Ordinarily, we would create an RAIL spec in a separate file. For the purposes of this example, we will create the spec in this notebook as a string following the RAIL syntax. For more information on RAIL, see the RAIL documentation.</p> <p>In this RAIL spec, we:</p> <ol> <li>Create a <code>script</code> element that creates a custom Validator that checks if a string has any secrets. This is a simple example, but you can use this to create more complex Validators. For more information on creating custom Validators, see the Validators documentation.</li> <li>Create a <code>output</code> schema that returns an object with a <code>api_help</code> key.</li> </ol>"},{"location":"examples/no_secrets_in_generated_text/#step-2-create-a-guard-object-with-the-rail-spec","title":"Step 2: Create a <code>Guard</code> object with the RAIL Spec","text":"<p>We create a <code>gd.Guard</code> object that will check, validate and correct the output of the LLM. This object:</p> <ol> <li>Enforces the quality criteria specified in the RAIL spec.</li> <li>Takes corrective action when the quality criteria are not met.</li> <li>Compiles the schema and type info from the RAIL spec and adds it to the prompt.</li> </ol>"},{"location":"examples/no_secrets_in_generated_text/#step-3-wrap-the-llm-api-call-with-guard","title":"Step 3: Wrap the LLM API call with <code>Guard</code>","text":""},{"location":"examples/recipe_generation/","title":"Vegan Mac & Cheese Recipe Generator","text":"<pre><code>import guardrails as gd\nfrom rich import print\n</code></pre> <pre><code>rail_str = \"\"\"\n&lt;rail version=\"0.1\"&gt;\n&lt;script language='python'&gt;\nfrom dataclasses import dataclass\nfrom guardrails.validators import Validator, EventDetail, register_validator\nimport re\nfrom typing import Dict, List\nNON_VEGAN_INGREDIENTS = [\"butter\", \"milk\", \"eggs\", \"cheese\", \"cream\", \"yogurt\"]\nSUBSTITUTIONS = {\n    \"butter\": \"margarine\",\n    \"milk\": \"soy milk\",\n    \"eggs\": \"flax eggs\",\n    \"cheese\": \"vegan cheese\",\n    \"cream\": \"soy cream\",\n    \"yogurt\": \"soy yogurt\",\n}\n@register_validator(name=\"is-vegan\", data_type=\"string\")\nclass IsVegan(Validator):\n    def validate(self, key, value, schema) -&gt; Dict:\n        global NON_VEGAN_INGREDIENTS, SUBSTITUTIONS\n        # Make sure the ingredient is not in the list of non-vegan ingredients.\n        if value.lower() in NON_VEGAN_INGREDIENTS:\n            raise EventDetail(\n                key,\n                value,\n                schema,\n                f\"Value {value} is not vegan.\",\n                # Programmatically fix the value by replacing it with a vegan\n                # substitute.\n                SUBSTITUTIONS[value.lower()],\n            )\n        return schema\n&lt;/script&gt;\n&lt;output&gt;\n    &lt;list name=\"ingredients\" description=\"What are the ingredients for the recipe?\"&gt;\n        &lt;object&gt;\n            &lt;integer name=\"index\" format=\"1-indexed\" /&gt;\n            &lt;string name=\"name\" format=\"is-vegan\" on-fail-is-vegan=\"fix\" /&gt;\n            &lt;string name=\"brand\" description=\"Suggested brand for the ingredient (if any)\" /&gt;\n            &lt;bool name=\"optional\" description=\"Is the ingredient necessary?\" /&gt;\n            &lt;float name=\"quantity\" format=\"units-imperial\" /&gt;\n            &lt;string name=\"units\" format=\"units-imperial\" /&gt;\n        &lt;/object&gt;\n    &lt;/list&gt;\n    &lt;list name=\"instructions\" description=\"What are the instructions for the recipe?\"&gt;\n        &lt;object&gt;\n            &lt;integer name=\"index\" format=\"1-indexed\" /&gt;\n            &lt;string name=\"step\" /&gt;\n        &lt;/object&gt;\n    &lt;/list&gt;\n&lt;/output&gt;\n&lt;prompt&gt;\nGenerate a recipe for vegan mac and cheese.\n@complete_json_suffix\n&lt;/prompt&gt;\n&lt;/rail&gt;\n\"\"\"\n</code></pre> <p>Note</p> <p>Here, we create a custom <code>IsVegan</code> validator that checks if the ingredient is vegan. We also set <code>on-fail-is-vegan</code> to <code>fix</code>, which in this case means that programatically we will replace the ingredient with a vegan substitute.</p> <pre><code>guard = gd.Guard.from_rail_string(rail_str)\n</code></pre> <pre>\n<code>/Users/shreyarajpal/guardrails/guardrails/schema.py:187: UserWarning: Validator 1-indexed is not valid for element integer.\n  warnings.warn(\n/Users/shreyarajpal/guardrails/guardrails/schema.py:187: UserWarning: Validator units-imperial is not valid for element float.\n  warnings.warn(\n/Users/shreyarajpal/guardrails/guardrails/schema.py:187: UserWarning: Validator units-imperial is not valid for element string.\n  warnings.warn(\n</code>\n</pre> <p>As we can see, a few formatters weren't supported. These formatters won't be enforced in the output, but this information can still be used to generate a prompt.</p> <p>We see the prompt that will be sent to the LLM. The <code>{document}</code> is substituted with the user provided value at runtime.</p> <pre><code>print(guard.base_prompt)\n</code></pre> <pre>\nGenerate a recipe for vegan mac and cheese.\n\nGiven below is XML that describes the information to extract from this document and the tags to extract it into.\n\n&lt;output&gt;\n    &lt;list name=\"ingredients\" description=\"What are the ingredients for the recipe?\"&gt;\n        &lt;object&gt;\n            &lt;integer name=\"index\" format=\"1-indexed\"/&gt;\n            &lt;string name=\"name\" format=\"is-vegan\"/&gt;\n            &lt;string name=\"brand\" description=\"Suggested brand for the ingredient (if any)\"/&gt;\n            &lt;bool name=\"optional\" description=\"Is the ingredient necessary?\"/&gt;\n            &lt;float name=\"quantity\" format=\"units-imperial\"/&gt;\n            &lt;string name=\"units\" format=\"units-imperial\"/&gt;\n        &lt;/object&gt;\n    &lt;/list&gt;\n    &lt;list name=\"instructions\" description=\"What are the instructions for the recipe?\"&gt;\n        &lt;object&gt;\n            &lt;integer name=\"index\" format=\"1-indexed\"/&gt;\n            &lt;string name=\"step\"/&gt;\n        &lt;/object&gt;\n    &lt;/list&gt;\n&lt;/output&gt;\n\n\nONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the `name` \nattribute of the corresponding XML, and the value is of the type specified by the corresponding XML's tag. The JSON\nMUST conform to the XML format, including any types and format requests e.g. requests for lists, objects and \nspecific types. Be correct and concise. If you are unsure anywhere, enter `None`.\n\nHere are examples of simple (XML, JSON) pairs that show the expected behavior:\n- `&lt;string name='foo' format='two-words lower-case' /&gt;` =&gt; `{{'foo': 'example one'}}`\n- `&lt;list name='bar'&gt;&lt;string format='upper-case' /&gt;&lt;/list&gt;` =&gt; `{{\"bar\": ['STRING ONE', 'STRING TWO', etc.]}}`\n- `&lt;object name='baz'&gt;&lt;string name=\"foo\" format=\"capitalize two-words\" /&gt;&lt;integer name=\"index\" format=\"1-indexed\" /&gt;&lt;/object&gt;` =&gt; `{{'baz': {{'foo': 'Some String', 'index': 1}}}}`\n\nJSON Object:\n\n</pre> <pre><code>import openai\nraw_llm_response, validated_response = guard(\nopenai.Completion.create, engine=\"text-davinci-003\", max_tokens=2048, temperature=0\n)\n</code></pre> <pre>\n<code>/Users/shreyarajpal/anaconda3/envs/tiff-env/lib/python3.9/site-packages/eliot/json.py:22: FutureWarning: In the future `np.bool` will be defined as the corresponding NumPy scalar.  (This may have returned Python scalars in past versions.\n  if isinstance(o, (numpy.bool, numpy.bool_)):\n</code>\n</pre> <p>The <code>guard</code> wrapper returns the raw_llm_respose (which is a simple string), and the validated and corrected output (which is a dictionary).</p> <p>We can see that the output is a dictionary with the correct schema and types.</p> <pre><code>print(validated_response)\n</code></pre> <pre>{\n    'ingredients': [\n        {'index': 1, 'name': 'macaroni', 'brand': 'Barilla', 'optional': False, 'quantity': 8.0, 'units': 'oz'},\n        {\n            'index': 2,\n            'name': 'vegan butter',\n            'brand': 'Earth Balance',\n            'optional': False,\n            'quantity': 2.0,\n            'units': 'tbsp'\n        },\n        {\n            'index': 3,\n            'name': 'all-purpose flour',\n            'brand': 'Gold Medal',\n            'optional': False,\n            'quantity': 2.0,\n            'units': 'tbsp'\n        },\n        {'index': 4, 'name': 'vegan milk', 'brand': 'Oatly', 'optional': False, 'quantity': 2.0, 'units': 'cups'},\n        {'index': 5, 'name': 'vegan cheese', 'brand': 'Daiya', 'optional': False, 'quantity': 8.0, 'units': 'oz'},\n        {\n            'index': 6,\n            'name': 'nutritional yeast',\n            'brand': \"Bob's Red Mill\",\n            'optional': False,\n            'quantity': 2.0,\n            'units': 'tbsp'\n        },\n        {\n            'index': 7,\n            'name': 'garlic powder',\n            'brand': 'McCormick',\n            'optional': False,\n            'quantity': 1.0,\n            'units': 'tsp'\n        },\n        {\n            'index': 8,\n            'name': 'onion powder',\n            'brand': 'McCormick',\n            'optional': False,\n            'quantity': 1.0,\n            'units': 'tsp'\n        },\n        {'index': 9, 'name': 'salt', 'brand': 'Morton', 'optional': False, 'quantity': 1.0, 'units': 'tsp'},\n        {\n            'index': 10,\n            'name': 'black pepper',\n            'brand': 'McCormick',\n            'optional': False,\n            'quantity': 0.5,\n            'units': 'tsp'\n        }\n    ],\n    'instructions': [\n        {\n            'index': 1,\n            'step': 'Bring a large pot of salted water to a boil. Add the macaroni and cook according to package \ninstructions.'\n        },\n        {'index': 2, 'step': 'Drain the macaroni and set aside.'},\n        {\n            'index': 3,\n            'step': 'In a medium saucepan, melt the vegan butter over medium heat. Add the flour and whisk until \ncombined and bubbly.'\n        },\n        {\n            'index': 4,\n            'step': 'Slowly add the vegan milk, whisking constantly until the mixture is smooth and thickened.'\n        },\n        {\n            'index': 5,\n            'step': 'Add the vegan cheese, nutritional yeast, garlic powder, onion powder, salt, and pepper. Stir \nuntil the cheese is melted and the sauce is smooth.'\n        },\n        {'index': 6, 'step': 'Add the cooked macaroni to the sauce and stir until combined.'},\n        {'index': 7, 'step': 'Serve the vegan mac and cheese warm.'}\n    ]\n}\n</pre> <pre><code>print(guard.state.most_recent_call.tree)\n</code></pre> <pre>Logs\n\u2514\u2500\u2500 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Step 1 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n    \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Prompt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 Generate a recipe for vegan mac and cheese.                                                             \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 Given below is XML that describes the information to extract from this document and the tags to extract \u2502 \u2502\n    \u2502 \u2502 it into.                                                                                                \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 &lt;output&gt;                                                                                                \u2502 \u2502\n    \u2502 \u2502     &lt;list name=\"ingredients\" description=\"What are the ingredients for the recipe?\"&gt;                    \u2502 \u2502\n    \u2502 \u2502         &lt;object&gt;                                                                                        \u2502 \u2502\n    \u2502 \u2502             &lt;integer name=\"index\" format=\"1-indexed\"/&gt;                                                  \u2502 \u2502\n    \u2502 \u2502             &lt;string name=\"name\" format=\"is-vegan\"/&gt;                                                     \u2502 \u2502\n    \u2502 \u2502             &lt;string name=\"brand\" description=\"Suggested brand for the ingredient (if any)\"/&gt;            \u2502 \u2502\n    \u2502 \u2502             &lt;bool name=\"optional\" description=\"Is the ingredient necessary?\"/&gt;                          \u2502 \u2502\n    \u2502 \u2502             &lt;float name=\"quantity\" format=\"units-imperial\"/&gt;                                            \u2502 \u2502\n    \u2502 \u2502             &lt;string name=\"units\" format=\"units-imperial\"/&gt;                                              \u2502 \u2502\n    \u2502 \u2502         &lt;/object&gt;                                                                                       \u2502 \u2502\n    \u2502 \u2502     &lt;/list&gt;                                                                                             \u2502 \u2502\n    \u2502 \u2502     &lt;list name=\"instructions\" description=\"What are the instructions for the recipe?\"&gt;                  \u2502 \u2502\n    \u2502 \u2502         &lt;object&gt;                                                                                        \u2502 \u2502\n    \u2502 \u2502             &lt;integer name=\"index\" format=\"1-indexed\"/&gt;                                                  \u2502 \u2502\n    \u2502 \u2502             &lt;string name=\"step\"/&gt;                                                                       \u2502 \u2502\n    \u2502 \u2502         &lt;/object&gt;                                                                                       \u2502 \u2502\n    \u2502 \u2502     &lt;/list&gt;                                                                                             \u2502 \u2502\n    \u2502 \u2502 &lt;/output&gt;                                                                                               \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 ONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the \u2502 \u2502\n    \u2502 \u2502 `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding  \u2502 \u2502\n    \u2502 \u2502 XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g.        \u2502 \u2502\n    \u2502 \u2502 requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere,     \u2502 \u2502\n    \u2502 \u2502 enter `None`.                                                                                           \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 Here are examples of simple (XML, JSON) pairs that show the expected behavior:                          \u2502 \u2502\n    \u2502 \u2502 - `&lt;string name='foo' format='two-words lower-case' /&gt;` =&gt; `{'foo': 'example one'}`                     \u2502 \u2502\n    \u2502 \u2502 - `&lt;list name='bar'&gt;&lt;string format='upper-case' /&gt;&lt;/list&gt;` =&gt; `{\"bar\": ['STRING ONE', 'STRING TWO',     \u2502 \u2502\n    \u2502 \u2502 etc.]}`                                                                                                 \u2502 \u2502\n    \u2502 \u2502 - `&lt;object name='baz'&gt;&lt;string name=\"foo\" format=\"capitalize two-words\" /&gt;&lt;integer name=\"index\"          \u2502 \u2502\n    \u2502 \u2502 format=\"1-indexed\" /&gt;&lt;/object&gt;` =&gt; `{'baz': {'foo': 'Some String', 'index': 1}}`                        \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 JSON Object:                                                                                            \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n    \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Raw LLM Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n    \u2502 \u2502 {                                                                                                       \u2502 \u2502\n    \u2502 \u2502     \"ingredients\": [                                                                                    \u2502 \u2502\n    \u2502 \u2502         {                                                                                               \u2502 \u2502\n    \u2502 \u2502             \"index\": 1,                                                                                 \u2502 \u2502\n    \u2502 \u2502             \"name\": \"macaroni\",                                                                         \u2502 \u2502\n    \u2502 \u2502             \"brand\": \"Barilla\",                                                                         \u2502 \u2502\n    \u2502 \u2502             \"optional\": false,                                                                          \u2502 \u2502\n    \u2502 \u2502             \"quantity\": 8.0,                                                                            \u2502 \u2502\n    \u2502 \u2502             \"units\": \"oz\"                                                                               \u2502 \u2502\n    \u2502 \u2502         },                                                                                              \u2502 \u2502\n    \u2502 \u2502         {                                                                                               \u2502 \u2502\n    \u2502 \u2502             \"index\": 2,                                                                                 \u2502 \u2502\n    \u2502 \u2502             \"name\": \"vegan butter\",                                                                     \u2502 \u2502\n    \u2502 \u2502             \"brand\": \"Earth Balance\",                                                                   \u2502 \u2502\n    \u2502 \u2502             \"optional\": false,                                                                          \u2502 \u2502\n    \u2502 \u2502             \"quantity\": 2.0,                                                                            \u2502 \u2502\n    \u2502 \u2502             \"units\": \"tbsp\"                                                                             \u2502 \u2502\n    \u2502 \u2502         },                                                                                              \u2502 \u2502\n    \u2502 \u2502         {                                                                                               \u2502 \u2502\n    \u2502 \u2502             \"index\": 3,                                                                                 \u2502 \u2502\n    \u2502 \u2502             \"name\": \"all-purpose flour\",                                                                \u2502 \u2502\n    \u2502 \u2502             \"brand\": \"Gold Medal\",                                                                      \u2502 \u2502\n    \u2502 \u2502             \"optional\": false,                                                                          \u2502 \u2502\n    \u2502 \u2502             \"quantity\": 2.0,                                                                            \u2502 \u2502\n    \u2502 \u2502             \"units\": \"tbsp\"                                                                             \u2502 \u2502\n    \u2502 \u2502         },                                                                                              \u2502 \u2502\n    \u2502 \u2502         {                                                                                               \u2502 \u2502\n    \u2502 \u2502             \"index\": 4,                                                                                 \u2502 \u2502\n    \u2502 \u2502             \"name\": \"vegan milk\",                                                                       \u2502 \u2502\n    \u2502 \u2502             \"brand\": \"Oatly\",                                                                           \u2502 \u2502\n    \u2502 \u2502             \"optional\": false,                                                                          \u2502 \u2502\n    \u2502 \u2502             \"quantity\": 2.0,                                                                            \u2502 \u2502\n    \u2502 \u2502             \"units\": \"cups\"                                                                             \u2502 \u2502\n    \u2502 \u2502         },                                                                                              \u2502 \u2502\n    \u2502 \u2502         {                                                                                               \u2502 \u2502\n    \u2502 \u2502             \"index\": 5,                                                                                 \u2502 \u2502\n    \u2502 \u2502             \"name\": \"vegan cheese\",                                                                     \u2502 \u2502\n    \u2502 \u2502             \"brand\": \"Daiya\",                                                                           \u2502 \u2502\n    \u2502 \u2502             \"optional\": false,                                                                          \u2502 \u2502\n    \u2502 \u2502             \"quantity\": 8.0,                                                                            \u2502 \u2502\n    \u2502 \u2502             \"units\": \"oz\"                                                                               \u2502 \u2502\n    \u2502 \u2502         },                                                                                              \u2502 \u2502\n    \u2502 \u2502         {                                                                                               \u2502 \u2502\n    \u2502 \u2502             \"index\": 6,                                                                                 \u2502 \u2502\n    \u2502 \u2502             \"name\": \"nutritional yeast\",                                                                \u2502 \u2502\n    \u2502 \u2502             \"brand\": \"Bob's Red Mill\",                                                                  \u2502 \u2502\n    \u2502 \u2502             \"optional\": false,                                                                          \u2502 \u2502\n    \u2502 \u2502             \"quantity\": 2.0,                                                                            \u2502 \u2502\n    \u2502 \u2502             \"units\": \"tbsp\"                                                                             \u2502 \u2502\n    \u2502 \u2502         },                                                                                              \u2502 \u2502\n    \u2502 \u2502         {                                                                                               \u2502 \u2502\n    \u2502 \u2502             \"index\": 7,                                                                                 \u2502 \u2502\n    \u2502 \u2502             \"name\": \"garlic powder\",                                                                    \u2502 \u2502\n    \u2502 \u2502             \"brand\": \"McCormick\",                                                                       \u2502 \u2502\n    \u2502 \u2502             \"optional\": false,                                                                          \u2502 \u2502\n    \u2502 \u2502             \"quantity\": 1.0,                                                                            \u2502 \u2502\n    \u2502 \u2502             \"units\": \"tsp\"                                                                              \u2502 \u2502\n    \u2502 \u2502         },                                                                                              \u2502 \u2502\n    \u2502 \u2502         {                                                                                               \u2502 \u2502\n    \u2502 \u2502             \"index\": 8,                                                                                 \u2502 \u2502\n    \u2502 \u2502             \"name\": \"onion powder\",                                                                     \u2502 \u2502\n    \u2502 \u2502             \"brand\": \"McCormick\",                                                                       \u2502 \u2502\n    \u2502 \u2502             \"optional\": false,                                                                          \u2502 \u2502\n    \u2502 \u2502             \"quantity\": 1.0,                                                                            \u2502 \u2502\n    \u2502 \u2502             \"units\": \"tsp\"                                                                              \u2502 \u2502\n    \u2502 \u2502         },                                                                                              \u2502 \u2502\n    \u2502 \u2502         {                                                                                               \u2502 \u2502\n    \u2502 \u2502             \"index\": 9,                                                                                 \u2502 \u2502\n    \u2502 \u2502             \"name\": \"salt\",                                                                             \u2502 \u2502\n    \u2502 \u2502             \"brand\": \"Morton\",                                                                          \u2502 \u2502\n    \u2502 \u2502             \"optional\": false,                                                                          \u2502 \u2502\n    \u2502 \u2502             \"quantity\": 1.0,                                                                            \u2502 \u2502\n    \u2502 \u2502             \"units\": \"tsp\"                                                                              \u2502 \u2502\n    \u2502 \u2502         },                                                                                              \u2502 \u2502\n    \u2502 \u2502         {                                                                                               \u2502 \u2502\n    \u2502 \u2502             \"index\": 10,                                                                                \u2502 \u2502\n    \u2502 \u2502             \"name\": \"black pepper\",                                                                     \u2502 \u2502\n    \u2502 \u2502             \"brand\": \"McCormick\",                                                                       \u2502 \u2502\n    \u2502 \u2502             \"optional\": false,                                                                          \u2502 \u2502\n    \u2502 \u2502             \"quantity\": 0.5,                                                                            \u2502 \u2502\n    \u2502 \u2502             \"units\": \"tsp\"                                                                              \u2502 \u2502\n    \u2502 \u2502         }                                                                                               \u2502 \u2502\n    \u2502 \u2502     ],                                                                                                  \u2502 \u2502\n    \u2502 \u2502     \"instructions\": [                                                                                   \u2502 \u2502\n    \u2502 \u2502         {                                                                                               \u2502 \u2502\n    \u2502 \u2502             \"index\": 1,                                                                                 \u2502 \u2502\n    \u2502 \u2502             \"step\": \"Bring a large pot of salted water to a boil. Add the macaroni and cook according   \u2502 \u2502\n    \u2502 \u2502 to package instructions.\"                                                                               \u2502 \u2502\n    \u2502 \u2502         },                                                                                              \u2502 \u2502\n    \u2502 \u2502         {                                                                                               \u2502 \u2502\n    \u2502 \u2502             \"index\": 2,                                                                                 \u2502 \u2502\n    \u2502 \u2502             \"step\": \"Drain the macaroni and set aside.\"                                                 \u2502 \u2502\n    \u2502 \u2502         },                                                                                              \u2502 \u2502\n    \u2502 \u2502         {                                                                                               \u2502 \u2502\n    \u2502 \u2502             \"index\": 3,                                                                                 \u2502 \u2502\n    \u2502 \u2502             \"step\": \"In a medium saucepan, melt the vegan butter over medium heat. Add the flour and    \u2502 \u2502\n    \u2502 \u2502 whisk until combined and bubbly.\"                                                                       \u2502 \u2502\n    \u2502 \u2502         },                                                                                              \u2502 \u2502\n    \u2502 \u2502         {                                                                                               \u2502 \u2502\n    \u2502 \u2502             \"index\": 4,                                                                                 \u2502 \u2502\n    \u2502 \u2502             \"step\": \"Slowly add the vegan milk, whisking constantly until the mixture is smooth and     \u2502 \u2502\n    \u2502 \u2502 thickened.\"                                                                                             \u2502 \u2502\n    \u2502 \u2502         },                                                                                              \u2502 \u2502\n    \u2502 \u2502         {                                                                                               \u2502 \u2502\n    \u2502 \u2502             \"index\": 5,                                                                                 \u2502 \u2502\n    \u2502 \u2502             \"step\": \"Add the vegan cheese, nutritional yeast, garlic powder, onion powder, salt, and    \u2502 \u2502\n    \u2502 \u2502 pepper. Stir until the cheese is melted and the sauce is smooth.\"                                       \u2502 \u2502\n    \u2502 \u2502         },                                                                                              \u2502 \u2502\n    \u2502 \u2502         {                                                                                               \u2502 \u2502\n    \u2502 \u2502             \"index\": 6,                                                                                 \u2502 \u2502\n    \u2502 \u2502             \"step\": \"Add the cooked macaroni to the sauce and stir until combined.\"                     \u2502 \u2502\n    \u2502 \u2502         },                                                                                              \u2502 \u2502\n    \u2502 \u2502         {                                                                                               \u2502 \u2502\n    \u2502 \u2502             \"index\": 7,                                                                                 \u2502 \u2502\n    \u2502 \u2502             \"step\": \"Serve the vegan mac and cheese warm.\"                                              \u2502 \u2502\n    \u2502 \u2502         }                                                                                               \u2502 \u2502\n    \u2502 \u2502     ]                                                                                                   \u2502 \u2502\n    \u2502 \u2502 }                                                                                                       \u2502 \u2502\n    \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n    \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Validated Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n    \u2502 \u2502 {                                                                                                       \u2502 \u2502\n    \u2502 \u2502     'ingredients': [                                                                                    \u2502 \u2502\n    \u2502 \u2502         {                                                                                               \u2502 \u2502\n    \u2502 \u2502             'index': 1,                                                                                 \u2502 \u2502\n    \u2502 \u2502             'name': 'macaroni',                                                                         \u2502 \u2502\n    \u2502 \u2502             'brand': 'Barilla',                                                                         \u2502 \u2502\n    \u2502 \u2502             'optional': False,                                                                          \u2502 \u2502\n    \u2502 \u2502             'quantity': 8.0,                                                                            \u2502 \u2502\n    \u2502 \u2502             'units': 'oz'                                                                               \u2502 \u2502\n    \u2502 \u2502         },                                                                                              \u2502 \u2502\n    \u2502 \u2502         {                                                                                               \u2502 \u2502\n    \u2502 \u2502             'index': 2,                                                                                 \u2502 \u2502\n    \u2502 \u2502             'name': 'vegan butter',                                                                     \u2502 \u2502\n    \u2502 \u2502             'brand': 'Earth Balance',                                                                   \u2502 \u2502\n    \u2502 \u2502             'optional': False,                                                                          \u2502 \u2502\n    \u2502 \u2502             'quantity': 2.0,                                                                            \u2502 \u2502\n    \u2502 \u2502             'units': 'tbsp'                                                                             \u2502 \u2502\n    \u2502 \u2502         },                                                                                              \u2502 \u2502\n    \u2502 \u2502         {                                                                                               \u2502 \u2502\n    \u2502 \u2502             'index': 3,                                                                                 \u2502 \u2502\n    \u2502 \u2502             'name': 'all-purpose flour',                                                                \u2502 \u2502\n    \u2502 \u2502             'brand': 'Gold Medal',                                                                      \u2502 \u2502\n    \u2502 \u2502             'optional': False,                                                                          \u2502 \u2502\n    \u2502 \u2502             'quantity': 2.0,                                                                            \u2502 \u2502\n    \u2502 \u2502             'units': 'tbsp'                                                                             \u2502 \u2502\n    \u2502 \u2502         },                                                                                              \u2502 \u2502\n    \u2502 \u2502         {                                                                                               \u2502 \u2502\n    \u2502 \u2502             'index': 4,                                                                                 \u2502 \u2502\n    \u2502 \u2502             'name': 'vegan milk',                                                                       \u2502 \u2502\n    \u2502 \u2502             'brand': 'Oatly',                                                                           \u2502 \u2502\n    \u2502 \u2502             'optional': False,                                                                          \u2502 \u2502\n    \u2502 \u2502             'quantity': 2.0,                                                                            \u2502 \u2502\n    \u2502 \u2502             'units': 'cups'                                                                             \u2502 \u2502\n    \u2502 \u2502         },                                                                                              \u2502 \u2502\n    \u2502 \u2502         {                                                                                               \u2502 \u2502\n    \u2502 \u2502             'index': 5,                                                                                 \u2502 \u2502\n    \u2502 \u2502             'name': 'vegan cheese',                                                                     \u2502 \u2502\n    \u2502 \u2502             'brand': 'Daiya',                                                                           \u2502 \u2502\n    \u2502 \u2502             'optional': False,                                                                          \u2502 \u2502\n    \u2502 \u2502             'quantity': 8.0,                                                                            \u2502 \u2502\n    \u2502 \u2502             'units': 'oz'                                                                               \u2502 \u2502\n    \u2502 \u2502         },                                                                                              \u2502 \u2502\n    \u2502 \u2502         {                                                                                               \u2502 \u2502\n    \u2502 \u2502             'index': 6,                                                                                 \u2502 \u2502\n    \u2502 \u2502             'name': 'nutritional yeast',                                                                \u2502 \u2502\n    \u2502 \u2502             'brand': \"Bob's Red Mill\",                                                                  \u2502 \u2502\n    \u2502 \u2502             'optional': False,                                                                          \u2502 \u2502\n    \u2502 \u2502             'quantity': 2.0,                                                                            \u2502 \u2502\n    \u2502 \u2502             'units': 'tbsp'                                                                             \u2502 \u2502\n    \u2502 \u2502         },                                                                                              \u2502 \u2502\n    \u2502 \u2502         {                                                                                               \u2502 \u2502\n    \u2502 \u2502             'index': 7,                                                                                 \u2502 \u2502\n    \u2502 \u2502             'name': 'garlic powder',                                                                    \u2502 \u2502\n    \u2502 \u2502             'brand': 'McCormick',                                                                       \u2502 \u2502\n    \u2502 \u2502             'optional': False,                                                                          \u2502 \u2502\n    \u2502 \u2502             'quantity': 1.0,                                                                            \u2502 \u2502\n    \u2502 \u2502             'units': 'tsp'                                                                              \u2502 \u2502\n    \u2502 \u2502         },                                                                                              \u2502 \u2502\n    \u2502 \u2502         {                                                                                               \u2502 \u2502\n    \u2502 \u2502             'index': 8,                                                                                 \u2502 \u2502\n    \u2502 \u2502             'name': 'onion powder',                                                                     \u2502 \u2502\n    \u2502 \u2502             'brand': 'McCormick',                                                                       \u2502 \u2502\n    \u2502 \u2502             'optional': False,                                                                          \u2502 \u2502\n    \u2502 \u2502             'quantity': 1.0,                                                                            \u2502 \u2502\n    \u2502 \u2502             'units': 'tsp'                                                                              \u2502 \u2502\n    \u2502 \u2502         },                                                                                              \u2502 \u2502\n    \u2502 \u2502         {                                                                                               \u2502 \u2502\n    \u2502 \u2502             'index': 9,                                                                                 \u2502 \u2502\n    \u2502 \u2502             'name': 'salt',                                                                             \u2502 \u2502\n    \u2502 \u2502             'brand': 'Morton',                                                                          \u2502 \u2502\n    \u2502 \u2502             'optional': False,                                                                          \u2502 \u2502\n    \u2502 \u2502             'quantity': 1.0,                                                                            \u2502 \u2502\n    \u2502 \u2502             'units': 'tsp'                                                                              \u2502 \u2502\n    \u2502 \u2502         },                                                                                              \u2502 \u2502\n    \u2502 \u2502         {                                                                                               \u2502 \u2502\n    \u2502 \u2502             'index': 10,                                                                                \u2502 \u2502\n    \u2502 \u2502             'name': 'black pepper',                                                                     \u2502 \u2502\n    \u2502 \u2502             'brand': 'McCormick',                                                                       \u2502 \u2502\n    \u2502 \u2502             'optional': False,                                                                          \u2502 \u2502\n    \u2502 \u2502             'quantity': 0.5,                                                                            \u2502 \u2502\n    \u2502 \u2502             'units': 'tsp'                                                                              \u2502 \u2502\n    \u2502 \u2502         }                                                                                               \u2502 \u2502\n    \u2502 \u2502     ],                                                                                                  \u2502 \u2502\n    \u2502 \u2502     'instructions': [                                                                                   \u2502 \u2502\n    \u2502 \u2502         {                                                                                               \u2502 \u2502\n    \u2502 \u2502             'index': 1,                                                                                 \u2502 \u2502\n    \u2502 \u2502             'step': 'Bring a large pot of salted water to a boil. Add the macaroni and cook according   \u2502 \u2502\n    \u2502 \u2502 to package instructions.'                                                                               \u2502 \u2502\n    \u2502 \u2502         },                                                                                              \u2502 \u2502\n    \u2502 \u2502         {'index': 2, 'step': 'Drain the macaroni and set aside.'},                                      \u2502 \u2502\n    \u2502 \u2502         {                                                                                               \u2502 \u2502\n    \u2502 \u2502             'index': 3,                                                                                 \u2502 \u2502\n    \u2502 \u2502             'step': 'In a medium saucepan, melt the vegan butter over medium heat. Add the flour and    \u2502 \u2502\n    \u2502 \u2502 whisk until combined and bubbly.'                                                                       \u2502 \u2502\n    \u2502 \u2502         },                                                                                              \u2502 \u2502\n    \u2502 \u2502         {                                                                                               \u2502 \u2502\n    \u2502 \u2502             'index': 4,                                                                                 \u2502 \u2502\n    \u2502 \u2502             'step': 'Slowly add the vegan milk, whisking constantly until the mixture is smooth and     \u2502 \u2502\n    \u2502 \u2502 thickened.'                                                                                             \u2502 \u2502\n    \u2502 \u2502         },                                                                                              \u2502 \u2502\n    \u2502 \u2502         {                                                                                               \u2502 \u2502\n    \u2502 \u2502             'index': 5,                                                                                 \u2502 \u2502\n    \u2502 \u2502             'step': 'Add the vegan cheese, nutritional yeast, garlic powder, onion powder, salt, and    \u2502 \u2502\n    \u2502 \u2502 pepper. Stir until the cheese is melted and the sauce is smooth.'                                       \u2502 \u2502\n    \u2502 \u2502         },                                                                                              \u2502 \u2502\n    \u2502 \u2502         {                                                                                               \u2502 \u2502\n    \u2502 \u2502             'index': 6,                                                                                 \u2502 \u2502\n    \u2502 \u2502             'step': 'Add the cooked macaroni to the sauce and stir until combined.'                     \u2502 \u2502\n    \u2502 \u2502         },                                                                                              \u2502 \u2502\n    \u2502 \u2502         {'index': 7, 'step': 'Serve the vegan mac and cheese warm.'}                                    \u2502 \u2502\n    \u2502 \u2502     ]                                                                                                   \u2502 \u2502\n    \u2502 \u2502 }                                                                                                       \u2502 \u2502\n    \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n    \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</pre>"},{"location":"examples/recipe_generation/#generating-vegan-recipes","title":"Generating Vegan Recipes","text":"<p>Note</p> <p>To download this example as a Jupyter notebook, click here.</p> <p>In this example, we will use Guardrails to generate vegan mac and cheese recipe.</p>"},{"location":"examples/recipe_generation/#objective","title":"Objective","text":"<p>We want to generate a vegan Mac-n-Cheese recipe as a list of ingredients and instructions. We will use Guardrails to make sure the recipe is vegan.</p>"},{"location":"examples/recipe_generation/#step-1-create-the-rail-spec","title":"Step 1: Create the RAIL Spec","text":"<p>Ordinarily, we would create an RAIL spec in a separate file. For the purposes of this example, we will create the spec in this notebook as a string following the RAIL syntax. For more information on RAIL, see the RAIL documentation.</p> <p>Here, we request:</p>"},{"location":"examples/recipe_generation/#step-2-create-a-guard-object-with-the-rail-spec","title":"Step 2: Create a <code>Guard</code> object with the RAIL Spec","text":"<p>We create a <code>gd.Guard</code> object that will check, validate and correct the output of the LLM. This object:</p> <ol> <li>Enforces the quality criteria specified in the RAIL spec.</li> <li>Takes corrective action when the quality criteria are not met.</li> <li>Compiles the schema and type info from the RAIL spec and adds it to the prompt.</li> </ol>"},{"location":"examples/recipe_generation/#step-3-wrap-the-llm-api-call-with-guard","title":"Step 3: Wrap the LLM API call with <code>Guard</code>","text":""},{"location":"examples/select_choice_based_on_action/","title":"If condition: generate different JSON objects based on condition","text":"<pre><code>rail_str = \"\"\"\n&lt;rail version=\"0.1\"&gt;\n&lt;output&gt;\n    &lt;choice name=\"action\" on-fail-choice=\"reask\"&gt;\n        &lt;case name=\"fight\"&gt;\n            &lt;string name=\"weapon\" format=\"valid-choices: {['crossbow', 'machine gun']}\" on-fail-valid-choices=\"reask\" /&gt;\n        &lt;/case&gt;\n        &lt;case name=\"flight\"&gt;\n            &lt;object name=\"flight\"&gt;\n                &lt;string name=\"flight_direction\" format=\"valid-choices: {['north','south','east','west']}\" on-fail-valid-choices=\"exception\" /&gt;\n                &lt;integer name=\"distance\" format=\"valid-choices: {[1,2,3,4]}\" on-fail-valid-choices=\"exception\" /&gt;\n            &lt;/object&gt;\n        &lt;/case&gt;\n    &lt;/choice&gt;\n&lt;/output&gt;\n&lt;prompt&gt;\nYou are a human in an enchanted forest. You come across opponents of different types, and you should fight smaller opponents and run away from bigger ones.\nYou run into a {{opp_type}}. What do you do?\n@complete_json_suffix_v2&lt;/prompt&gt;\n&lt;/rail&gt;\n\"\"\"\n</code></pre> <pre><code>import guardrails as gd\nfrom rich import print\nguard = gd.Guard.from_rail_string(rail_str)\n</code></pre> <p>The <code>Guard</code> object compiles the output schema and adds it to the prompt. We can see the final prompt below:</p> <pre><code>print(guard.base_prompt)\n</code></pre> <pre>\nYou are a human in an enchanted forest. You come across opponents of different types, and you should fight smaller \nopponents and run away from bigger ones.\n\nYou run into a {opp_type}. What do you do?\n\n\nGiven below is XML that describes the information to extract from this document and the tags to extract it into.\n\n&lt;output&gt;\n    &lt;string name=\"action\" choices=\"fight,flight\"/&gt;\n    &lt;string format=\"valid-choices: choices=['crossbow', 'machine gun']\" name=\"fight\" if=\"action==fight\"/&gt;\n    &lt;object name=\"flight\" if=\"action==flight\"&gt;\n        &lt;string name=\"flight_direction\" format=\"valid-choices: choices=['north', 'south', 'east', 'west']\"/&gt;\n        &lt;integer name=\"distance\" format=\"valid-choices: choices=[1, 2, 3, 4]\"/&gt;\n    &lt;/object&gt;\n&lt;/output&gt;\n\n\nONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the `name` \nattribute of the corresponding XML, and the value is of the type specified by the corresponding XML's tag. The JSON\nMUST conform to the XML format, including any types and format requests e.g. requests for lists, objects and \nspecific types. Be correct and concise.\n\nHere are examples of simple (XML, JSON) pairs that show the expected behavior:\n- `&lt;string name='foo' format='two-words lower-case' /&gt;` =&gt; `{{'foo': 'example one'}}`\n- `&lt;list name='bar'&gt;&lt;string format='upper-case' /&gt;&lt;/list&gt;` =&gt; `{{\"bar\": ['STRING ONE', 'STRING TWO', etc.]}}`\n- `&lt;object name='baz'&gt;&lt;string name=\"foo\" format=\"capitalize two-words\" /&gt;&lt;integer name=\"index\" format=\"1-indexed\" /&gt;&lt;/object&gt;` =&gt; `{{'baz': {{'foo': 'Some String', 'index': 1}}}}`\n- `&lt;string name=\"foo\" choices=\"bar,baz\"/&gt;&lt;case name=\"bar\" on=\"foo\"&gt;&lt;string format=\"valid-choices: ['a', \n'b']\"/&gt;&lt;/case&gt;&lt;case name=\"baz\" on=\"foo\"&gt;&lt;object&gt;&lt;string name=\"qux\" format=\"valid-choices: ['corge', \n'grault']\"/&gt;&lt;integer name=\"quux\" format=\"valid-choices: [1, 2, 3, 4]\"/&gt;&lt;/object&gt;&lt;/case&gt;` =&gt; `{{'foo': 'baz', 'baz':\n{{'qux': 'corge', 'quux': 1}}}}`\nJSON Object:\n</pre> <p>We can now wrap the LsLM API call with the <code>Guard</code> object. This will ensure that the LLM generates an output that is compliant with the RAIL spec.</p> <p>To start, we test with a 'giant' as an opponent, and look at the output.</p> <pre><code>import openai\nraw_llm_response, validated_response = guard(\nopenai.Completion.create,\nprompt_params={'opp_type': 'giant'},\nengine=\"text-davinci-003\",\nmax_tokens=256,\ntemperature=0.0,\n)\n</code></pre> <p>Running the cell above returns: 1. The raw LLM text output as a single string. 2. A dictionary where the key is <code>python_code</code> and the value is the generated code.</p> <p>We can see that if the LLM chooses <code>flight</code>, the output is a dictionary with <code>flight_direction</code> and <code>distance</code> fields.</p> <pre><code>print(validated_response)\n</code></pre> <pre>{'action': 'flight', 'flight': {'flight_direction': 'north', 'distance': 1}}\n</pre> <p>We can inspect the logs of the guard object to see the quality criteria that were checked and the corrective actions that were taken.</p> <pre><code>print(guard.state.most_recent_call.tree)\n</code></pre> <pre>Logs\n\u2514\u2500\u2500 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Step 0 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n    \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Prompt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 You are a human in an enchanted forest. You come across opponents of different types, and you should    \u2502 \u2502\n    \u2502 \u2502 fight smaller opponents and run away from bigger ones.                                                  \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 You run into a giant. What do you do?                                                                   \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 Given below is XML that describes the information to extract from this document and the tags to extract \u2502 \u2502\n    \u2502 \u2502 it into.                                                                                                \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 &lt;output&gt;                                                                                                \u2502 \u2502\n    \u2502 \u2502     &lt;string name=\"action\" choices=\"fight,flight\"/&gt;                                                      \u2502 \u2502\n    \u2502 \u2502     &lt;string format=\"valid-choices: choices=['crossbow', 'machine gun']\" name=\"fight\"                    \u2502 \u2502\n    \u2502 \u2502 if=\"action==fight\"/&gt;                                                                                    \u2502 \u2502\n    \u2502 \u2502     &lt;object name=\"flight\" if=\"action==flight\"&gt;                                                          \u2502 \u2502\n    \u2502 \u2502         &lt;string name=\"flight_direction\" format=\"valid-choices: choices=['north', 'south', 'east',       \u2502 \u2502\n    \u2502 \u2502 'west']\"/&gt;                                                                                              \u2502 \u2502\n    \u2502 \u2502         &lt;integer name=\"distance\" format=\"valid-choices: choices=[1, 2, 3, 4]\"/&gt;                         \u2502 \u2502\n    \u2502 \u2502     &lt;/object&gt;                                                                                           \u2502 \u2502\n    \u2502 \u2502 &lt;/output&gt;                                                                                               \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 ONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the \u2502 \u2502\n    \u2502 \u2502 `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding  \u2502 \u2502\n    \u2502 \u2502 XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g.        \u2502 \u2502\n    \u2502 \u2502 requests for lists, objects and specific types. Be correct and concise.                                 \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 Here are examples of simple (XML, JSON) pairs that show the expected behavior:                          \u2502 \u2502\n    \u2502 \u2502 - `&lt;string name='foo' format='two-words lower-case' /&gt;` =&gt; `{'foo': 'example one'}`                     \u2502 \u2502\n    \u2502 \u2502 - `&lt;list name='bar'&gt;&lt;string format='upper-case' /&gt;&lt;/list&gt;` =&gt; `{\"bar\": ['STRING ONE', 'STRING TWO',     \u2502 \u2502\n    \u2502 \u2502 etc.]}`                                                                                                 \u2502 \u2502\n    \u2502 \u2502 - `&lt;object name='baz'&gt;&lt;string name=\"foo\" format=\"capitalize two-words\" /&gt;&lt;integer name=\"index\"          \u2502 \u2502\n    \u2502 \u2502 format=\"1-indexed\" /&gt;&lt;/object&gt;` =&gt; `{'baz': {'foo': 'Some String', 'index': 1}}`                        \u2502 \u2502\n    \u2502 \u2502 - `&lt;string name=\"foo\" choices=\"bar,baz\"/&gt;&lt;case name=\"bar\" on=\"foo\"&gt;&lt;string format=\"valid-choices: ['a', \u2502 \u2502\n    \u2502 \u2502 'b']\"/&gt;&lt;/case&gt;&lt;case name=\"baz\" on=\"foo\"&gt;&lt;object&gt;&lt;string name=\"qux\" format=\"valid-choices: ['corge',     \u2502 \u2502\n    \u2502 \u2502 'grault']\"/&gt;&lt;integer name=\"quux\" format=\"valid-choices: [1, 2, 3, 4]\"/&gt;&lt;/object&gt;&lt;/case&gt;` =&gt; `{'foo':    \u2502 \u2502\n    \u2502 \u2502 'baz', 'baz': {'qux': 'corge', 'quux': 1}}`                                                             \u2502 \u2502\n    \u2502 \u2502 JSON Object:                                                                                            \u2502 \u2502\n    \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n    \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Raw LLM Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 {\"action\": \"flight\", \"flight\": {\"flight_direction\": \"north\", \"distance\": 1}}                            \u2502 \u2502\n    \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n    \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Validated Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n    \u2502 \u2502 {'action': 'flight', 'flight': {'flight_direction': 'north', 'distance': 1}}                            \u2502 \u2502\n    \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n    \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</pre> <p>Now, let's test with a <code>goblin</code> as an opponent.</p> <p>We can see that the LLM chose to <code>fight</code> and the output is a choice of <code>weapon</code>.</p> <pre><code>raw_llm_response, validated_response = guard(\nopenai.Completion.create,\nprompt_params={'opp_type': 'goblin'},\nengine=\"text-davinci-003\",\nmax_tokens=256,\ntemperature=0.0,\n)\n</code></pre> <pre><code>print(validated_response)\n</code></pre> <pre>{'action': 'fight', 'fight': 'crossbow'}\n</pre> <p>We can inspect the state of the guard after each call to see what happened.</p> <pre><code>print(guard.state.most_recent_call.tree)\n</code></pre> <pre>Logs\n\u2514\u2500\u2500 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Step 0 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n    \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Prompt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 You are a human in an enchanted forest. You come across opponents of different types, and you should    \u2502 \u2502\n    \u2502 \u2502 fight smaller opponents and run away from bigger ones.                                                  \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 You run into a goblin. What do you do?                                                                  \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 Given below is XML that describes the information to extract from this document and the tags to extract \u2502 \u2502\n    \u2502 \u2502 it into.                                                                                                \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 &lt;output&gt;                                                                                                \u2502 \u2502\n    \u2502 \u2502     &lt;string name=\"action\" choices=\"fight,flight\"/&gt;                                                      \u2502 \u2502\n    \u2502 \u2502     &lt;string format=\"valid-choices: choices=['crossbow', 'machine gun']\" name=\"fight\"                    \u2502 \u2502\n    \u2502 \u2502 if=\"action==fight\"/&gt;                                                                                    \u2502 \u2502\n    \u2502 \u2502     &lt;object name=\"flight\" if=\"action==flight\"&gt;                                                          \u2502 \u2502\n    \u2502 \u2502         &lt;string name=\"flight_direction\" format=\"valid-choices: choices=['north', 'south', 'east',       \u2502 \u2502\n    \u2502 \u2502 'west']\"/&gt;                                                                                              \u2502 \u2502\n    \u2502 \u2502         &lt;integer name=\"distance\" format=\"valid-choices: choices=[1, 2, 3, 4]\"/&gt;                         \u2502 \u2502\n    \u2502 \u2502     &lt;/object&gt;                                                                                           \u2502 \u2502\n    \u2502 \u2502 &lt;/output&gt;                                                                                               \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 ONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the \u2502 \u2502\n    \u2502 \u2502 `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding  \u2502 \u2502\n    \u2502 \u2502 XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g.        \u2502 \u2502\n    \u2502 \u2502 requests for lists, objects and specific types. Be correct and concise.                                 \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 Here are examples of simple (XML, JSON) pairs that show the expected behavior:                          \u2502 \u2502\n    \u2502 \u2502 - `&lt;string name='foo' format='two-words lower-case' /&gt;` =&gt; `{'foo': 'example one'}`                     \u2502 \u2502\n    \u2502 \u2502 - `&lt;list name='bar'&gt;&lt;string format='upper-case' /&gt;&lt;/list&gt;` =&gt; `{\"bar\": ['STRING ONE', 'STRING TWO',     \u2502 \u2502\n    \u2502 \u2502 etc.]}`                                                                                                 \u2502 \u2502\n    \u2502 \u2502 - `&lt;object name='baz'&gt;&lt;string name=\"foo\" format=\"capitalize two-words\" /&gt;&lt;integer name=\"index\"          \u2502 \u2502\n    \u2502 \u2502 format=\"1-indexed\" /&gt;&lt;/object&gt;` =&gt; `{'baz': {'foo': 'Some String', 'index': 1}}`                        \u2502 \u2502\n    \u2502 \u2502 - `&lt;string name=\"foo\" choices=\"bar,baz\"/&gt;&lt;case name=\"bar\" on=\"foo\"&gt;&lt;string format=\"valid-choices: ['a', \u2502 \u2502\n    \u2502 \u2502 'b']\"/&gt;&lt;/case&gt;&lt;case name=\"baz\" on=\"foo\"&gt;&lt;object&gt;&lt;string name=\"qux\" format=\"valid-choices: ['corge',     \u2502 \u2502\n    \u2502 \u2502 'grault']\"/&gt;&lt;integer name=\"quux\" format=\"valid-choices: [1, 2, 3, 4]\"/&gt;&lt;/object&gt;&lt;/case&gt;` =&gt; `{'foo':    \u2502 \u2502\n    \u2502 \u2502 'baz', 'baz': {'qux': 'corge', 'quux': 1}}`                                                             \u2502 \u2502\n    \u2502 \u2502 JSON Object:                                                                                            \u2502 \u2502\n    \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n    \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Raw LLM Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 {\"action\": \"fight\", \"fight\": \"crossbow\"}                                                                \u2502 \u2502\n    \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n    \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Validated Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n    \u2502 \u2502 {'action': 'fight', 'fight': 'crossbow'}                                                                \u2502 \u2502\n    \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n    \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</pre>"},{"location":"examples/select_choice_based_on_action/#enforcing-guardrails-on-choice-selection","title":"Enforcing Guardrails on Choice Selection","text":"<p>Note</p> <p>To download this tutorial as a Jupyter notebook, click here.</p> <p>In this example, we want the LLM to pick an action (e.g. <code>fight</code> or <code>flight</code>), and based on that action we want to return different JSON objects. For example, if the action is <code>fight</code>, we want to return a JSON object that contains the <code>weapon</code> field. If the action is <code>flight</code>, we want to return a JSON object that contains the <code>direction</code> and <code>distance</code> fields.</p> <p>We make the assumption that:</p> <ol> <li>We don't need any external libraries that are not already installed in the environment.</li> <li>We are able to execute the code in the environment.</li> </ol>"},{"location":"examples/select_choice_based_on_action/#objective","title":"Objective","text":"<p>We want the LLM to play an RP game where it can choose to either <code>fight</code> or <code>flight</code>. If it chooses to <code>fight</code>, the LLM should choose a <code>weapon</code> and an <code>enemy</code>. If the player chooses <code>flight</code>, the LLM shoudl choose a <code>direction</code> and a <code>distance</code>.</p>"},{"location":"examples/select_choice_based_on_action/#step-1-generating-rail-spec","title":"Step 1: Generating <code>RAIL</code> Spec","text":"<p>Ordinarily, we could create a separate <code>RAIL</code> spec in a file. However, for the sake of this example, we will generate the <code>RAIL</code> spec in the notebook as a string.</p>"},{"location":"examples/select_choice_based_on_action/#step-2-create-a-guard-object-with-the-rail-spec","title":"Step 2: Create a <code>Guard</code> object with the RAIL Spec","text":"<p>We create a <code>gd.Guard</code> object that will check, validate and correct the generated code. This object:</p> <ol> <li>Enforces the quality criteria specified in the RAIL spec (i.e. bug free code).</li> <li>Takes corrective action when the quality criteria are not met (i.e. reasking the LLM).</li> <li>Compiles the schema and type info from the RAIL spec and adds it to the prompt.</li> </ol>"},{"location":"examples/select_choice_based_on_action/#step-3-wrap-the-llm-api-call-with-guard","title":"Step 3: Wrap the LLM API call with <code>Guard</code>","text":""},{"location":"examples/syntax_error_free_sql/","title":"Natural language to bug-free SQL","text":"<pre><code>!pip install sqlvalidator\n</code></pre> <pre><code>rail_str = \"\"\"\n&lt;rail version=\"0.1\"&gt;\n&lt;output&gt;\n    &lt;string\n        name=\"generated_sql\"\n        description=\"Generate SQL for the given natural language instruction.\"\n        format=\"bug-free-sql\"\n        on-fail-bug-free-sql=\"reask\" \n    /&gt;\n&lt;/output&gt;\n&lt;prompt&gt;\nGenerate a valid SQL query for the following natural language instruction:\n{{nl_instruction}}\n@complete_json_suffix\n&lt;/prompt&gt;\n&lt;/rail&gt;\n\"\"\"\n</code></pre> <p>Note</p> <p>In order to ensure that the SQL is syntactically correct, we use <code>bug-free-sql</code> as the formatter. This is a light-weight formatter that uses the <code>sqlvalidator</code> package to check that the SQL is free of any syntax errors. For your use case, you can create a custom SQL validator that connects to your database and checks that the SQL is valid.</p> <pre><code>import guardrails as gd\nfrom rich import print\nguard = gd.Guard.from_rail_string(rail_str)\n</code></pre> <pre>\n<code>/Users/shreyarajpal/guardrails/guardrails/schema.py:187: UserWarning: Validator bug-free-sql is not valid for element string.\n  warnings.warn(\n</code>\n</pre> <p>We see the prompt that will be sent to the LLM:</p> <pre><code>print(guard.base_prompt)\n</code></pre> <pre>\n\nGenerate a valid SQL query for the following natural language instruction:\n\n{nl_instruction}\n\n\nGiven below is XML that describes the information to extract from this document and the tags to extract it into.\n\n&lt;output&gt;\n    &lt;string name=\"generated_sql\" description=\"Generate SQL for the given natural language instruction.\"/&gt;\n&lt;/output&gt;\n\n\nONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the `name` \nattribute of the corresponding XML, and the value is of the type specified by the corresponding XML's tag. The JSON\nMUST conform to the XML format, including any types and format requests e.g. requests for lists, objects and \nspecific types. Be correct and concise. If you are unsure anywhere, enter `None`.\n\nHere are examples of simple (XML, JSON) pairs that show the expected behavior:\n- `&lt;string name='foo' format='two-words lower-case' /&gt;` =&gt; `{{'foo': 'example one'}}`\n- `&lt;list name='bar'&gt;&lt;string format='upper-case' /&gt;&lt;/list&gt;` =&gt; `{{\"bar\": ['STRING ONE', 'STRING TWO', etc.]}}`\n- `&lt;object name='baz'&gt;&lt;string name=\"foo\" format=\"capitalize two-words\" /&gt;&lt;integer name=\"index\" format=\"1-indexed\" /&gt;&lt;/object&gt;` =&gt; `{{'baz': {{'foo': 'Some String', 'index': 1}}}}`\n\nJSON Object:\n\n</pre> <p>Here, <code>nl_language</code> is the natural language instruction and will be provided by the user at runtime.</p> <pre><code>import openai\nraw_llm_response, validated_response = guard(\nopenai.Completion.create,\nprompt_params={\n\"nl_instruction\": \"Select the name of the employee who has the highest salary.\"\n},\nengine=\"text-davinci-003\",\nmax_tokens=2048,\ntemperature=0,\n)\n</code></pre> <pre>\n<code>/Users/shreyarajpal/anaconda3/envs/tiff-env/lib/python3.9/site-packages/eliot/json.py:22: FutureWarning: In the future `np.bool` will be defined as the corresponding NumPy scalar.  (This may have returned Python scalars in past versions.\n  if isinstance(o, (numpy.bool, numpy.bool_)):\n</code>\n</pre> <p>The <code>guard</code> wrapper returns the raw_llm_respose (which is a simple string), and the validated and corrected output (which is a dictionary).</p> <p>We can see that the output is a dictionary with the correct schema and types.</p> <pre><code>print(validated_response)\n</code></pre> <pre>{'generated_sql': 'SELECT name FROM employee ORDER BY salary DESC LIMIT 1'}\n</pre> <pre><code>print(guard.state.most_recent_call.tree)\n</code></pre> <pre>Logs\n\u2514\u2500\u2500 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Step 1 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n    \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Prompt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 Generate a valid SQL query for the following natural language instruction:                              \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 Select the name of the employee who has the highest salary.                                             \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 Given below is XML that describes the information to extract from this document and the tags to extract \u2502 \u2502\n    \u2502 \u2502 it into.                                                                                                \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 &lt;output&gt;                                                                                                \u2502 \u2502\n    \u2502 \u2502     &lt;string name=\"generated_sql\" description=\"Generate SQL for the given natural language               \u2502 \u2502\n    \u2502 \u2502 instruction.\"/&gt;                                                                                         \u2502 \u2502\n    \u2502 \u2502 &lt;/output&gt;                                                                                               \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 ONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the \u2502 \u2502\n    \u2502 \u2502 `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding  \u2502 \u2502\n    \u2502 \u2502 XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g.        \u2502 \u2502\n    \u2502 \u2502 requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere,     \u2502 \u2502\n    \u2502 \u2502 enter `None`.                                                                                           \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 Here are examples of simple (XML, JSON) pairs that show the expected behavior:                          \u2502 \u2502\n    \u2502 \u2502 - `&lt;string name='foo' format='two-words lower-case' /&gt;` =&gt; `{'foo': 'example one'}`                     \u2502 \u2502\n    \u2502 \u2502 - `&lt;list name='bar'&gt;&lt;string format='upper-case' /&gt;&lt;/list&gt;` =&gt; `{\"bar\": ['STRING ONE', 'STRING TWO',     \u2502 \u2502\n    \u2502 \u2502 etc.]}`                                                                                                 \u2502 \u2502\n    \u2502 \u2502 - `&lt;object name='baz'&gt;&lt;string name=\"foo\" format=\"capitalize two-words\" /&gt;&lt;integer name=\"index\"          \u2502 \u2502\n    \u2502 \u2502 format=\"1-indexed\" /&gt;&lt;/object&gt;` =&gt; `{'baz': {'foo': 'Some String', 'index': 1}}`                        \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 JSON Object:                                                                                            \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n    \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Raw LLM Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n    \u2502 \u2502 {\"generated_sql\": \"SELECT name FROM employee ORDER BY salary DESC LIMIT 1\"}                             \u2502 \u2502\n    \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n    \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Validated Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n    \u2502 \u2502 {'generated_sql': 'SELECT name FROM employee ORDER BY salary DESC LIMIT 1'}                             \u2502 \u2502\n    \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n    \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</pre>"},{"location":"examples/syntax_error_free_sql/#natural-language-to-bug-free-sql","title":"Natural Language to Bug Free SQL","text":"<p>Note</p> <p>To download this example as a Jupyter notebook, click here.</p> <p>In this example, we will use Guardrails to generate SQL queries from natural language. We will check that the SQL is free of any syntax errors.</p>"},{"location":"examples/syntax_error_free_sql/#objective","title":"Objective","text":"<p>We want to generate SQL queries from natural language, and check that the SQL is free of any syntax errors.</p>"},{"location":"examples/syntax_error_free_sql/#step-0-setup","title":"Step 0: Setup","text":"<p>In order to run this example, you will need to install the <code>sqlvalidator</code> package. You can do so by running the following command:</p>"},{"location":"examples/syntax_error_free_sql/#step-1-create-the-rail-spec","title":"Step 1: Create the RAIL Spec","text":"<p>Ordinarily, we would create an RAIL spec in a separate file. For the purposes of this example, we will create the spec in this notebook as a string following the RAIL syntax. For more information on RAIL, see the RAIL documentation.</p> <p>In this RAIL spec, we:</p> <ol> <li>Create an <code>output</code> schema that returns a single key-value pair. The key should be 'generated_sql' and the value should be the SQL query generated from the natural language, which is syntactically correct.</li> </ol>"},{"location":"examples/syntax_error_free_sql/#step-2-create-a-guard-object-with-the-rail-spec","title":"Step 2: Create a <code>Guard</code> object with the RAIL Spec","text":"<p>We create a <code>gd.Guard</code> object that will check, validate and correct the output of the LLM. This object:</p> <ol> <li>Enforces the quality criteria specified in the RAIL spec.</li> <li>Takes corrective action when the quality criteria are not met.</li> <li>Compiles the schema and type info from the RAIL spec and adds it to the prompt.</li> </ol>"},{"location":"examples/syntax_error_free_sql/#step-3-wrap-the-llm-api-call-with-guard","title":"Step 3: Wrap the LLM API call with <code>Guard</code>","text":""},{"location":"examples/text_summarization_quality/","title":"Check key info present in generated summary","text":"<pre><code>!pip install numpy\n</code></pre> <pre>\n<code>Requirement already satisfied: numpy in /Users/krandiash/opt/anaconda3/envs/guardrails/lib/python3.9/site-packages (1.24.2)\n</code>\n</pre> <pre><code>rail_str = \"\"\"\n&lt;rail version=\"0.1\"&gt;\n&lt;script language='python'&gt;\ndocument = open(\"data/article1.txt\", \"r\").read()\n&lt;/script&gt;\n&lt;output&gt;\n    &lt;string\n        name=\"summary\"\n        description=\"Summarize the given document faithfully.\"\n        format=\"similar-to-document: {document}, 0.60\"\n        on-fail-similar-to-document=\"filter\" \n    /&gt;\n&lt;/output&gt;\n&lt;prompt&gt;\nSummarize the following document:\n{{document}}\n@complete_json_suffix\n&lt;/prompt&gt;\n&lt;/rail&gt;\n\"\"\"\n</code></pre> <p>Note</p> <p>In order to ensure the summary is similar to the document, we use <code>similar-to-document</code> as the validator. This validator embeds the document and the summary and checks whether the cosine similarity between the two embeddings is above a threshold.</p> <pre><code>import guardrails as gd\nfrom rich import print\nguard = gd.Guard.from_rail_string(rail_str)\n</code></pre> <p>We see the prompt that will be sent to the LLM:</p> <pre><code>print(guard.base_prompt)\n</code></pre> <pre>\nSummarize the following document:\n\n{document}\n\n\nGiven below is XML that describes the information to extract from this document and the tags to extract it into.\n\n&lt;output&gt;\n    &lt;string name=\"summary\" description=\"Summarize the given document faithfully.\"/&gt;\n&lt;/output&gt;\n\n\nONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the `name` \nattribute of the corresponding XML, and the value is of the type specified by the corresponding XML's tag. The JSON\nMUST conform to the XML format, including any types and format requests e.g. requests for lists, objects and \nspecific types. Be correct and concise. If you are unsure anywhere, enter `None`.\n\nHere are examples of simple (XML, JSON) pairs that show the expected behavior:\n- `&lt;string name='foo' format='two-words lower-case' /&gt;` =&gt; `{{'foo': 'example one'}}`\n- `&lt;list name='bar'&gt;&lt;string format='upper-case' /&gt;&lt;/list&gt;` =&gt; `{{\"bar\": ['STRING ONE', 'STRING TWO', etc.]}}`\n- `&lt;object name='baz'&gt;&lt;string name=\"foo\" format=\"capitalize two-words\" /&gt;&lt;integer name=\"index\" format=\"1-indexed\" /&gt;&lt;/object&gt;` =&gt; `{{'baz': {{'foo': 'Some String', 'index': 1}}}}`\n\nJSON Object:\n\n</pre> <p>Here, <code>statement_to_be_translated</code> is the the statement and will be provided by the user at runtime.</p> <p>First, let's try translating a statement that doesn't have any profanity in it.</p> <pre><code>import openai\nraw_llm_response, validated_response = guard(\nopenai.Completion.create,\nprompt_params={'document': open(\"data/article1.txt\", \"r\").read()},\nengine='text-davinci-003',\nmax_tokens=2048,\ntemperature=0\n)\nprint(f\"Validated Output: {validated_response}\")\n</code></pre> <pre>\n<code>/Users/shreyarajpal/anaconda3/envs/tiff-env/lib/python3.9/site-packages/eliot/json.py:22: FutureWarning: In the future `np.bool` will be defined as the corresponding NumPy scalar.  (This may have returned Python scalars in past versions.\n  if isinstance(o, (numpy.bool, numpy.bool_)):\n</code>\n</pre> <pre>Validated Output: {'summary': 'All legislative powers are vested in a Congress of the United States, which consists\nof a Senate and House of Representatives. The House of Representatives is composed of members chosen every two \nyears by the people of the several states, and must meet certain qualifications. Representatives and direct taxes \nare apportioned among the states according to their respective numbers. The House of Representatives chooses their \nspeaker and other officers, and has the sole power of impeachment. When vacancies happen in the representation from\nany state, the executive authority thereof shall issue writs of election to fill such vacancies.'}\n</pre> <p>In order to see a detailed look into the logs of the <code>Guard</code> object, we can print the <code>Guard</code> state history:</p> <pre><code>print(guard.state.most_recent_call.tree)\n</code></pre> <pre>Logs\n\u2514\u2500\u2500 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Step 0 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n    \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Prompt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 Summarize the following document:                                                                       \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 Section. 1.                                                                                             \u2502 \u2502\n    \u2502 \u2502 All legislative Powers herein granted shall be vested in a Congress of the United States, which shall   \u2502 \u2502\n    \u2502 \u2502 consist of a Senate and House of Representatives.                                                       \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 Section. 2.                                                                                             \u2502 \u2502\n    \u2502 \u2502 The House of Representatives shall be composed of Members chosen every second Year by the People of the \u2502 \u2502\n    \u2502 \u2502 several States, and the Electors in each State shall have the Qualifications requisite for Electors of  \u2502 \u2502\n    \u2502 \u2502 the most numerous Branch of the State Legislature.                                                      \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 No Person shall be a Representative who shall not have attained to the Age of twenty five Years, and    \u2502 \u2502\n    \u2502 \u2502 been seven Years a Citizen of the United States, and who shall not, when elected, be an Inhabitant of   \u2502 \u2502\n    \u2502 \u2502 that State in which he shall be chosen.                                                                 \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 Representatives and direct Taxes shall be apportioned among the several States which may be included    \u2502 \u2502\n    \u2502 \u2502 within this Union, according to their respective Numbers, which shall be determined by adding to the    \u2502 \u2502\n    \u2502 \u2502 whole Number of free Persons, including those bound to Service for a Term of Years, and excluding       \u2502 \u2502\n    \u2502 \u2502 Indians not taxed, three fifths of all other Persons. The actual Enumeration shall be made within three \u2502 \u2502\n    \u2502 \u2502 Years after the first Meeting of the Congress of the United States, and within every subsequent Term of \u2502 \u2502\n    \u2502 \u2502 ten Years, in such Manner as they shall by Law direct. The Number of Representatives shall not exceed   \u2502 \u2502\n    \u2502 \u2502 one for every thirty Thousand, but each State shall have at Least one Representative; and until such    \u2502 \u2502\n    \u2502 \u2502 enumeration shall be made, the State of New Hampshire shall be entitled to chuse three, Massachusetts   \u2502 \u2502\n    \u2502 \u2502 eight, Rhode-Island and Providence Plantations one, Connecticut five, New-York six, New Jersey four,    \u2502 \u2502\n    \u2502 \u2502 Pennsylvania eight, Delaware one, Maryland six, Virginia ten, North Carolina five, South Carolina five, \u2502 \u2502\n    \u2502 \u2502 and Georgia three.                                                                                      \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 When vacancies happen in the Representation from any State, the Executive Authority thereof shall issue \u2502 \u2502\n    \u2502 \u2502 Writs of Election to fill such Vacancies.                                                               \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 The House of Representatives shall chuse their Speaker and other Officers; and shall have the sole      \u2502 \u2502\n    \u2502 \u2502 Power of Impeachment.                                                                                   \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 Given below is XML that describes the information to extract from this document and the tags to extract \u2502 \u2502\n    \u2502 \u2502 it into.                                                                                                \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 &lt;output&gt;                                                                                                \u2502 \u2502\n    \u2502 \u2502     &lt;string name=\"summary\" description=\"Summarize the given document faithfully.\"/&gt;                     \u2502 \u2502\n    \u2502 \u2502 &lt;/output&gt;                                                                                               \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 ONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the \u2502 \u2502\n    \u2502 \u2502 `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding  \u2502 \u2502\n    \u2502 \u2502 XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g.        \u2502 \u2502\n    \u2502 \u2502 requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere,     \u2502 \u2502\n    \u2502 \u2502 enter `None`.                                                                                           \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 Here are examples of simple (XML, JSON) pairs that show the expected behavior:                          \u2502 \u2502\n    \u2502 \u2502 - `&lt;string name='foo' format='two-words lower-case' /&gt;` =&gt; `{'foo': 'example one'}`                     \u2502 \u2502\n    \u2502 \u2502 - `&lt;list name='bar'&gt;&lt;string format='upper-case' /&gt;&lt;/list&gt;` =&gt; `{\"bar\": ['STRING ONE', 'STRING TWO',     \u2502 \u2502\n    \u2502 \u2502 etc.]}`                                                                                                 \u2502 \u2502\n    \u2502 \u2502 - `&lt;object name='baz'&gt;&lt;string name=\"foo\" format=\"capitalize two-words\" /&gt;&lt;integer name=\"index\"          \u2502 \u2502\n    \u2502 \u2502 format=\"1-indexed\" /&gt;&lt;/object&gt;` =&gt; `{'baz': {'foo': 'Some String', 'index': 1}}`                        \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 JSON Object:                                                                                            \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n    \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Raw LLM Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n    \u2502 \u2502 {\"summary\": \"All legislative powers are vested in a Congress of the United States, which consists of a  \u2502 \u2502\n    \u2502 \u2502 Senate and House of Representatives. The House of Representatives is composed of members chosen every   \u2502 \u2502\n    \u2502 \u2502 two years by the people of the several states, and must meet certain qualifications. Representatives    \u2502 \u2502\n    \u2502 \u2502 and direct taxes are apportioned among the states according to their respective numbers. The House of   \u2502 \u2502\n    \u2502 \u2502 Representatives chooses their speaker and other officers, and has the sole power of impeachment. When   \u2502 \u2502\n    \u2502 \u2502 vacancies happen in the representation from any state, the executive authority thereof shall issue      \u2502 \u2502\n    \u2502 \u2502 writs of election to fill such vacancies.\"}                                                             \u2502 \u2502\n    \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n    \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Validated Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n    \u2502 \u2502 {                                                                                                       \u2502 \u2502\n    \u2502 \u2502     'summary': 'All legislative powers are vested in a Congress of the United States, which consists of \u2502 \u2502\n    \u2502 \u2502 a Senate and House of Representatives. The House of Representatives is composed of members chosen every \u2502 \u2502\n    \u2502 \u2502 two years by the people of the several states, and must meet certain qualifications. Representatives    \u2502 \u2502\n    \u2502 \u2502 and direct taxes are apportioned among the states according to their respective numbers. The House of   \u2502 \u2502\n    \u2502 \u2502 Representatives chooses their speaker and other officers, and has the sole power of impeachment. When   \u2502 \u2502\n    \u2502 \u2502 vacancies happen in the representation from any state, the executive authority thereof shall issue      \u2502 \u2502\n    \u2502 \u2502 writs of election to fill such vacancies.'                                                              \u2502 \u2502\n    \u2502 \u2502 }                                                                                                       \u2502 \u2502\n    \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n    \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</pre> <p>The <code>guard</code> wrapper returns the raw_llm_respose (which is a simple string), and the validated and corrected output (which is a dictionary). We can see that the output is a dictionary with the correct schema and types.</p> <p>Next, let's try using a smaller model, which is not boing to be good at summarization. We can see that the output is filtered out.</p> <pre><code>raw_llm_response, validated_response = guard(\nopenai.Completion.create,\nprompt_params={'document': open(\"data/article1.txt\", \"r\").read()},\nengine='text-ada-001',\nmax_tokens=512,\ntemperature=0\n)\nprint(f\"Validated Output: {validated_response}\")\n</code></pre> <pre>Validated Output: None\n</pre> <p>We can see the step-wise history of the <code>Guard</code> object below:</p> <pre><code>print(guard.state.most_recent_call.tree)\n</code></pre> <pre>Logs\n\u2514\u2500\u2500 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Step 0 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n    \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Prompt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 Summarize the following document:                                                                       \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 Section. 1.                                                                                             \u2502 \u2502\n    \u2502 \u2502 All legislative Powers herein granted shall be vested in a Congress of the United States, which shall   \u2502 \u2502\n    \u2502 \u2502 consist of a Senate and House of Representatives.                                                       \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 Section. 2.                                                                                             \u2502 \u2502\n    \u2502 \u2502 The House of Representatives shall be composed of Members chosen every second Year by the People of the \u2502 \u2502\n    \u2502 \u2502 several States, and the Electors in each State shall have the Qualifications requisite for Electors of  \u2502 \u2502\n    \u2502 \u2502 the most numerous Branch of the State Legislature.                                                      \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 No Person shall be a Representative who shall not have attained to the Age of twenty five Years, and    \u2502 \u2502\n    \u2502 \u2502 been seven Years a Citizen of the United States, and who shall not, when elected, be an Inhabitant of   \u2502 \u2502\n    \u2502 \u2502 that State in which he shall be chosen.                                                                 \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 Representatives and direct Taxes shall be apportioned among the several States which may be included    \u2502 \u2502\n    \u2502 \u2502 within this Union, according to their respective Numbers, which shall be determined by adding to the    \u2502 \u2502\n    \u2502 \u2502 whole Number of free Persons, including those bound to Service for a Term of Years, and excluding       \u2502 \u2502\n    \u2502 \u2502 Indians not taxed, three fifths of all other Persons. The actual Enumeration shall be made within three \u2502 \u2502\n    \u2502 \u2502 Years after the first Meeting of the Congress of the United States, and within every subsequent Term of \u2502 \u2502\n    \u2502 \u2502 ten Years, in such Manner as they shall by Law direct. The Number of Representatives shall not exceed   \u2502 \u2502\n    \u2502 \u2502 one for every thirty Thousand, but each State shall have at Least one Representative; and until such    \u2502 \u2502\n    \u2502 \u2502 enumeration shall be made, the State of New Hampshire shall be entitled to chuse three, Massachusetts   \u2502 \u2502\n    \u2502 \u2502 eight, Rhode-Island and Providence Plantations one, Connecticut five, New-York six, New Jersey four,    \u2502 \u2502\n    \u2502 \u2502 Pennsylvania eight, Delaware one, Maryland six, Virginia ten, North Carolina five, South Carolina five, \u2502 \u2502\n    \u2502 \u2502 and Georgia three.                                                                                      \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 When vacancies happen in the Representation from any State, the Executive Authority thereof shall issue \u2502 \u2502\n    \u2502 \u2502 Writs of Election to fill such Vacancies.                                                               \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 The House of Representatives shall chuse their Speaker and other Officers; and shall have the sole      \u2502 \u2502\n    \u2502 \u2502 Power of Impeachment.                                                                                   \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 Given below is XML that describes the information to extract from this document and the tags to extract \u2502 \u2502\n    \u2502 \u2502 it into.                                                                                                \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 &lt;output&gt;                                                                                                \u2502 \u2502\n    \u2502 \u2502     &lt;string name=\"summary\" description=\"Summarize the given document faithfully.\"/&gt;                     \u2502 \u2502\n    \u2502 \u2502 &lt;/output&gt;                                                                                               \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 ONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the \u2502 \u2502\n    \u2502 \u2502 `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding  \u2502 \u2502\n    \u2502 \u2502 XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g.        \u2502 \u2502\n    \u2502 \u2502 requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere,     \u2502 \u2502\n    \u2502 \u2502 enter `None`.                                                                                           \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 Here are examples of simple (XML, JSON) pairs that show the expected behavior:                          \u2502 \u2502\n    \u2502 \u2502 - `&lt;string name='foo' format='two-words lower-case' /&gt;` =&gt; `{'foo': 'example one'}`                     \u2502 \u2502\n    \u2502 \u2502 - `&lt;list name='bar'&gt;&lt;string format='upper-case' /&gt;&lt;/list&gt;` =&gt; `{\"bar\": ['STRING ONE', 'STRING TWO',     \u2502 \u2502\n    \u2502 \u2502 etc.]}`                                                                                                 \u2502 \u2502\n    \u2502 \u2502 - `&lt;object name='baz'&gt;&lt;string name=\"foo\" format=\"capitalize two-words\" /&gt;&lt;integer name=\"index\"          \u2502 \u2502\n    \u2502 \u2502 format=\"1-indexed\" /&gt;&lt;/object&gt;` =&gt; `{'baz': {'foo': 'Some String', 'index': 1}}`                        \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 JSON Object:                                                                                            \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n    \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Raw LLM Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 The string \"None`\" is removed from the list \"baz\" in the example above.                                 \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 The object \"baz\" is created with the value \"Some String\" which is set to \"{'foo': 'Some String',        \u2502 \u2502\n    \u2502 \u2502 'index': 1}\".                                                                                           \u2502 \u2502\n    \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n    \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Validated Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n    \u2502 \u2502 None                                                                                                    \u2502 \u2502\n    \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n    \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</pre>"},{"location":"examples/text_summarization_quality/#summarize-text-accurately","title":"Summarize text accurately","text":"<p>Note</p> <p>To download this example as a Jupyter notebook, click here.</p> <p>In this example, we will use Guardrails in the summarization of a text document. We will check whether the summarized document has a high semantic similarity with the original document.</p>"},{"location":"examples/text_summarization_quality/#objective","title":"Objective","text":"<p>Summarize a text document and check whether the summarized document has a high semantic similarity with the original document.</p>"},{"location":"examples/text_summarization_quality/#step-0-setup","title":"Step 0: Setup","text":"<p>In order to run this example, you will need to install the <code>numpy</code> package. You can do so by running the following commands:</p>"},{"location":"examples/text_summarization_quality/#step-1-create-the-rail-spec","title":"Step 1: Create the RAIL Spec","text":"<p>Ordinarily, we would create an RAIL spec in a separate file. For the purposes of this example, we will create the spec in this notebook as a string following the RAIL syntax. For more information on RAIL, see the RAIL documentation.</p> <p>In this RAIL spec, we:</p> <ol> <li>Create an <code>output</code> schema that returns a single key-value pair. The key should be 'summary', and the value should be the summary of the given document.</li> </ol>"},{"location":"examples/text_summarization_quality/#step-2-create-a-guard-object-with-the-rail-spec","title":"Step 2: Create a <code>Guard</code> object with the RAIL Spec","text":"<p>We create a <code>gd.Guard</code> object that will check, validate and correct the output of the LLM. This object:</p> <ol> <li>Enforces the quality criteria specified in the RAIL spec.</li> <li>Takes corrective action when the quality criteria are not met.</li> <li>Compiles the schema and type info from the RAIL spec and adds it to the prompt.</li> </ol>"},{"location":"examples/text_summarization_quality/#step-3-wrap-the-llm-api-call-with-guard","title":"Step 3: Wrap the LLM API call with <code>Guard</code>","text":""},{"location":"examples/translation_to_specific_language/","title":"Translate text with profanity filtering","text":"<pre><code>!pip install alt-profanity-check\n</code></pre> <pre><code>from profanity_check import predict\n</code></pre> <pre><code>rail_str = \"\"\"\n&lt;rail version=\"0.1\"&gt;\n&lt;script language='python'&gt;\nfrom profanity_check import predict\nfrom guardrails.validators import Validator, EventDetail, register_validator\nfrom typing import Dict, List\n@register_validator(name=\"is-profanity-free\", data_type=\"string\")\nclass IsProfanityFree(Validator):\n    global predict\n    global EventDetail\n    def validate(self, key, value, schema) -&gt; Dict:\n        text = value\n        prediction = predict([value])\n        if prediction[0] == 1:\n            raise EventDetail(\n                key,\n                value,\n                schema,\n                f\"Value {value} contains profanity language\",\n                \"\",\n            )\n        return schema\n&lt;/script&gt;\n&lt;output&gt;\n    &lt;string\n        name=\"translated_statement\"\n        description=\"Translate the given statement into english language\"\n        format=\"is-profanity-free\"\n        on-fail-is-profanity-free=\"fix\" \n    /&gt;\n&lt;/output&gt;\n&lt;prompt&gt;\nTranslate the given statement into english language:\n{{statement_to_be_translated}}\n@complete_json_suffix\n&lt;/prompt&gt;\n&lt;/rail&gt;\n\"\"\"\n</code></pre> <p>Note</p> <p>In order to ensure the translated statement is profanity free, we use <code>is-profanity-free</code> as the validator. This validator uses <code>profanity_check</code> package.</p> <pre><code>import guardrails as gd\nfrom rich import print\nguard = gd.Guard.from_rail_string(rail_str)\n</code></pre> <p>We see the prompt that will be sent to the LLM:</p> <pre><code>print(guard.base_prompt)\n</code></pre> <pre>\n\nTranslate the given statement into english language:\n\n{statement_to_be_translated}\n\n\nGiven below is XML that describes the information to extract from this document and the tags to extract it into.\n\n&lt;output&gt;\n    &lt;string name=\"translated_statement\" description=\"Translate the given statement into english language\" format=\"is-profanity-free: \"/&gt;\n&lt;/output&gt;\n\n\nONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the `name` \nattribute of the corresponding XML, and the value is of the type specified by the corresponding XML's tag. The JSON\nMUST conform to the XML format, including any types and format requests e.g. requests for lists, objects and \nspecific types. Be correct and concise. If you are unsure anywhere, enter `None`.\n\nHere are examples of simple (XML, JSON) pairs that show the expected behavior:\n- `&lt;string name='foo' format='two-words lower-case' /&gt;` =&gt; `{{'foo': 'example one'}}`\n- `&lt;list name='bar'&gt;&lt;string format='upper-case' /&gt;&lt;/list&gt;` =&gt; `{{\"bar\": ['STRING ONE', 'STRING TWO', etc.]}}`\n- `&lt;object name='baz'&gt;&lt;string name=\"foo\" format=\"capitalize two-words\" /&gt;&lt;integer name=\"index\" format=\"1-indexed\" /&gt;&lt;/object&gt;` =&gt; `{{'baz': {{'foo': 'Some String', 'index': 1}}}}`\n\nJSON Object:\n\n</pre> <p>Here, <code>statement_to_be_translated</code> is the the statement and will be provided by the user at runtime.</p> <p>First, let's try translating a statement that doesn't have any profanity in it.</p> <pre><code>import openai\nraw_llm_response, validated_response = guard(\nopenai.Completion.create,\nprompt_params={\"statement_to_be_translated\": \"quesadilla de pollo\"},\nengine=\"text-davinci-003\",\nmax_tokens=2048,\ntemperature=0,\n)\nprint(f\"Validated Output: {validated_response}\")\n</code></pre> <pre>\n<code>/Users/shreyarajpal/anaconda3/envs/tiff-env/lib/python3.9/site-packages/eliot/json.py:22: FutureWarning: In the future `np.bool` will be defined as the corresponding NumPy scalar.  (This may have returned Python scalars in past versions.\n  if isinstance(o, (numpy.bool, numpy.bool_)):\n</code>\n</pre> <pre>Validated Output: {'translated_statement': 'Chicken Quesadilla'}\n</pre> <p>We can take a look at the output of the LLM and the validated output using the Guard's internal logs:</p> <pre><code>print(guard.state.most_recent_call.tree)\n</code></pre> <pre>Logs\n\u2514\u2500\u2500 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Step 0 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n    \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Prompt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 Translate the given statement into english language:                                                    \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 quesadilla de pollo                                                                                     \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 Given below is XML that describes the information to extract from this document and the tags to extract \u2502 \u2502\n    \u2502 \u2502 it into.                                                                                                \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 &lt;output&gt;                                                                                                \u2502 \u2502\n    \u2502 \u2502     &lt;string name=\"translated_statement\" description=\"Translate the given statement into english         \u2502 \u2502\n    \u2502 \u2502 language\" format=\"is-profanity-free: \"/&gt;                                                                \u2502 \u2502\n    \u2502 \u2502 &lt;/output&gt;                                                                                               \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 ONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the \u2502 \u2502\n    \u2502 \u2502 `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding  \u2502 \u2502\n    \u2502 \u2502 XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g.        \u2502 \u2502\n    \u2502 \u2502 requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere,     \u2502 \u2502\n    \u2502 \u2502 enter `None`.                                                                                           \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 Here are examples of simple (XML, JSON) pairs that show the expected behavior:                          \u2502 \u2502\n    \u2502 \u2502 - `&lt;string name='foo' format='two-words lower-case' /&gt;` =&gt; `{'foo': 'example one'}`                     \u2502 \u2502\n    \u2502 \u2502 - `&lt;list name='bar'&gt;&lt;string format='upper-case' /&gt;&lt;/list&gt;` =&gt; `{\"bar\": ['STRING ONE', 'STRING TWO',     \u2502 \u2502\n    \u2502 \u2502 etc.]}`                                                                                                 \u2502 \u2502\n    \u2502 \u2502 - `&lt;object name='baz'&gt;&lt;string name=\"foo\" format=\"capitalize two-words\" /&gt;&lt;integer name=\"index\"          \u2502 \u2502\n    \u2502 \u2502 format=\"1-indexed\" /&gt;&lt;/object&gt;` =&gt; `{'baz': {'foo': 'Some String', 'index': 1}}`                        \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 JSON Object:                                                                                            \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n    \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Raw LLM Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n    \u2502 \u2502 {\"translated_statement\": \"Chicken Quesadilla\"}                                                          \u2502 \u2502\n    \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n    \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Validated Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n    \u2502 \u2502 {'translated_statement': 'Chicken Quesadilla'}                                                          \u2502 \u2502\n    \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n    \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</pre> <p>The <code>guard</code> wrapper returns the raw_llm_respose (which is a simple string), and the validated and corrected output (which is a dictionary). We can see that the output is a dictionary with the correct schema and types.</p> <p>Next, let's try translating a statement that has profanity in it. We see that the translated statement has been corrected to return an empty string instead of the translated statement.</p> <pre><code>raw_llm_response, validated_response = guard(\nopenai.Completion.create,\nprompt_params={\"statement_to_be_translated\": \"\u0443\u0431\u0435\u0439 \u0441\u0435\u0431\u044f\"},\nengine=\"text-davinci-003\",\nmax_tokens=2048,\ntemperature=0,\n)\nprint(f\"Validated Output: {validated_response}\")\n</code></pre> <pre>\n<code>/Users/shreyarajpal/anaconda3/envs/tiff-env/lib/python3.9/site-packages/eliot/json.py:22: FutureWarning: In the future `np.bool` will be defined as the corresponding NumPy scalar.  (This may have returned Python scalars in past versions.\n  if isinstance(o, (numpy.bool, numpy.bool_)):\n</code>\n</pre> <pre>Validated Output: {'translated_statement': ''}\n</pre> <p>This time around, when we look at the logs, we can see that the output of the LLM was filtered out because it did not pass the profanity check.</p> <pre><code>print(guard.state.most_recent_call.tree)\n</code></pre> <pre>Logs\n\u2514\u2500\u2500 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Step 0 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n    \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Prompt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 Translate the given statement into english language:                                                    \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 \u0443\u0431\u0435\u0439 \u0441\u0435\u0431\u044f                                                                                               \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 Given below is XML that describes the information to extract from this document and the tags to extract \u2502 \u2502\n    \u2502 \u2502 it into.                                                                                                \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 &lt;output&gt;                                                                                                \u2502 \u2502\n    \u2502 \u2502     &lt;string name=\"translated_statement\" description=\"Translate the given statement into english         \u2502 \u2502\n    \u2502 \u2502 language\" format=\"is-profanity-free: \"/&gt;                                                                \u2502 \u2502\n    \u2502 \u2502 &lt;/output&gt;                                                                                               \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 ONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the \u2502 \u2502\n    \u2502 \u2502 `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding  \u2502 \u2502\n    \u2502 \u2502 XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g.        \u2502 \u2502\n    \u2502 \u2502 requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere,     \u2502 \u2502\n    \u2502 \u2502 enter `None`.                                                                                           \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 Here are examples of simple (XML, JSON) pairs that show the expected behavior:                          \u2502 \u2502\n    \u2502 \u2502 - `&lt;string name='foo' format='two-words lower-case' /&gt;` =&gt; `{'foo': 'example one'}`                     \u2502 \u2502\n    \u2502 \u2502 - `&lt;list name='bar'&gt;&lt;string format='upper-case' /&gt;&lt;/list&gt;` =&gt; `{\"bar\": ['STRING ONE', 'STRING TWO',     \u2502 \u2502\n    \u2502 \u2502 etc.]}`                                                                                                 \u2502 \u2502\n    \u2502 \u2502 - `&lt;object name='baz'&gt;&lt;string name=\"foo\" format=\"capitalize two-words\" /&gt;&lt;integer name=\"index\"          \u2502 \u2502\n    \u2502 \u2502 format=\"1-indexed\" /&gt;&lt;/object&gt;` =&gt; `{'baz': {'foo': 'Some String', 'index': 1}}`                        \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 JSON Object:                                                                                            \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n    \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Raw LLM Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n    \u2502 \u2502 {\"translated_statement\": \"Kill yourself\"}                                                               \u2502 \u2502\n    \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n    \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Validated Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n    \u2502 \u2502 {'translated_statement': ''}                                                                            \u2502 \u2502\n    \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n    \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</pre>"},{"location":"examples/translation_to_specific_language/#translate-text-without-profanities","title":"Translate text without profanities","text":"<p>Note</p> <p>To download this example as a Jupyter notebook, click here.</p> <p>In this example, we will use Guardrails during the translation of a statement from another language to english. We will check whether the translated statement passes the profanity check or not.</p>"},{"location":"examples/translation_to_specific_language/#objective","title":"Objective","text":"<p>We want to translate a statement from another languages to English and ensure the translated statement is profanity free.</p>"},{"location":"examples/translation_to_specific_language/#step-0-setup","title":"Step 0: Setup","text":"<p>In order to run this example, you will need to install <code>alt-profanity-check</code> package. You can do so by running the following commands:</p>"},{"location":"examples/translation_to_specific_language/#step-1-create-the-rail-spec","title":"Step 1: Create the RAIL Spec","text":"<p>Ordinarily, we would create an RAIL spec in a separate file. For the purposes of this example, we will create the spec in this notebook as a string following the RAIL syntax. For more information on RAIL, see the RAIL documentation.</p> <p>In this RAIL spec, we:</p> <ol> <li>Create an <code>output</code> schema that returns a single key-value pair. The key should be 'translated_statement', and the value should be the English translation of the given statement. The translated statement should not have any profanity.</li> </ol>"},{"location":"examples/translation_to_specific_language/#step-2-create-a-guard-object-with-the-rail-spec","title":"Step 2: Create a <code>Guard</code> object with the RAIL Spec","text":"<p>We create a <code>gd.Guard</code> object that will check, validate and correct the output of the LLM. This object:</p> <ol> <li>Enforces the quality criteria specified in the RAIL spec.</li> <li>Takes corrective action when the quality criteria are not met.</li> <li>Compiles the schema and type info from the RAIL spec and adds it to the prompt.</li> </ol>"},{"location":"examples/translation_to_specific_language/#step-3-wrap-the-llm-api-call-with-guard","title":"Step 3: Wrap the LLM API call with <code>Guard</code>","text":""},{"location":"examples/translation_with_quality_check/","title":"Ensure translated text is high quality","text":"<pre><code>!pip install inspiredco\n</code></pre> <pre><code>from inspiredco import critique\n</code></pre> <pre><code>rail_str = \"\"\"\n&lt;rail version=\"0.1\"&gt;\n&lt;script language='python'&gt;\nimport inspiredco.critique\nimport os\nfrom guardrails.validators import Validator, EventDetail, register_validator\ncritique = inspiredco.critique.Critique(api_key=os.environ['INSPIREDCO_API_KEY'])\nfrom typing import Dict, List\n@register_validator(name=\"is-high-quality-translation\", data_type=\"string\")\nclass IsHighQualityTranslation(Validator):\n    global critique\n    global EventDetail\n    def validate(self, key, value, schema) -&gt; Dict:\n        prediction = critique.evaluate(\n            metric = \"comet\",\n            config = {\"model\": \"unbabel_comet/wmt21-comet-qe-da\"},\n            dataset = [{\"source\": key, \"target\": value}],\n        )\n        quality = prediction[\"examples\"][0][\"value\"]\n        if quality &amp;lt; -0.1:\n            raise EventDetail(\n                key,\n                value,\n                schema,\n                f\"Value {value} has relatively low quality {quality}\",\n                \"\",\n            )\n        return schema\n&lt;/script&gt;\n&lt;output&gt;\n    &lt;string\n        name=\"translated_statement\"\n        description=\"Translate the given statement into the English language\"\n        format=\"is-high-quality-translation\"\n        on-fail-is-high-quality-translation=\"fix\" \n    /&gt;\n&lt;/output&gt;\n&lt;prompt&gt;\nTranslate the given statement into the English language:\n{{statement_to_be_translated}}\n@complete_json_suffix\n&lt;/prompt&gt;\n&lt;/rail&gt;\n\"\"\"\n</code></pre> <p>Note</p> <p>In order to ensure the translated statement is high quality, we use <code>is-high-quality-translation</code> as the validator. This validator uses <code>inspiredco</code> package.</p> <pre><code>import guardrails as gd\nfrom rich import print\nguard = gd.Guard.from_rail_string(rail_str)\n</code></pre> <p>We see the prompt that will be sent to the LLM:</p> <pre><code>print(guard.base_prompt)\n</code></pre> <pre>\n\nTranslate the given statement into the English language:\n\n{statement_to_be_translated}\n\n\nGiven below is XML that describes the information to extract from this document and the tags to extract it into.\n\n&lt;output&gt;\n    &lt;string name=\"translated_statement\" description=\"Translate the given statement into the English language\" format=\"is-high-quality-translation: \"/&gt;\n&lt;/output&gt;\n\n\nONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the `name` \nattribute of the corresponding XML, and the value is of the type specified by the corresponding XML's tag. The JSON\nMUST conform to the XML format, including any types and format requests e.g. requests for lists, objects and \nspecific types. Be correct and concise. If you are unsure anywhere, enter `None`.\n\nHere are examples of simple (XML, JSON) pairs that show the expected behavior:\n- `&lt;string name='foo' format='two-words lower-case' /&gt;` =&gt; `{{'foo': 'example one'}}`\n- `&lt;list name='bar'&gt;&lt;string format='upper-case' /&gt;&lt;/list&gt;` =&gt; `{{\"bar\": ['STRING ONE', 'STRING TWO', etc.]}}`\n- `&lt;object name='baz'&gt;&lt;string name=\"foo\" format=\"capitalize two-words\" /&gt;&lt;integer name=\"index\" format=\"1-indexed\" /&gt;&lt;/object&gt;` =&gt; `{{'baz': {{'foo': 'Some String', 'index': 1}}}}`\n\nJSON Object:\n\n</pre> <p>Here, <code>statement_to_be_translated</code> is the the statement and will be provided by the user at runtime.</p> <p>First, let's try translating a statement that is relatively easy to translate.</p> <pre><code>import openai\nraw_llm_response, validated_response = guard(\nopenai.Completion.create,\nprompt_params={'statement_to_be_translated': '\u3053\u308c\u306f\u7c21\u5358\u306b\u7ffb\u8a33\u3067\u304d\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u3002'},\nengine='text-davinci-003',\nmax_tokens=2048,\ntemperature=0\n)\nprint(f\"Validated Output: {validated_response}\")\n</code></pre> <pre>\n<code>/Users/shreyarajpal/anaconda3/envs/tiff-env/lib/python3.9/site-packages/eliot/json.py:22: FutureWarning: In the future `np.bool` will be defined as the corresponding NumPy scalar.  (This may have returned Python scalars in past versions.\n  if isinstance(o, (numpy.bool, numpy.bool_)):\n</code>\n</pre> <pre>Validated Output: {'translated_statement': 'This may be easy to translate.'}\n</pre> <p>We can look at the logs to see the quality check results:</p> <pre><code>print(guard.state.most_recent_call.tree)\n</code></pre> <pre>Logs\n\u2514\u2500\u2500 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Step 0 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n    \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Prompt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 Translate the given statement into the English language:                                                \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 \u3053\u308c\u306f\u7c21\u5358\u306b\u7ffb\u8a33\u3067\u304d\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u3002                                                                    \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 Given below is XML that describes the information to extract from this document and the tags to extract \u2502 \u2502\n    \u2502 \u2502 it into.                                                                                                \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 &lt;output&gt;                                                                                                \u2502 \u2502\n    \u2502 \u2502     &lt;string name=\"translated_statement\" description=\"Translate the given statement into the English     \u2502 \u2502\n    \u2502 \u2502 language\" format=\"is-high-quality-translation: \"/&gt;                                                      \u2502 \u2502\n    \u2502 \u2502 &lt;/output&gt;                                                                                               \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 ONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the \u2502 \u2502\n    \u2502 \u2502 `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding  \u2502 \u2502\n    \u2502 \u2502 XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g.        \u2502 \u2502\n    \u2502 \u2502 requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere,     \u2502 \u2502\n    \u2502 \u2502 enter `None`.                                                                                           \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 Here are examples of simple (XML, JSON) pairs that show the expected behavior:                          \u2502 \u2502\n    \u2502 \u2502 - `&lt;string name='foo' format='two-words lower-case' /&gt;` =&gt; `{'foo': 'example one'}`                     \u2502 \u2502\n    \u2502 \u2502 - `&lt;list name='bar'&gt;&lt;string format='upper-case' /&gt;&lt;/list&gt;` =&gt; `{\"bar\": ['STRING ONE', 'STRING TWO',     \u2502 \u2502\n    \u2502 \u2502 etc.]}`                                                                                                 \u2502 \u2502\n    \u2502 \u2502 - `&lt;object name='baz'&gt;&lt;string name=\"foo\" format=\"capitalize two-words\" /&gt;&lt;integer name=\"index\"          \u2502 \u2502\n    \u2502 \u2502 format=\"1-indexed\" /&gt;&lt;/object&gt;` =&gt; `{'baz': {'foo': 'Some String', 'index': 1}}`                        \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 JSON Object:                                                                                            \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n    \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Raw LLM Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n    \u2502 \u2502 {\"translated_statement\": \"This may be easy to translate.\"}                                              \u2502 \u2502\n    \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n    \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Validated Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n    \u2502 \u2502 {'translated_statement': 'This may be easy to translate.'}                                              \u2502 \u2502\n    \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n    \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</pre> <p>The <code>guard</code> wrapper returns the raw_llm_respose (which is a simple string), and the validated and corrected output (which is a dictionary). We can see that the output is a dictionary with the correct schema and types.</p> <p>Next, let's try translating a statement that is harder to translate (because it contains some difficult-to-translate slang words). We see that the translated statement has been corrected to return an empty string instead of the translated statement.</p> <pre><code>raw_llm_response, validated_response = guard(\nopenai.Completion.create,\nprompt_params={'statement_to_be_translated': '\u30c9\u30f3\u5f15\u304d\u3059\u308b\u307b\u3069\u7ffb\u8a33\u304c\u60aa\u3044\u3002'},\nengine='text-davinci-003',\nmax_tokens=2048,\ntemperature=0\n)\nprint(f\"Validated Output: {validated_response}\")\n</code></pre> <pre>\n<code>/Users/shreyarajpal/anaconda3/envs/tiff-env/lib/python3.9/site-packages/eliot/json.py:22: FutureWarning: In the future `np.bool` will be defined as the corresponding NumPy scalar.  (This may have returned Python scalars in past versions.\n  if isinstance(o, (numpy.bool, numpy.bool_)):\n</code>\n</pre> <pre>Validated Output: {'translated_statement': ''}\n</pre> <p>This time, we see that the quality check failed in the logs, and the translated statement is an empty string.</p> <pre><code>print(guard.state.most_recent_call.tree)\n</code></pre> <pre>Logs\n\u2514\u2500\u2500 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Step 0 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n    \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Prompt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 Translate the given statement into the English language:                                                \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 \u30c9\u30f3\u5f15\u304d\u3059\u308b\u307b\u3069\u7ffb\u8a33\u304c\u60aa\u3044\u3002                                                                            \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 Given below is XML that describes the information to extract from this document and the tags to extract \u2502 \u2502\n    \u2502 \u2502 it into.                                                                                                \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 &lt;output&gt;                                                                                                \u2502 \u2502\n    \u2502 \u2502     &lt;string name=\"translated_statement\" description=\"Translate the given statement into the English     \u2502 \u2502\n    \u2502 \u2502 language\" format=\"is-high-quality-translation: \"/&gt;                                                      \u2502 \u2502\n    \u2502 \u2502 &lt;/output&gt;                                                                                               \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 ONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the \u2502 \u2502\n    \u2502 \u2502 `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding  \u2502 \u2502\n    \u2502 \u2502 XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g.        \u2502 \u2502\n    \u2502 \u2502 requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere,     \u2502 \u2502\n    \u2502 \u2502 enter `None`.                                                                                           \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 Here are examples of simple (XML, JSON) pairs that show the expected behavior:                          \u2502 \u2502\n    \u2502 \u2502 - `&lt;string name='foo' format='two-words lower-case' /&gt;` =&gt; `{'foo': 'example one'}`                     \u2502 \u2502\n    \u2502 \u2502 - `&lt;list name='bar'&gt;&lt;string format='upper-case' /&gt;&lt;/list&gt;` =&gt; `{\"bar\": ['STRING ONE', 'STRING TWO',     \u2502 \u2502\n    \u2502 \u2502 etc.]}`                                                                                                 \u2502 \u2502\n    \u2502 \u2502 - `&lt;object name='baz'&gt;&lt;string name=\"foo\" format=\"capitalize two-words\" /&gt;&lt;integer name=\"index\"          \u2502 \u2502\n    \u2502 \u2502 format=\"1-indexed\" /&gt;&lt;/object&gt;` =&gt; `{'baz': {'foo': 'Some String', 'index': 1}}`                        \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 JSON Object:                                                                                            \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n    \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Raw LLM Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n    \u2502 \u2502 {\"translated_statement\": \"It's so bad that it's a letdown.\"}                                            \u2502 \u2502\n    \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n    \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Validated Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n    \u2502 \u2502 {'translated_statement': ''}                                                                            \u2502 \u2502\n    \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n    \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</pre>"},{"location":"examples/translation_with_quality_check/#translate-text-with-quality-checks","title":"Translate text with quality checks","text":"<p>Note</p> <p>To download this example as a Jupyter notebook, click here.</p> <p>In this example, we will use Guardrails during the translation of a statement from another language to English. We will check whether the translated statement is likely high quality or not.</p>"},{"location":"examples/translation_with_quality_check/#objective","title":"Objective","text":"<p>We want to translate a statement from another languages to English and ensure that the translated statement accurately reflects the original content.</p>"},{"location":"examples/translation_with_quality_check/#step-0-setup","title":"Step 0: Setup","text":"<p>To do the quality check, we can use the Critique library, which allows for simple calculation of various metrics over generated text, including translation quality estimation.</p> <p>First you can get an API key from the Inspired Cognition Dashboard add the following line to the \".env\" file in your top directory (like you do for your OpenAI API key).</p> <pre><code>INSPIREDCO_API_KEY=&lt;your_api_key&gt;\n</code></pre> <p>Then you can install the library</p>"},{"location":"examples/translation_with_quality_check/#step-1-create-the-rail-spec","title":"Step 1: Create the RAIL Spec","text":"<p>Ordinarily, we would create an RAIL spec in a separate file. For the purposes of this example, we will create the spec in this notebook as a string following the RAIL syntax. For more information on RAIL, see the RAIL documentation.</p> <p>In this RAIL spec, we:</p> <ol> <li>Create an <code>output</code> schema that returns a single key-value pair. The key should be 'translated_statement', and the value should be the English translation of the given statement. The translated statement should not have any profanity.</li> </ol>"},{"location":"examples/translation_with_quality_check/#step-2-create-a-guard-object-with-the-rail-spec","title":"Step 2: Create a <code>Guard</code> object with the RAIL Spec","text":"<p>We create a <code>gd.Guard</code> object that will check, validate and correct the output of the LLM. This object:</p> <ol> <li>Enforces the quality criteria specified in the RAIL spec.</li> <li>Takes corrective action when the quality criteria are not met.</li> <li>Compiles the schema and type info from the RAIL spec and adds it to the prompt.</li> </ol>"},{"location":"examples/translation_with_quality_check/#step-3-wrap-the-llm-api-call-with-guard","title":"Step 3: Wrap the LLM API call with <code>Guard</code>","text":""},{"location":"examples/valid_chess_moves/","title":"Using GPT to play valid chess moves","text":"<pre><code>import guardrails as gd\nfrom rich import print\n</code></pre> <pre><code>!pip install chess\n</code></pre> <pre><code>rail_str = \"\"\"\n&lt;rail version=\"0.1\"&gt;\n&lt;script language='python'&gt;\nfrom dataclasses import dataclass\nfrom guardrails.validators import Validator, EventDetail, register_validator\nimport re\nfrom typing import Dict, List\nimport chess\nBOARD = chess.Board()\n@register_validator(name=\"is-valid-chess-move\", data_type=\"string\")\nclass IsValidChessMove(Validator):\n    board = BOARD\n    def validate(self, key, value, schema) -&gt; Dict:\n        global BOARD\n        try:\n            # Push the move onto the board.\n            BOARD.push_san(value)\n        except Exception as e:\n            # If the move is invalid, raise an error.\n            raise EventDetail(\n                key,\n                value,\n                schema,\n                f\"Value {value} is not a valid chess move. {e}\",\n                None,\n            )        \n        return schema\n&lt;/script&gt;\n&lt;output&gt;\n    &lt;string description=\"A move in standard algebraic notation.\" name=\"move\" required=\"true\" format=\"is-valid-chess-move\" on-fail-is-valid-chess-move=\"reask\" /&gt;\n&lt;/output&gt;\n&lt;prompt&gt;\nGenerate a move for the chess board. The board is currently in the following state:\n{{board_state}}\n@complete_json_suffix\n&lt;/prompt&gt;\n&lt;/rail&gt;\n\"\"\"\n</code></pre> <pre><code>guard = gd.Guard.from_rail_string(rail_str)\n</code></pre> <p>We see the prompt that will be sent to the LLM. The <code>{board_state}</code> is substituted with the current state of the board.</p> <pre><code>print(guard.base_prompt)\n</code></pre> <pre>\nGenerate a move for the chess board. The board is currently in the following state:\n{board_state}\n\nGiven below is XML that describes the information to extract from this document and the tags to extract it into.\n\n&lt;output&gt;\n    &lt;string description=\"A move in standard algebraic notation.\" name=\"move\" required=\"true\" format=\"is-valid-chess-move\"/&gt;\n&lt;/output&gt;\n\n\n\n\nONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the `name` \nattribute of the corresponding XML, and the value is of the type specified by the corresponding XML's tag. The JSON\nMUST conform to the XML format, including any types and format requests e.g. requests for lists, objects and \nspecific types. Be correct and concise. If you are unsure anywhere, enter `None`.\n\nHere are examples of simple (XML, JSON) pairs that show the expected behavior:\n- `&lt;string name='foo' format='two-words lower-case' /&gt;` =&gt; `{{'foo': 'example one'}}`\n- `&lt;list name='bar'&gt;&lt;string format='upper-case' /&gt;&lt;/list&gt;` =&gt; `{{\"bar\": ['STRING ONE', 'STRING TWO', etc.]}}`\n- `&lt;object name='baz'&gt;&lt;string name=\"foo\" format=\"capitalize two-words\" /&gt;&lt;integer name=\"index\" format=\"1-indexed\" /&gt;&lt;/object&gt;` =&gt; `{{'baz': {{'foo': 'Some String', 'index': 1}}}}`\n\nJSON Object:\n\n</pre> <p>Let's get the reference to the board.</p> <pre><code>board = guard.output_schema.move.validators[0].board\nboard\n</code></pre> <pre>r n b q k b n r\np p p p p p p p\n. . . . . . . .\n. . . . . . . .\n. . . . . . . .\n. . . . . . . .\nP P P P P P P P\nR N B Q K B N R</pre> <pre><code>import openai\nraw_llm_response, validated_response = guard(\nopenai.Completion.create,\nprompt_params={\n\"board_state\": str(board.move_stack)\nif board.move_stack\nelse \"Starting position.\"\n},\nengine=\"text-davinci-003\",\nmax_tokens=2048,\ntemperature=0.3,\n)\n</code></pre> <p>The <code>guard</code> wrapper returns the raw_llm_respose (which is a simple string), and the validated and corrected output (which is a dictionary).</p> <p>We can see that the output is a dictionary with the correct schema and types.</p> <pre><code>print(validated_response)\n</code></pre> <pre>{'move': 'e4'}\n</pre> <pre><code>board\n</code></pre> <pre>r n b q k b n r\np p p p p p p p\n. . . . . . . .\n. . . . . . . .\n. . . . P . . .\n. . . . . . . .\nP P P P . P P P\nR N B Q K B N R</pre> <p>Let's make a move.</p> <pre><code>board.push_san(\"e5\")\nboard\n</code></pre> <pre>r n b q k b n r\np p p p . p p p\n. . . . . . . .\n. . . . p . . .\n. . . . P . . .\n. . . . . . . .\nP P P P . P P P\nR N B Q K B N R</pre> <p>Ask for another move from the model.</p> <pre><code>raw_llm_response, validated_response = guard(\nopenai.Completion.create,\nprompt_params={\n\"board_state\": str(board.move_stack)\nif board.move_stack\nelse \"Starting position.\"\n},\nengine=\"text-davinci-003\",\nmax_tokens=2048,\ntemperature=0.3,\n)\n</code></pre> <pre><code>board\n</code></pre> <pre>r n b q k b n r\np p p p . p p p\n. . . . . . . .\n. . . . p . . .\n. . . . P . . .\n. . . . . N . .\nP P P P . P P P\nR N B Q K B . R</pre> <pre><code>board.push_san(\"Nc6\")\nboard\n</code></pre> <pre>r . b q k b n r\np p p p . p p p\n. . n . . . . .\n. . . . p . . .\n. . . . P . . .\n. . . . . N . .\nP P P P . P P P\nR N B Q K B . R</pre>"},{"location":"examples/valid_chess_moves/#playing-valid-chess-moves","title":"Playing Valid Chess Moves","text":"<p>Note</p> <p>To download this example as a Jupyter notebook, click here.</p> <p>Warning</p> <p>This example is currently under development (it cannot be used to play a full chess game yet).</p> <p>In this example, we will use Guardrails to play chess with an LLM and ensure that it makes valid moves.</p>"},{"location":"examples/valid_chess_moves/#objective","title":"Objective","text":"<p>We want to generate a valid chess moves for a given board state.</p>"},{"location":"examples/valid_chess_moves/#step-1-create-the-rail-spec","title":"Step 1: Create the RAIL Spec","text":"<p>Ordinarily, we would create an RAIL spec in a separate file. For the purposes of this example, we will create the spec in this notebook as a string following the RAIL syntax. For more information on RAIL, see the RAIL documentation.</p> <p>Here, we request:</p>"},{"location":"examples/valid_chess_moves/#step-2-create-a-guard-object-with-the-rail-spec","title":"Step 2: Create a <code>Guard</code> object with the RAIL Spec","text":"<p>We create a <code>gd.Guard</code> object that will check, validate and correct the output of the LLM. This object:</p> <ol> <li>Enforces the quality criteria specified in the RAIL spec.</li> <li>Takes corrective action when the quality criteria are not met.</li> <li>Compiles the schema and type info from the RAIL spec and adds it to the prompt.</li> </ol>"},{"location":"examples/valid_chess_moves/#step-3-wrap-the-llm-api-call-with-guard","title":"Step 3: Wrap the LLM API call with <code>Guard</code>","text":""},{"location":"integrations/langchain/","title":"LangChain","text":"<pre><code>!pip install guardrails-ai\n!pip install langchain\n</code></pre> <pre><code>rail_spec = \"\"\"\n&lt;rail version=\"0.1\"&gt;\n&lt;output&gt;\n    &lt;object name=\"patient_info\"&gt;\n        &lt;string name=\"gender\" description=\"Patient's gender\" /&gt;\n        &lt;integer name=\"age\" format=\"valid-range: 0 100\" /&gt;\n        &lt;string name=\"symptoms\" description=\"Symptoms that the patient is currently experiencing\" /&gt;\n    &lt;/object&gt;\n&lt;/output&gt;\n&lt;prompt&gt;\nGiven the following doctor's notes about a patient, please extract a dictionary that contains the patient's information.\n{{doctors_notes}}\n@complete_json_suffix_v2\n&lt;/prompt&gt;\n&lt;/rail&gt;\n\"\"\"\n</code></pre> <pre><code>from rich import print\nfrom langchain.output_parsers import GuardrailsOutputParser\nfrom langchain.prompts import PromptTemplate\nfrom langchain.llms import OpenAI\n</code></pre> <pre><code>output_parser = GuardrailsOutputParser.from_rail_string(rail_spec)\n</code></pre> <p>The <code>GuardrailsOutputParser</code> contains a <code>Guard</code> object, which can be used to access the prompt and output schema. E.g., here is the compiled prompt that is stored in <code>GuardrailsOutputParser</code>:</p> <pre><code>print(output_parser.guard.base_prompt)\n</code></pre> <pre>\n\nGiven the following doctor's notes about a patient, please extract a dictionary that contains the patient's \ninformation.\n\n{doctors_notes}\n\n\nGiven below is XML that describes the information to extract from this document and the tags to extract it into.\n\n&lt;output&gt;\n    &lt;object name=\"patient_info\"&gt;\n        &lt;string name=\"gender\" description=\"Patient's gender\"/&gt;\n        &lt;integer name=\"age\" format=\"valid-range: 0 100\"/&gt;\n        &lt;string name=\"symptoms\" description=\"Symptoms that the patient is currently experiencing\"/&gt;\n    &lt;/object&gt;\n&lt;/output&gt;\n\nONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the `name` \nattribute of the corresponding XML, and the value is of the type specified by the corresponding XML's tag. The JSON\nMUST conform to the XML format, including any types and format requests e.g. requests for lists, objects and \nspecific types. Be correct and concise.\n\nHere are examples of simple (XML, JSON) pairs that show the expected behavior:\n- `&lt;string name='foo' format='two-words lower-case' /&gt;` =&gt; `{{'foo': 'example one'}}`\n- `&lt;list name='bar'&gt;&lt;string format='upper-case' /&gt;&lt;/list&gt;` =&gt; `{{\"bar\": ['STRING ONE', 'STRING TWO', etc.]}}`\n- `&lt;object name='baz'&gt;&lt;string name=\"foo\" format=\"capitalize two-words\" /&gt;&lt;integer name=\"index\" format=\"1-indexed\" /&gt;&lt;/object&gt;` =&gt; `{{'baz': {{'foo': 'Some String', 'index': 1}}}}`\n\nJSON Object:\n\n</pre> <p>We can now create a LangChain <code>PromptTemplate</code> from this output parser.</p> <pre><code>prompt = PromptTemplate(\ntemplate=output_parser.guard.base_prompt,\ninput_variables=output_parser.guard.prompt.variable_names,\n)\n</code></pre> <pre><code>model = OpenAI(temperature=0)\ndoctors_notes = \"\"\"\n49 y/o Male with chronic macular rash to face &amp; hair, worse in beard, eyebrows &amp; nares.\nItchy, flaky, slightly scaly. Moderate response to OTC steroid cream\n\"\"\"\noutput = model(prompt.format_prompt(doctors_notes=doctors_notes).to_string())\n</code></pre> <pre><code>print(output_parser.parse(output))\n</code></pre> <pre>\n<code>/Users/shreyarajpal/anaconda3/envs/tiff-env/lib/python3.9/site-packages/eliot/json.py:22: FutureWarning: In the future `np.bool` will be defined as the corresponding NumPy scalar.  (This may have returned Python scalars in past versions.\n  if isinstance(o, (numpy.bool, numpy.bool_)):\n</code>\n</pre> <pre>{\n    'gender': 'Male',\n    'age': 49,\n    'symptoms': 'Chronic macular rash to face &amp; hair, worse in beard, eyebrows &amp; nares. Itchy, flaky, slightly \nscaly. Moderate response to OTC steroid cream'\n}\n</pre> <pre><code>\n</code></pre>"},{"location":"integrations/langchain/#use-guardrails-from-langchain","title":"Use Guardrails from LangChain","text":"<p>You can use Guardrails to add a layer of security around LangChain components. Here's how to use Guardrails with LangChain.</p>"},{"location":"integrations/langchain/#installing-dependencies","title":"Installing dependencies","text":"<p>Make sure you have both langchain and guardrails installed. If you don't, run the following commands:</p>"},{"location":"integrations/langchain/#create-a-rail-spec","title":"Create a <code>RAIL</code> spec","text":""},{"location":"integrations/langchain/#create-a-guardrailsoutputparser","title":"Create a <code>GuardrailsOutputParser</code>","text":""},{"location":"integrations/langchain/#create-prompt-template","title":"Create Prompt Template","text":""},{"location":"integrations/langchain/#query-the-llm-and-get-formatted-validated-and-corrected-output","title":"Query the LLM and get formatted, validated and corrected output","text":""},{"location":"integrations/pydantic_validation/","title":"Pydantic","text":"<pre><code>import guardrails as gd\nfrom rich import print\n</code></pre> <pre><code>rail_str = \"\"\"\n&lt;rail version=\"0.1\"&gt;\n&lt;script language=\"python\"&gt;\nfrom guardrails.utils.pydantic_utils import register_pydantic\nfrom pydantic import BaseModel, validator\n@register_pydantic\nclass Person(BaseModel):\n    '''\n    Information about a person.\n    Args:\n        name (str): The name of the person.\n        age (int): The age of the person.\n        zip_code (str): The zip code of the person.\n    '''\n    name: str\n    age: int\n    zip_code: str\n    @validator(\"zip_code\")\n    def zip_code_must_be_numeric(cls, v):\n        if not v.isnumeric():\n            raise ValueError(\"Zip code must be numeric.\")\n        return v\n    @validator(\"age\")\n    def age_must_be_between_0_and_150(cls, v):\n        if not 0 &amp;lt;= v &amp;lt;= 150:\n            raise ValueError(\"Age must be between 0 and 150.\")\n        return v\n    @validator(\"zip_code\")\n    def zip_code_in_california(cls, v):\n        if not v.startswith(\"9\"):\n            raise ValueError(\"Zip code must be in California, and start with 9.\")\n        if v == \"90210\":\n            raise ValueError(\"Zip code must not be Beverly Hills.\")\n        return v\n&lt;/script&gt;\n&lt;output&gt;\n    &lt;list name=\"people\" description=\"A list of 3 people.\"&gt;\n        &lt;pydantic description=\"Information about a person.\" model=\"Person\" on-fail-pydantic=\"reask\" /&gt;\n    &lt;/list&gt;\n&lt;/output&gt;\n&lt;prompt&gt;\nGenerate data for possible users in accordance with the specification below.\n@xml_prefix_prompt\n{output_schema}\n@complete_json_suffix_v2&lt;/prompt&gt;\n&lt;/rail&gt;\n\"\"\"\n</code></pre> <pre><code>guard = gd.Guard.from_rail_string(rail_str)\n</code></pre> <p>We see the prompt that will be sent to the LLM.</p> <pre><code>print(guard.base_prompt)\n</code></pre> <pre>\nGenerate data for possible users in accordance with the specification below.\n\n\nGiven below is XML that describes the information to extract from this document and the tags to extract it into.\n\n\n&lt;output&gt;\n    &lt;list name=\"people\" description=\"A list of 3 people.\"&gt;\n        &lt;object description=\"Information about a person.\" pydantic=\"Person\"&gt;&lt;string name=\"name\" description=\"The \nname of the person.\"/&gt;&lt;integer name=\"age\" description=\"The age of the person.\" format=\"age-must-be-between-0-and-150\"/&gt;&lt;string name=\"zip_code\" description=\"The zip code of the person.\" format=\"zip-code-must-be-numeric; zip-code-in-california\"/&gt;&lt;/object&gt;&lt;/list&gt;\n&lt;/output&gt;\n\n\nGiven below is XML that describes the information to extract from this document and the tags to extract it into.\n\n&lt;output&gt;\n    &lt;list name=\"people\" description=\"A list of 3 people.\"&gt;\n        &lt;object description=\"Information about a person.\" pydantic=\"Person\"&gt;&lt;string name=\"name\" description=\"The \nname of the person.\"/&gt;&lt;integer name=\"age\" description=\"The age of the person.\" format=\"age-must-be-between-0-and-150\"/&gt;&lt;string name=\"zip_code\" description=\"The zip code of the person.\" format=\"zip-code-must-be-numeric; zip-code-in-california\"/&gt;&lt;/object&gt;&lt;/list&gt;\n&lt;/output&gt;\n\nONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the `name` \nattribute of the corresponding XML, and the value is of the type specified by the corresponding XML's tag. The JSON\nMUST conform to the XML format, including any types and format requests e.g. requests for lists, objects and \nspecific types. Be correct and concise.\n\nHere are examples of simple (XML, JSON) pairs that show the expected behavior:\n- `&lt;string name='foo' format='two-words lower-case' /&gt;` =&gt; `{{'foo': 'example one'}}`\n- `&lt;list name='bar'&gt;&lt;string format='upper-case' /&gt;&lt;/list&gt;` =&gt; `{{\"bar\": ['STRING ONE', 'STRING TWO', etc.]}}`\n- `&lt;object name='baz'&gt;&lt;string name=\"foo\" format=\"capitalize two-words\" /&gt;&lt;integer name=\"index\" format=\"1-indexed\" /&gt;&lt;/object&gt;` =&gt; `{{'baz': {{'foo': 'Some String', 'index': 1}}}}`\n\nJSON Object:\n</pre> <p>Note</p> <p>Notice that the prompt replaces the <code>pydantic</code> tag with the schema, validator and type information from the Pydantic model. This e.g. tells the LLM that we want that <code>zip-code-must-be-numeric</code> and <code>zip-code-in-california</code>. Guardrails will even automatically read the docstrings from the Pydantic model and add them to the prompt!</p> <pre><code>import openai\nraw_llm_response, validated_response = guard(\nopenai.Completion.create,\nengine=\"text-davinci-003\",\nmax_tokens=512,\ntemperature=0.5,\nnum_reasks=2,\n)\n</code></pre> <pre>\n<code>/Users/krandiash/opt/anaconda3/envs/guardrails/lib/python3.9/site-packages/eliot/json.py:22: FutureWarning: In the future `np.bool` will be defined as the corresponding NumPy scalar.\n  if isinstance(o, (numpy.bool, numpy.bool_)):\n</code>\n</pre> <pre><code>print(validated_response)\n</code></pre> <pre>{\n    'people': [\n        Person(name='John Doe', age=25, zip_code='90000'),\n        Person(name='Jane Doe', age=30, zip_code='94105'),\n        Person(name='John Smith', age=40, zip_code='90001')\n    ]\n}\n</pre> <p>The <code>guard</code> wrapper returns the raw_llm_respose (which is a simple string), and the validated and corrected output (which is a dictionary).</p> <p>We can see that the output is a dictionary with the correct schema and contains a few <code>Person</code> objects!</p> <p>We can even print out the logs of the most recent call. Notice that the first time the LLM actually returns a Beverly Hills zip code, the LLM is sent the error message and is reasked. The second time, the LLM returns a valid zip code and the output is returned.</p> <pre><code>print(guard.state.most_recent_call)\n</code></pre> <pre>GuardHistory(\n    history=[\n        GuardLogs(\n            prompt='\\nGenerate data for possible users in accordance with the specification below.\\n\\n\\nGiven below\nis XML that describes the information to extract from this document and the tags to extract it \ninto.\\n\\n\\n&lt;output&gt;\\n    &lt;list name=\"people\" description=\"A list of 3 people.\"&gt;\\n        &lt;object \ndescription=\"Information about a person.\" pydantic=\"Person\"&gt;&lt;string name=\"name\" description=\"The name of the \nperson.\"/&gt;&lt;integer name=\"age\" description=\"The age of the person.\" format=\"age-must-be-between-0-and-150\"/&gt;&lt;string \nname=\"zip_code\" description=\"The zip code of the person.\" format=\"zip-code-must-be-numeric; \nzip-code-in-california\"/&gt;&lt;/object&gt;&lt;/list&gt;\\n&lt;/output&gt;\\n\\n\\nGiven below is XML that describes the information to \nextract from this document and the tags to extract it into.\\n\\n&lt;output&gt;\\n    &lt;list name=\"people\" description=\"A \nlist of 3 people.\"&gt;\\n        &lt;object description=\"Information about a person.\" pydantic=\"Person\"&gt;&lt;string \nname=\"name\" description=\"The name of the person.\"/&gt;&lt;integer name=\"age\" description=\"The age of the person.\" \nformat=\"age-must-be-between-0-and-150\"/&gt;&lt;string name=\"zip_code\" description=\"The zip code of the person.\" \nformat=\"zip-code-must-be-numeric; zip-code-in-california\"/&gt;&lt;/object&gt;&lt;/list&gt;\\n&lt;/output&gt;\\n\\nONLY return a valid JSON \nobject (no other text is necessary), where the key of the field in JSON is the `name` attribute of the \ncorresponding XML, and the value is of the type specified by the corresponding XML\\'s tag. The JSON MUST conform to\nthe XML format, including any types and format requests e.g. requests for lists, objects and specific types. Be \ncorrect and concise.\\n\\nHere are examples of simple (XML, JSON) pairs that show the expected behavior:\\n- `&lt;string \nname=\\'foo\\' format=\\'two-words lower-case\\' /&gt;` =&gt; `{\\'foo\\': \\'example one\\'}`\\n- `&lt;list name=\\'bar\\'&gt;&lt;string \nformat=\\'upper-case\\' /&gt;&lt;/list&gt;` =&gt; `{\"bar\": [\\'STRING ONE\\', \\'STRING TWO\\', etc.]}`\\n- `&lt;object \nname=\\'baz\\'&gt;&lt;string name=\"foo\" format=\"capitalize two-words\" /&gt;&lt;integer name=\"index\" format=\"1-indexed\" \n/&gt;&lt;/object&gt;` =&gt; `{\\'baz\\': {\\'foo\\': \\'Some String\\', \\'index\\': 1}}`\\n\\nJSON Object:',\noutput=' \\n{\\n    \"people\": [\\n        {\\n            \"name\": \"John Doe\",\\n            \"age\": 25,\\n    \n\"zip_code\": \"90210\"\\n        },\\n        {\\n            \"name\": \"Jane Doe\",\\n            \"age\": 30,\\n            \n\"zip_code\": \"94105\"\\n        },\\n        {\\n            \"name\": \"John Smith\",\\n            \"age\": 40,\\n            \n\"zip_code\": \"90001\"\\n        }\\n    ]\\n}',\noutput_as_dict={\n'people': [\n{'name': 'John Doe', 'age': 25, 'zip_code': '90210'},\n{'name': 'Jane Doe', 'age': 30, 'zip_code': '94105'},\n{'name': 'John Smith', 'age': 40, 'zip_code': '90001'}\n]\n},\nvalidated_output={\n'people': [\n{\n'name': 'John Doe',\n'age': 25,\n'zip_code': ReAsk(\nincorrect_value='90210',\nerror_message='Zip code must not be Beverly Hills.',\nfix_value=None,\npath=['people', 0]\n)\n},\nPerson(name='Jane Doe', age=30, zip_code='94105'),\nPerson(name='John Smith', age=40, zip_code='90001')\n]\n},\nreasks=[\nReAsk(\nincorrect_value='90210',\nerror_message='Zip code must not be Beverly Hills.',\nfix_value=None,\npath=['people', 0]\n)\n]\n),\nGuardLogs(\nprompt='\\nI was given the following JSON response, which had problems due to incorrect values.\\n\\n{\\n  \n\"people\": [\\n    {\\n      \"name\": \"John Doe\",\\n      \"age\": 25,\\n      \"zip_code\": {\\n        \"incorrect_value\": \n\"90210\",\\n        \"error_message\": \"Zip code must not be Beverly Hills.\"\\n      }\\n    }\\n  ]\\n}\\n\\nHelp me correct\nthe incorrect values based on the given error messages.\\n\\nGiven below is XML that describes the information to \nextract from this document and the tags to extract it into.\\n\\n&lt;output&gt;\\n    &lt;list name=\"people\" description=\"A \nlist of 3 people.\"&gt;\\n        &lt;object description=\"Information about a person.\" pydantic=\"Person\"&gt;&lt;string \nname=\"name\" description=\"The name of the person.\"/&gt;&lt;integer name=\"age\" description=\"The age of the person.\" \nformat=\"age-must-be-between-0-and-150\"/&gt;&lt;string name=\"zip_code\" description=\"The zip code of the person.\" \nformat=\"zip-code-must-be-numeric; zip-code-in-california\"/&gt;&lt;/object&gt;&lt;/list&gt;\\n&lt;/output&gt;\\n\\nONLY return a valid JSON \nobject (no other text is necessary), where the key of the field in JSON is the `name` attribute of the \ncorresponding XML, and the value is of the type specified by the corresponding XML\\'s tag. The JSON MUST conform to\nthe XML format, including any types and format requests e.g. requests for lists, objects and specific types. Be \ncorrect and concise. If you are unsure anywhere, enter `None`.\\n\\nHere are examples of simple (XML, JSON) pairs \nthat show the expected behavior:\\n- `&lt;string name=\\'foo\\' format=\\'two-words lower-case\\' /&gt;` =&gt; `{{\\'foo\\': \n\\'example one\\'}}`\\n- `&lt;list name=\\'bar\\'&gt;&lt;string format=\\'upper-case\\' /&gt;&lt;/list&gt;` =&gt; `{{\"bar\": [\\'STRING ONE\\', \n\\'STRING TWO\\', etc.]}}`\\n- `&lt;object name=\\'baz\\'&gt;&lt;string name=\"foo\" format=\"capitalize two-words\" /&gt;&lt;integer \nname=\"index\" format=\"1-indexed\" /&gt;&lt;/object&gt;` =&gt; `{{\\'baz\\': {{\\'foo\\': \\'Some String\\', \\'index\\': 1}}}}`\\n\\nJSON \nObject:',\n            output='\\n{\\n    \"people\": [\\n        {\\n            \"name\": \"John Doe\",\\n            \"age\": 25,\\n     \n\"zip_code\": \"90000\"\\n        }\\n    ]\\n}',\n            output_as_dict={'people': [{'name': 'John Doe', 'age': 25, 'zip_code': '90000'}]},\n            validated_output={\n                'people': [\n                    Person(name='John Doe', age=25, zip_code='90000'),\n                    Person(name='Jane Doe', age=30, zip_code='94105'),\n                    Person(name='John Smith', age=40, zip_code='90001')\n                ]\n            },\n            reasks=[]\n        )\n    ]\n)\n</pre>"},{"location":"integrations/pydantic_validation/#validating-llm-outputs-with-pydantic","title":"Validating LLM Outputs with Pydantic","text":"<p>Note</p> <p>To download this example as a Jupyter notebook, click here.</p> <p>In this example, we will use Guardrails with Pydantic.</p>"},{"location":"integrations/pydantic_validation/#objective","title":"Objective","text":"<p>We want to generate synthetic data that is consistent with a <code>Person</code> Pydantic BaseModel.</p>"},{"location":"integrations/pydantic_validation/#step-1-create-the-rail-spec","title":"Step 1: Create the RAIL Spec","text":"<p>Ordinarily, we would create an RAIL spec in a separate file. For the purposes of this example, we will create the spec in this notebook as a string following the RAIL syntax. For more information on RAIL, see the RAIL documentation.</p> <p>Here, we define a Pydantic model for a <code>Person</code> with the following fields:</p> <ul> <li><code>name</code>: a string  </li> <li><code>age</code>: an integer  </li> <li><code>zip_code</code>: a string zip code</li> </ul> <p>and write very simple validators for the fields as an example. As a way to show how LLM reasking can be used to generate data that is consistent with the Pydantic model, we can define a validator that asks for a zip code in California (including being perversely opposed to the \"90210\" zip code). If this validator fails, the LLM will be sent the error message and will reask the question.</p> <p>This Pydantic model could also be any model that you already have in your codebase, and just needs to be decorated with <code>@register_pydantic</code>.</p> <p>To use this model in the <code>&lt;output&gt;</code> specification, we used the special <code>pydantic</code> tag. This tag takes the name of the Pydantic model, as well as the <code>on-fail-pydantic</code> attribute, which specifies what to do when the output does not validate against the Pydantic model.</p>"},{"location":"integrations/pydantic_validation/#step-2-create-a-guard-object-with-the-rail-spec","title":"Step 2: Create a <code>Guard</code> object with the RAIL Spec","text":"<p>We create a <code>gd.Guard</code> object that will check, validate and correct the output of the LLM. This object:</p> <ol> <li>Enforces the quality criteria specified in the RAIL spec.</li> <li>Takes corrective action when the quality criteria are not met.</li> <li>Compiles the schema and type info from the RAIL spec and adds it to the prompt.</li> </ol>"},{"location":"integrations/pydantic_validation/#step-3-wrap-the-llm-api-call-with-guard","title":"Step 3: Wrap the LLM API call with <code>Guard</code>","text":""},{"location":"rail/","title":"Overview","text":""},{"location":"rail/#what-is-rail","title":"\ud83e\udd16 What is <code>RAIL</code>?","text":"<p><code>.RAIL</code> is a dialect of XML. It stands for \"Reliable AI markup Language\", and it can be used to define:</p> <ol> <li>The structure of the expected outcome of the LLM. (E.g. JSON)</li> <li>The type of each field in the expected outcome. (E.g. string, integer, list, object)</li> <li>The quality criteria for the expected outcome to be considered valid. (E.g. generated text should be bias-free, generated code should be bug-free)</li> <li>The corrective action to take in case the quality criteria is not met. (E.g. reask the question, filter the LLM, progrmatically fix, etc.)</li> </ol> Expand to see an example of a RAIL specification. <pre><code>&lt;rail version=\"0.1\"&gt;\n&lt;output&gt;\n&lt;list name=\"fees\" description=\"What fees and charges are associated with my account?\"&gt;\n&lt;object&gt;\n&lt;integer name=\"index\" format=\"1-indexed\" /&gt;\n&lt;string name=\"name\" format=\"lower-case; two-words\" on-fail-lower-case=\"noop\" on-fail-two-words=\"reask\"/&gt;\n&lt;string name=\"explanation\" format=\"one-line\" on-fail-one-line=\"noop\" /&gt;\n&lt;float name=\"value\" format=\"percentage\"/&gt;\n&lt;/object&gt;\n&lt;/list&gt;\n&lt;string name='interest_rates' description='What are the interest rates offered by the bank on savings and checking accounts, loans, and credit products?' format=\"one-line\" on-fail-one-line=\"noop\"/&gt;\n&lt;/output&gt;\n&lt;prompt&gt;\nGiven the following document, answer the following questions. If the answer doesn't exist in the document, enter 'None'.\n\n{document}\n\n@xml_prefix_prompt\n\n{{output_schema}}\n\n@json_suffix_prompt&lt;/prompt&gt;\n&lt;script language='python'&gt;\nfrom guardrails.validators import Validator, EventDetail, register_validator\n    import random\n\n@register_validator(name=\"custom\", data_type=\"any\")\n    class CustomValidator(Validator):\n        def __init__(self, *args, **kwargs):\n            super(CustomValidator, self).__init__(*args, **kwargs)\n\ndef validate(self, key: str, value: Any, schema: Union[Dict, List]):\n            \"\"\"Validate that a value is within a range.\"\"\"\n\nlogger.debug(f\"Validating {value} is in choices {self._choices}...\")\n\nif random.random() &gt; 0.5:\n                raise EventDetail(\n                    key,\n                    value,\n                    schema,\n                    f\"Value {value} is not in choices {self._choices}.\",\n                    None,\n                )\n\nreturn schema\n&lt;/script&gt;\n&lt;/rail&gt;\n</code></pre>"},{"location":"rail/#why-rail","title":"\ud83e\udd14 Why <code>RAIL</code>?","text":"<ol> <li>Language agnostic: <code>RAIL</code> Specifications can be enforced in any language.</li> <li>Simple and familiar: <code>RAIL</code> should be familiar to anyone familiar with HTML, and should be easy to learn.</li> <li>Validation and correction: <code>RAIL</code> can be used to define quality criteria for the expected output, and corrective actions to take in case the quality criteria is not met.</li> <li>Can define complex structures: <code>RAIL</code> can be used to define arbitrarily complex structures, such as nested lists, nested objects, etc.</li> <li>Supports writing custom code: If needed, <code>RAIL</code> supports writing code for using validators, custom corrective actions, etc. To see examples of this, check out the RAIL Script page.</li> <li>Code assistance: In the future, we plan to support code completion and IntelliSense for <code>RAIL</code> specifications, which will make it very easy to write <code>RAIL</code> specifications.</li> </ol> <p>Design inspiration</p> <ul> <li>HTML, CSS and Javascript: <code>RAIL</code> spec is a dialect of XML, and so is similar to HTML. Specifying quality criteria is done via the <code>format</code> attribute, which is similar to CSS <code>style</code> tags. Corrective actions are specified via the <code>on-fail-*</code> attributes, which is similar to Javascript event handlers.</li> <li>OpenAPI as an open standard for creating machine-readable RESTful APIs.</li> </ul>"},{"location":"rail/#components-of-an-rail-specification","title":"\ud83d\udcda Components of an <code>RAIL</code> Specification","text":"<p>The <code>RAIL</code> specification contains 3 main components:</p> <ol> <li><code>Output</code>: Contains information about the expected output of the LLM. It contains the spec for the overall structure of the LLM output, type info for each field, and the quality criteria for each field and the corrective action to be taken in case quality criteria is not met.    This is the main component of the <code>RAIL</code> specification, which enforces the guarantees that the LLM should provide.    Check out the RAIL Output page for more details, including the full specifcation of how to create complex output schemas.</li> <li><code>Prompt</code>: Prompt template, and contains the high level instructions that are sent to the LLM. Check out the RAIL Prompt page for more details.</li> <li>(Experimental) (Optional) <code>Script</code>: Contains any custom code for implementing the schema. This is useful for implementing custom validators, custom corrective actions, etc. Check out the RAIL Script page for more details.</li> </ol> <p>Let's see an example of an <code>RAIL</code> specification in action:</p> <pre><code>&lt;rail version=\"0.1\"&gt;\n&lt;output&gt; &lt;!-- (1)! --&gt;\n...\n&lt;/output&gt;\n&lt;prompt&gt; &lt;!-- (2)! --&gt;\n...\n&lt;/prompt&gt;\n&lt;script language=python&gt; &lt;!-- (3)! --&gt;\n...\n&lt;/script&gt;\n&lt;/rail&gt;\n</code></pre> <ol> <li>The <code>output</code> element contains the structure of the expected output of the LLM. It contains the spec for the overall structure of the LLM output, type info for each field, and the quality criteria for each field and the corrective action to be taken in case quality criteria is not met.</li> <li>The <code>prompt</code> element contains the high level instructions that are sent to the LLM. Check out the RAIL Prompt page for more details.</li> <li>The <code>script</code> element is optional, and contains any custom code for implementing the schema.</li> </ol>"},{"location":"rail/#how-to-use-rail-in-guardrails","title":"\ud83d\udcd6 How to use <code>RAIL</code> in Guardrails?","text":"<p>After creating a <code>RAIL</code> specification, you can use it to get corrected output from LLMs by wrapping your LLM API call with a <code>Guard</code> module. Here's an example of doing that:</p> <pre><code>import guardrails as gd\n# Create a Guard object\nguard = gd.Guard.from_rail('path/to/rail/spec.xml')  # (1)!\nvalidated_output = guard(\nopenai.Completion.create,  # (2)!\n**prompt_args,\n*args,\n**kwargs\n)\n</code></pre> <ol> <li>A <code>Guard</code> object is created from a <code>RAIL</code> specification. This object manages the validation and correction of the output of the LLM, as well as the prompt that is sent to the LLM.</li> <li>Wrap the LLM API call (<code>openai.Completion.create</code>) with the <code>Guard</code> object, and add any additional arguments that you want to pass to the LLM API call. Instead of returning the raw text object, the <code>Guard</code> object will return a JSON object that is validated and corrected according to the <code>RAIL</code> specification.</li> </ol>"},{"location":"rail/instructions/","title":"<code>Instructions</code> Element","text":"<p>The <code>&lt;instructions&gt;&lt;/instructions&gt;</code> element contains the high level instructions sent to the LLM (e.g. the system message for chat models).</p>"},{"location":"rail/instructions/#components-of-a-prompt","title":"\ud83d\udcda Components of a Prompt","text":"<p>In addition to the high level task description, the prompt also contains the following:</p> Component Syntax Description Variables <code>{{variable_name}}</code> These are provided by the user at runtime, and substituted in the prompt. Output Schema <code>{output_schema}</code> This is the schema of the expected output, and is compiled based on the  <code>output</code> element.  For more information on how the output schema is compiled for the prompt, check out <code>output</code> element compilation. Prompt Primitives <code>@prompt_primitive_name</code> These are pre-constructed prompts that are useful for common tasks. E.g., some primitives may contain information that helps the LLM understand the output schema better.  To see the full list of prompt primitives, check out <code>guardrails/constants.xml</code>. <pre><code>&lt;rail version=\"0.1\"&gt;\n&lt;prompt&gt;\n&lt;!-- (1)! --&gt;\nYou are a helpful assistant only capable of communicating with valid JSON, and no other text.\n\n@json_suffix_prompt_examples  &lt;!-- (2)! --&gt;\n&lt;/prompt&gt;\n&lt;/rail&gt;\n</code></pre> <ol> <li>The prompt contains high level task information.</li> <li><code>@json_suffix_prompt_examples</code> is a prompt primitive provided by guardrails. It is equivalent to typing the following lines in the prompt: <code>Given below is XML that describes the information to extract from this document and the tags to extract it into.</code></li> </ol> <pre><code>You are a helpful assistant only capable of communicating with valid JSON, and no other text.\n\nONLY return a valid JSON object (no other text is necessary).\nThe JSON MUST conform to the XML format, including any types and format requests e.g. requests for lists, objects and specific types.\nBe correct and concise. If you are unsure anywhere, enter `None`.\n\nHere are examples of simple (XML, JSON) pairs that show the expected behavior:\n- `&lt;string name='foo' format='two-words lower-case' /&gt;` =&gt; `{'foo': 'example one'}`\n- `&lt;list name='bar'&gt;&lt;string format='upper-case' /&gt;&lt;/list&gt;` =&gt; `{\"bar\": ['STRING ONE', 'STRING TWO', etc.]}`\n- `&lt;object name='baz'&gt;&lt;string name=\"foo\" format=\"capitalize two-words\" /&gt;&lt;integer name=\"index\" format=\"1-indexed\" /&gt;&lt;/object&gt;` =&gt; `{'baz': {'foo': 'Some String', 'index': 1}}`\n</code></pre>"},{"location":"rail/output/","title":"<code>Output</code> Element","text":"<p>The <code>&lt;output&gt;...&lt;/output&gt;</code> element of a <code>RAIL</code> spec is used to give precise specification of the expected output of the LLM. It specifies</p> <ol> <li>the structure of the expected output (e.g. JSON),</li> <li>the type of each field,</li> <li>the quality criteria for each field to be considered valid (e.g. generated text should be bias-free, generated code should be bug-free), and</li> <li>the corrective action to take in case the quality criteria is not met (e.g. reask the question to the LLM, filter offending values, progrmatically fix, etc.)</li> </ol> <p>Example:</p> RAIL SpecOutput JSON <pre><code>&lt;rail version=\"0.1\"&gt;\n&lt;output&gt;\n&lt;string name=\"text\" description=\"The generated text\" format=\"two-words\" on-fail-two-words=\"reask\"/&gt;\n&lt;float name=\"score\" description=\"The score of the generated text\" format=\"min-val: 0\" on-fail-min-val=\"fix\"/&gt;\n&lt;object name=\"metadata\" description=\"The metadata associated with the generated text\"&gt;\n&lt;string name=\"key_1\" description=\"description of key_1\" /&gt;\n...\n        &lt;/object&gt;\n&lt;/output&gt;\n&lt;/rail&gt;\n</code></pre> <pre><code>{\n\"text\": \"string output\",\n\"score\": 0.0,\n\"metadata\": {\n\"key_1\": \"string\",\n...\n}\n}\n</code></pre>"},{"location":"rail/output/#rail-elements","title":"\ud83c\udff7\ufe0f <code>RAIL</code> Elements","text":"<p>At the heart of the <code>RAIL</code> specification is the use of elements. Each element's tag represents a type of data. For example, in the element <code>&lt;string ... /&gt;</code>, the tag represents a string, the <code>&lt;integer ... /&gt;</code> elements represents an integer, the <code>&lt;object ...&gt;&lt;/object&gt;</code> element represents an object, etc.</p> <p>Note</p> <p>The tag of RAIL element is the same as the \"type\" of the data it represents.</p> <p>E.g. <code>&lt;string .../&gt;</code> element will generate a string, <code>&lt;integer .../&gt;</code> element will generate an integer, etc.</p>"},{"location":"rail/output/#supported-types","title":"Supported types","text":"<p>Guardrails supports many data types, including:, <code>string</code>, <code>integer</code>, <code>float</code>, <code>boolean</code>, <code>list</code>, <code>object</code>, <code>url</code>, <code>email</code> and many more.</p> <p>Check out the RAIL Data Types page for a list of supported data types.</p>"},{"location":"rail/output/#scalar-vs-non-scalar-types","title":"Scalar vs Non-scalar types","text":"<p>Guardrails supports two types of data types: scalar and non-scalar.</p> Scalar Non Scalar Scalar types are void elements, and can't have any child elements. Non-scalar types can be non-void, and can have closing tags and child elements. Syntax:   <code>&lt;string ... /&gt;</code> Syntax:  Examples: <code>string</code>, <code>integer</code>, <code>float</code>, <code>boolean</code>, <code>url</code>, <code>email</code>, etc. Examples: <code>list</code> and <code>object</code> are the only non-scalar types supported by Guardrails."},{"location":"rail/output/#supported-attributes","title":"Supported attributes","text":"<p>Each element can have attributes that specify additional information about the data, such as:</p> <ol> <li> <p><code>name</code> attribute that specifies the name of the field. This will be the key in the output JSON. E.g.</p> RAIL SpecOutput JSON <pre><code>&lt;rail version=\"0.1\"&gt;\n&lt;output&gt;\n&lt;string name=\"some_key\" /&gt;\n&lt;/output&gt;\n&lt;/rail&gt;\n</code></pre> <pre><code>{\n\"some_key\": \"...\"\n}\n</code></pre> </li> <li> <p><code>description</code> attribute that specifies the description of the field. This is similar to a prompt that will be provided to the LLM. It can contain more context to help the LLM generate the correct output.</p> </li> <li>(Coming soon!) <code>required</code> attribute that specifies whether the field is required or not. If the field is required, the LLM will be asked to generate the field until it is generated correctly. If the field is not required, the LLM will not be asked to generate the field if it is not generated correctly.</li> <li><code>format</code> attribute that specifies the quality criteria that the field should respect. The <code>format</code> attribute can contain multiple quality criteria separated by a colon (<code>;</code>). For example, <code>two-words; upper-case</code>.</li> <li><code>on-fail-{quality-criteria}</code> attribute that specifies the corrective action to take in case the quality criteria is not met. For example, <code>on-fail-two-words=\"reask\"</code> specifies that if the field does not have two words, the LLM should be asked to re-generate the field.</li> </ol> <p>E.g.,</p> RAIL SpecOutput JSON <pre><code>&lt;rail version=\"0.1\"&gt;\n&lt;output&gt;\n&lt;string\nname=\"some_key\"\ndescription=\"Detailed description of what the value of the key should be\"\nrequired=\"true\"\nformat=\"two-words; upper-case\"\non-fail-two-words=\"reask\"\non-fail-upper-case=\"noop\" /&gt;\n&lt;/output&gt;\n&lt;/rail&gt;\n</code></pre> <pre><code>{\n\"some_key\": \"SOME STRING\"\n}\n</code></pre>"},{"location":"rail/output/#specifying-output-structure","title":"\u26a1 Specifying output structure","text":"<p>You can combine <code>RAIL</code> elements to create an arbitrarily complex output structure.</p>"},{"location":"rail/output/#flat-json-output","title":"Flat JSON output","text":"RAIL SpecOutput JSON <pre><code>&lt;rail version=\"0.1\"&gt;\n&lt;output&gt;\n&lt;string name=\"some_key\" ..../&gt;\n&lt;integer name=\"some_other_key\" ..../&gt;\n&lt;/output&gt;\n&lt;/rail&gt;\n</code></pre> <pre><code>{\n\"some_key\": \"string\",\n\"some_other_key\": 0\n}\n</code></pre>"},{"location":"rail/output/#json-output-with-objects","title":"JSON output with objects","text":"<p><code>object</code> elements can be used to specify a JSON object, which is a collection of key-value pairs.</p> <ul> <li>A child of an <code>object</code> element represents a key in the JSON object. The child element can be any RAIL element, including another <code>list</code> or <code>object</code> elements. The value of the key is generated by the LLM based on the info provided by the child element.</li> <li>An object element can have multiple children, each of which can be any RAIL element, including another <code>list</code> or <code>object</code> elements.</li> <li>Formatters can be applied to the child elements of an object element. For example, if the child element is a <code>string</code> element, the <code>format</code> attribute can be used to specify the quality criteria for the strings in the list.</li> </ul> RAIL SpecOutput JSON <pre><code>&lt;rail version=\"0.1\"&gt;\n&lt;output&gt;\n&lt;object name=\"some_object\"&gt;\n&lt;string name=\"some_str_key\" description=\"What should the value for this key represent?\" format=\"two-words; upper-case\" /&gt;\n&lt;integer name=\"some_other_key\" description=\"What should this integer represent?\" format=\"min-val: 0\"/&gt;\n&lt;/object&gt;\n&lt;/output&gt;\n&lt;/rail&gt;\n</code></pre> <pre><code>{\n\"some_object\": {\n\"some_str_key\": \"SOME STRING\",\n\"some_other_key\": 0\n}\n}\n</code></pre> <p>In the above example, <code>\"SOME STRING\"</code> is the value for the <code>some_str_key</code> key, and is generated based on the name, description and quality criteria provided by the <code>&lt;string name=\"some_str_key\" ... /&gt;</code> element.</p> <p>Note</p> <p>The <code>object</code> element doesn't need to have children. If child elements are not provided, the LLM will automatically generate keys and values for the object based on the <code>name</code>, <code>description</code> and <code>format</code> attributes of the <code>object</code> element.</p> <p>Providing child elements is useful when you want to specify the keys and values that the LLM should generate.</p>"},{"location":"rail/output/#json-output-with-lists","title":"JSON output with lists","text":"<p><code>list</code> elements can be used to specify a list of values.</p> <ul> <li>Currently, a list element can only contain a single child element. This means that a list can only contain a single type of data. For example, a list can only contain strings, or a list can only contain integers, but a list cannot contain both strings and integers.</li> <li>This child element can be any RAIL element, including another <code>list</code> or <code>object</code> elements.</li> <li>The child of a list element doesn't need to have a <code>name</code> attribute, since items in a list don't have names.</li> <li>Formatters can be applied to the child element of a list element. For example, if the child element is a <code>string</code> element, the <code>format</code> attribute can be used to specify the quality criteria for the strings in the list.</li> </ul> RAIL SpecOutput JSON <pre><code>&lt;rail version=\"0.1\"&gt;\n&lt;output&gt;\n&lt;list name=\"some_list\" format=\"min-len: 2\"&gt;\n&lt;string format=\"two-words; upper-case\" /&gt;\n&lt;/list&gt;\n&lt;/output&gt;\n&lt;/rail&gt;\n</code></pre> <pre><code>{\n\"some_list\": [\n\"STRING 1\", \"STRING 2\"\n]\n}\n</code></pre> <p>Note</p> <p>The <code>list</code> element doesn't need to have a child element. If a child element is not provided, the LLM will automatically generate values for the list based on the <code>name</code>, <code>description</code> and <code>format</code> attributes of the <code>list</code> element.</p> <p>Providing a child element is useful when you want to have more control over the values that the LLM should generate.</p>"},{"location":"rail/output/#specifying-quality-criteria","title":"\ud83c\udf40 Specifying quality criteria","text":"<p>The <code>format</code> attribute allows specifying the quality criteria for each field in the expected output. The <code>format</code> attribute can contain multiple quality criteria separated by a colon (<code>;</code>). For example,</p> <pre><code>&lt;rail version=\"0.1\"&gt;\n&lt;output&gt;\n&lt;string\nname=\"text\"\ndescription=\"The generated text\"\nformat=\"two-words; upper-case\"\non-fail-two-words=\"reask\"\n/&gt;\n&lt;/output&gt;\n&lt;/rail&gt;\n</code></pre> <p>The above example specifies that the <code>text</code> field should be a string with two words and the text should be returned in upper case.</p>"},{"location":"rail/output/#quality-criteria-under-the-hood","title":"Quality criteria under the hood","text":"<p>Under the hood, the <code>format</code> attribute is parsed into a list of quality criteria.</p> <p>Each quality criteria is backed by a <code>Validator</code> class that checks if the generated output meets the quality criteria. For example, the <code>two-words</code> quality criteria is backed by the <code>TwoWords</code> class, which checks if the generated output has two words.</p> <p>Each quality criteria is then checked against the generated output. If the quality criteria is not met, the corrective action specified by the <code>on-fail-{quality-criteria}</code> attribute is taken.</p>"},{"location":"rail/output/#supported-criteria","title":"Supported criteria","text":"<ul> <li>Each quality critera is relevant to a specific data type. For example, the <code>two-words</code> quality criteria is only relevant to strings, and the <code>positive</code> quality criteria is only relevant to integers and floats.</li> <li>To see the full list of supported quality criteria, check out the Validation page.</li> </ul>"},{"location":"rail/output/#specifying-corrective-actions","title":"\ud83d\udee0\ufe0f Specifying corrective actions","text":"<p>The <code>on-fail-{quality-criteria}</code> attribute allows specifying the corrective action that should be taken if the quality criteria is not met. The corrective action can be one of the following:</p> Action Behavior <code>reask</code> Reask the LLM to generate an output that meets the quality criteria.  The prompt used for reasking contains information about which quality criteria failed, which is auto-generated by the validator. <code>fix</code> Programmatically fix the generated output to meet the quality criteria.  E.g. for the formatter <code>two-words</code>, the programatic <code>fix</code> simply takes the first 2 words of the generated string. <code>filter</code> Filter the incorrect value. This only filters the field that fails, and will return the rest of the generated output. <code>refrain</code> Refrain from returning an output. If a formatter has the corrective action refrain, then on failure there will be a <code>None</code> output returned instead of the JSON. <code>noop</code> Do nothing. The failure will still be recorded in the logs, but no corrective action will be taken. <code>exception</code> Raise an exception when validation fails. <code>fix_reask</code> First, fix the generated output deterministically, and then rerun validation with the deterministically fixed output. If validation fails, then perform reasking."},{"location":"rail/output/#adding-compiled-output-element-to-prompt","title":"\ud83d\ude92 Adding compiled <code>output</code> element to prompt","text":"<p>In order to generate the correct LLM output, the <code>output</code> schema needs to be compiled and added to the prompt. This is handled automatically by the <code>Guardrails</code> library.</p> <p>The <code>output</code> element can be compiled into different formats to be used in the prompt. Currently, only a passthrough compilation into <code>XML</code> is supported, but in the future we will support additional compilation formats like <code>TypeScript</code>.</p>"},{"location":"rail/output/#passthrough-xml-compilation","title":"Passthrough (<code>XML</code>) compilation","text":"<p>By default, the <code>output</code> element will be compiled into <code>XML</code> and added to the prompt. Compilation into <code>XML</code> involves removing any <code>on-fail-{quality-criteria}</code> attributes, and adding the <code>output</code> element to the prompt.</p> <p>An example of the compiled <code>output</code> element:</p> RAIL SpecCompiled XML added to prompt <pre><code>&lt;rail version=\"0.1\"&gt;\n&lt;output&gt;\n&lt;string\nname=\"text\"\ndescription=\"The generated text\"\nformat=\"two-words; upper-case\"\n/&gt;\n&lt;/output&gt;\n&lt;/rail&gt;\n</code></pre> <pre><code>&lt;output&gt;\n&lt;string\nname=\"text\"\ndescription=\"The generated text\"\n/&gt;\n&lt;/output&gt;\n</code></pre>"},{"location":"rail/output/#typescript-compilation","title":"<code>TypeScript</code> Compilation","text":"<p>Coming soon!</p>"},{"location":"rail/output/#unsupported-tags-and-attributes","title":"\u2753 Unsupported tags and attributes","text":"<ul> <li>By default, Guardrails will not throw an error if you add an unsupported type, attribute or quality criteria. Instead, it will treat the unsupported type as a string, and will not perform any quality checks on the field. Often, LLMs will generate a string for an unsupported type, so this behavior is useful.</li> <li>Unsupported tags and attributes will still be included in the output schema definition that is appended to the prompt.</li> <li> <p>This behavior can be changed by setting the <code>strict</code> attribute of the <code>&lt;output&gt;</code> element to <code>true</code>. If <code>strict</code> is set to <code>true</code>, Guardrails will throw an error if you add an unsupported type, attribute or quality criteria.</p> <pre><code>&lt;rail version=\"0.1\"&gt;\n&lt;output strict=\"true\"&gt;\n&lt;unsupported-type ... /&gt;\n&lt;/output&gt;\n&lt;/rail&gt;\n</code></pre> <p>This will throw an error:</p> <pre><code>\u274c Error: Unsupported type: unsupported-type\n</code></pre> </li> </ul>"},{"location":"rail/prompt/","title":"<code>Prompt</code> Element","text":"<p>The <code>&lt;prompt&gt;&lt;/prompt&gt;</code> element contains the high level instructions sent to the LLM, that describe the high level task.</p>"},{"location":"rail/prompt/#components-of-a-prompt","title":"\ud83d\udcda Components of a Prompt","text":"<p>In addition to the high level task description, the prompt also contains the following:</p> Component Syntax Description Variables <code>{{variable_name}}</code> These are provided by the user at runtime, and substituted in the prompt. Output Schema <code>{output_schema}</code> This is the schema of the expected output, and is compiled based on the  <code>output</code> element.  For more information on how the output schema is compiled for the prompt, check out <code>output</code> element compilation. Prompt Primitives <code>@prompt_primitive_name</code> These are pre-constructed prompts that are useful for common tasks. E.g., some primitives may contain information that helps the LLM understand the output schema better.  To see the full list of prompt primitives, check out <code>guardrails/constants.xml</code>. <pre><code>&lt;rail version=\"0.1\"&gt;\n&lt;prompt&gt;\n&lt;!-- (1)! --&gt;\nGiven the following document, answer the following questions. If the answer doesn't exist in the document, enter 'None'.\n\n{document} &lt;!-- (2)! --&gt;\n@xml_prefix_prompt  &lt;!-- (3)! --&gt;\n{{output_schema}}  &lt;!-- (4)! --&gt;\n@json_suffix_prompt  &lt;!-- (5)! --&gt;\n&lt;/prompt&gt;\n&lt;/rail&gt;\n</code></pre> <ol> <li>The prompt contains high level task information.</li> <li>The variable <code>{{document}}</code> is provided by the user at runtime.</li> <li><code>@xml_prefix_prompt</code> is a prompt primitive provided by guardrails. It is equivalent to typing the following lines in the prompt: <code>Given below is XML that describes the information to extract from this document and the tags to extract it into.</code></li> <li><code>{output_schema}</code> is the output schema and contains information about , which is compiled based on the <code>output</code> element.</li> <li><code>@json_suffix_prompt</code> is a prompt primitive provided by guardrails. It is equivalent to typing the following lines in the prompt:</li> </ol> <pre><code>ONLY return a valid JSON object (no other text is necessary). The JSON MUST conform to the XML format, including any types and format requests e.g. requests for lists, objects and specific types. Be correct and concise. If you are unsure anywhere, enter `None`.\n</code></pre>"},{"location":"rail/script/","title":"<code>Script</code> Element","text":"<p>Note</p> <p>This is a beta feature, and serves more advanced use cases. If you're just getting started with Guardrails, you can skip this section for now.</p> <p>The <code>&lt;script&gt;&lt;/script&gt;</code> element contains any custom code that a developer wants to use. Common use cases include:</p> <ol> <li>Custom <code>Validators</code>: Here's a few examples of adding custom validators via the <code>&lt;script&gt;</code> tag:<ol> <li>adding a validator to filter secret keys,</li> <li>adding a validator to check if an ingredient is vegan,</li> <li>adding a validator to check if a chess move is valid.</li> </ol> </li> <li>Custom <code>DataTypes</code>: Examples coming soon!</li> </ol> <p>Here's the syntax for the <code>&lt;script&gt;</code> element:</p> <pre><code>&lt;rail version=\"0.1\"&gt;\n&lt;script language=\"python\"&gt;\n# your code here\n\n&lt;/script&gt;\n&lt;/rail&gt;\n</code></pre>"},{"location":"rail/script/#adding-a-custom-validator","title":"\ud83d\udd10 Adding a custom <code>Validator</code>","text":"<p>Here's an example of adding a custom validator to check if a generated text contains any secret keys. The validator is added via the <code>&lt;script&gt;</code> element.</p> <pre><code>&lt;rail version=\"0.1\"&gt;\n&lt;script&gt;\nfrom guardrails.validators import Validator, EventDetail, register_validator &lt;!-- (1)! --&gt;\n@register_validator(name=\"custom-validator\", data_type=\"string\") &lt;!-- (2)! --&gt;\nclass CustomValidatorName(Validator): &lt;!-- (3)! --&gt;\ndef validate(self, key, value, schema) -&gt; Dict: &lt;!-- (4)! --&gt;\n# Check if value meets the criteria.\n\nvalid_condition = ...\n        descriptive_error_message = ...\n\nif not valid_condition:\n            # Create a programatically corrected value.\n            correct_value = ...\n            raise EventDetail(   &lt;!-- (5)! --&gt;\nkey=key,\n                value=value,\n                schema=schema,\n                error_message=descriptive_error_message,\n                fix_value=correct_value,\n            )\n\nreturn schema  &lt;!-- (6)! --&gt;\n&lt;/script&gt;\n&lt;/rail&gt;\n</code></pre> <ol> <li>In order to add a custom validator, you need to import the <code>Validator</code> class, <code>EventDetail</code> class, and <code>register_validator</code> decorator.</li> <li>Add the <code>register_validator</code> decorator to your custom validator class. The <code>name</code> argument is the name of the validator (this will be used in <code>RAIL</code> as the formatter name), and the <code>data_type</code> argument is the data type that the validator is applicable to. In this case, the validator is applicable to strings.</li> <li>Subclass the <code>Validator</code> class.</li> <li>You only need to implement the <code>validate</code> method. The <code>validate</code> method takes in the <code>key</code>, <code>value</code>, and <code>schema</code> as arguments. The <code>key</code> is the key of the value in the JSON object, the <code>value</code> is the value itself, and the <code>schema</code> is the schema of the value.</li> <li>The <code>validate</code> method raises an <code>EventDetail</code> object if the value is invalid. This object is then used to take corrective action specified in the <code>RAIL</code> spec.</li> <li>The <code>validate</code> method should return the <code>schema</code> if the value is valid.</li> </ol> <p>The custom validator defined in above can be used in the <code>RAIL</code> spec as follows:</p> <pre><code>&lt;rail version=\"0.1\"&gt;\n&lt;output&gt;\n&lt;string .... format=\"custom-validator\" on-fail-custom-validator=\"fix\"&gt;\n&lt;/output&gt;\n&lt;/rail&gt;\n</code></pre>"},{"location":"rail/script/#adding-a-custom-datatype","title":"\ud83e\udded Adding a custom <code>DataType</code>","text":"<p>Coming soon!</p>"},{"location":"use_cases/text2sql/text2sql/","title":"Text to SQL","text":"<pre><code>import os\nimport json\nfrom rich import print\nfrom guardrails.applications.text2sql import Text2Sql\nos.environ['OPENAI_API_KEY'] = 'YOUR_API_KEY'\n</code></pre> <pre><code>EXAMPLES = \"examples.json\"\nSQL_SCHEMA = \"schema.sql\"\n# Alternatively, you can specify a connection string instead of a schema file, like so:\n# SQL_CONN = f\"sqlite:///{os.getcwd()}department_management.sqlite\"\nwith open(EXAMPLES, \"r\") as f:\nexamples = json.load(f)\nprint(examples[:2])\n</code></pre> <pre>[\n    {\n        'question': 'How many heads of the departments are older than 56 ?',\n        'query': 'SELECT count(*) FROM head WHERE age  &gt;  56'\n    },\n    {\n        'question': 'List the name, born state and age of the heads of departments ordered by age.',\n        'query': 'SELECT name ,  born_state ,  age FROM head ORDER BY age'\n    }\n]\n</pre> <pre><code>from guardrails.applications.text2sql import Text2Sql\napp = Text2Sql(\n\"sqlite://\",\nschema_file=SQL_SCHEMA,\nexamples=examples,\n)\n# Call the application with a natural language question.\nprint(app(\"What is the name of the department with the highest number of employees?\"))\n</code></pre> <pre>SELECT name FROM department ORDER BY Num_Employees DESC LIMIT 1\n</pre> <pre>Incorrect output:\n\n{\"generated_sql\": \"SELECT name FROM departments ORDER BY num_employees DESC LIMIT 1\"}\n</pre> <p>Below, we can see the final corrected output, as well as the underlying logs to see what happened step by step:</p> <pre>Correct output:\n\nSELECT Name FROM department ORDER BY Num_Employees DESC LIMIT 1\n</pre> <pre>Logs\n\u251c\u2500\u2500 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Step 0 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502   \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Prompt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502   \u2502 \u2502 No prompt                                                                                               \u2502 \u2502\n\u2502   \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502   \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Raw LLM Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502   \u2502 \u2502 {\"generated_sql\": \"SELECT name FROM departments ORDER BY num_employees DESC LIMIT 1\"}                   \u2502 \u2502\n\u2502   \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502   \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Validated Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502   \u2502 \u2502 {                                                                                                       \u2502 \u2502\n\u2502   \u2502 \u2502     'generated_sql': ReAsk(                                                                             \u2502 \u2502\n\u2502   \u2502 \u2502         incorrect_value='SELECT name FROM departments ORDER BY num_employees DESC LIMIT 1',             \u2502 \u2502\n\u2502   \u2502 \u2502         error_message='(sqlite3.OperationalError) no such table: departments\\n[SQL: SELECT name FROM    \u2502 \u2502\n\u2502   \u2502 \u2502 departments ORDER BY num_employees DESC LIMIT 1]\\n(Background on this error at:                         \u2502 \u2502\n\u2502   \u2502 \u2502 https://sqlalche.me/e/20/e3q8)',                                                                        \u2502 \u2502\n\u2502   \u2502 \u2502         fix_value=None,                                                                                 \u2502 \u2502\n\u2502   \u2502 \u2502         path=['generated_sql']                                                                          \u2502 \u2502\n\u2502   \u2502 \u2502     )                                                                                                   \u2502 \u2502\n\u2502   \u2502 \u2502 }                                                                                                       \u2502 \u2502\n\u2502   \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502   \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u2514\u2500\u2500 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Step 1 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n    \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Prompt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 You are a data scientist whose job is to write SQL queries.                                             \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 Given below is XML that describes the information to extract from this document and the tags to extract \u2502 \u2502\n    \u2502 \u2502 it into.                                                                                                \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 &lt;output&gt;                                                                                                \u2502 \u2502\n    \u2502 \u2502     &lt;sql name=\"generated_sql\" description=\"Generate SQL for the given natural language instruction.\"    \u2502 \u2502\n    \u2502 \u2502 format=\"bug-free-sql\"/&gt;                                                                                 \u2502 \u2502\n    \u2502 \u2502 &lt;/output&gt;                                                                                               \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 ONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the \u2502 \u2502\n    \u2502 \u2502 `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding  \u2502 \u2502\n    \u2502 \u2502 XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g.        \u2502 \u2502\n    \u2502 \u2502 requests for lists, objects and specific types. Be correct and concise.                                 \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 Here are examples of simple (XML, JSON) pairs that show the expected behavior:                          \u2502 \u2502\n    \u2502 \u2502 - `&lt;string name='foo' format='two-words lower-case' /&gt;` =&gt; `{'foo': 'example one'}`                     \u2502 \u2502\n    \u2502 \u2502 - `&lt;list name='bar'&gt;&lt;string format='upper-case' /&gt;&lt;/list&gt;` =&gt; `{\"bar\": ['STRING ONE', 'STRING TWO',     \u2502 \u2502\n    \u2502 \u2502 etc.]}`                                                                                                 \u2502 \u2502\n    \u2502 \u2502 - `&lt;object name='baz'&gt;&lt;string name=\"foo\" format=\"capitalize two-words\" /&gt;&lt;integer name=\"index\"          \u2502 \u2502\n    \u2502 \u2502 format=\"1-indexed\" /&gt;&lt;/object&gt;` =&gt; `{'baz': {'foo': 'Some String', 'index': 1}}`                        \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 Here's schema about the database that you can use to generate the SQL query.                            \u2502 \u2502\n    \u2502 \u2502 Try to avoid using joins if the data can be retrieved from the same table.                              \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 Table: department                                                                                       \u2502 \u2502\n    \u2502 \u2502     Column: Department_ID                                                                               \u2502 \u2502\n    \u2502 \u2502         type: INTEGER                                                                                   \u2502 \u2502\n    \u2502 \u2502     Column: Name                                                                                        \u2502 \u2502\n    \u2502 \u2502         type: TEXT                                                                                      \u2502 \u2502\n    \u2502 \u2502     Column: Creation                                                                                    \u2502 \u2502\n    \u2502 \u2502         type: TEXT                                                                                      \u2502 \u2502\n    \u2502 \u2502     Column: Ranking                                                                                     \u2502 \u2502\n    \u2502 \u2502         type: INTEGER                                                                                   \u2502 \u2502\n    \u2502 \u2502     Column: Budget_in_Billions                                                                          \u2502 \u2502\n    \u2502 \u2502         type: REAL                                                                                      \u2502 \u2502\n    \u2502 \u2502     Column: Num_Employees                                                                               \u2502 \u2502\n    \u2502 \u2502         type: REAL                                                                                      \u2502 \u2502\n    \u2502 \u2502 Table: head                                                                                             \u2502 \u2502\n    \u2502 \u2502     Column: head_ID                                                                                     \u2502 \u2502\n    \u2502 \u2502         type: INTEGER                                                                                   \u2502 \u2502\n    \u2502 \u2502     Column: name                                                                                        \u2502 \u2502\n    \u2502 \u2502         type: TEXT                                                                                      \u2502 \u2502\n    \u2502 \u2502     Column: born_state                                                                                  \u2502 \u2502\n    \u2502 \u2502         type: TEXT                                                                                      \u2502 \u2502\n    \u2502 \u2502     Column: age                                                                                         \u2502 \u2502\n    \u2502 \u2502         type: REAL                                                                                      \u2502 \u2502\n    \u2502 \u2502 Table: management                                                                                       \u2502 \u2502\n    \u2502 \u2502     Column: department_ID                                                                               \u2502 \u2502\n    \u2502 \u2502         type: INTEGER                                                                                   \u2502 \u2502\n    \u2502 \u2502         foreign_key: {'table': 'department', 'column': 'Department_ID'}                                 \u2502 \u2502\n    \u2502 \u2502     Column: head_ID                                                                                     \u2502 \u2502\n    \u2502 \u2502         type: INTEGER                                                                                   \u2502 \u2502\n    \u2502 \u2502         foreign_key: {'table': 'head', 'column': 'head_ID'}                                             \u2502 \u2502\n    \u2502 \u2502     Column: temporary_acting                                                                            \u2502 \u2502\n    \u2502 \u2502         type: TEXT                                                                                      \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 I will give you a list of examples.                                                                     \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 I want to create a query for the following instruction:                                                 \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 What is the name of the department with the highest number of employees?                                \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 For this instruction, I was given the following JSON, which has some incorrect values.                  \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 {                                                                                                       \u2502 \u2502\n    \u2502 \u2502   \"generated_sql\": {                                                                                    \u2502 \u2502\n    \u2502 \u2502     \"incorrect_value\": \"SELECT name FROM departments ORDER BY num_employees DESC LIMIT 1\",              \u2502 \u2502\n    \u2502 \u2502     \"error_message\": \"(sqlite3.OperationalError) no such table: departments\\n[SQL: SELECT name FROM     \u2502 \u2502\n    \u2502 \u2502 departments ORDER BY num_employees DESC LIMIT 1]\\n(Background on this error at:                         \u2502 \u2502\n    \u2502 \u2502 https://sqlalche.me/e/20/e3q8)\"                                                                         \u2502 \u2502\n    \u2502 \u2502   }                                                                                                     \u2502 \u2502\n    \u2502 \u2502 }                                                                                                       \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2502 Help me correct the incorrect values based on the given error messages.                                 \u2502 \u2502\n    \u2502 \u2502                                                                                                         \u2502 \u2502\n    \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n    \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Raw LLM Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n    \u2502 \u2502 {\"generated_sql\": \"SELECT Name FROM department ORDER BY Num_Employees DESC LIMIT 1\"}                    \u2502 \u2502\n    \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n    \u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Validated Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n    \u2502 \u2502 {                                                                                                       \u2502 \u2502\n    \u2502 \u2502     'generated_sql': 'SELECT Name FROM department ORDER BY Num_Employees DESC LIMIT 1'                  \u2502 \u2502\n    \u2502 \u2502 }                                                                                                       \u2502 \u2502\n    \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n    \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</pre>"},{"location":"use_cases/text2sql/text2sql/#text-to-sql","title":"Text-to-SQL","text":"<p>The <code>Text2SQL</code> module is a demonstration of how to use Guardrails to build a text-to-SQL workflow. It implements necessary components to build a text-to-SQL workflow, including:</p> <ul> <li> Connects to your database</li> <li> Given a DB schema, supports SQL validation and error handling</li> <li> Finds relevant few shot examples of <code>text2SQL</code> history, and uses them to generate a prompt</li> <li> Optionally adds modules to guard against unsafe SQL (allowing INSERT, DROP, etc.)</li> <li> Supports reasking for all invalid SQL (SQL with syntax errors, SQL targeting non-existent tables, SQL with prohibited keywords, etc.)</li> </ul> <p>Info</p> <p>The <code>text2SQL</code> module is intended to showcase what an end-to-end <code>text2SQL</code> workflow looks like with Guardrails. As a developer, you can either use this module as a starting point for your own <code>text2SQL</code> workflow or you can use it as a reference for how to use Guardrails to build your own custom <code>text2SQL</code> workflow.</p>"},{"location":"use_cases/text2sql/text2sql/#why-use-guardrails-for-text-to-sql","title":"\ud83c\udfb1  Why use Guardrails for text-to-SQL?","text":"<ol> <li><code>bug-free-sql</code> validators: Guardrails provides a <code>bug-free-sql</code> validator that creates a sandboxed environment to run the generated SQL against your database and check for bugs and errors.</li> <li>Protection against unsafe SQL: Guardrails allows developers to constrain the generated SQL to a subset of SQL that is safe to run against your database. For example, you can configure Guardrails to only allow <code>SELECT</code> statements, and disallow <code>INSERT</code>, <code>DROP</code>, etc.</li> <li>Reasking: Guardrails allows you to configure reasking logic, so that if the generated SQL is invalid or has bugs, you can reask the LLM to generate a new SQL. Guardrails automatically handles the reasking logic for you.</li> </ol>"},{"location":"use_cases/text2sql/text2sql/#quickstart","title":"\ud83d\ude80 Quickstart","text":"<p>To get started, you'll need the following: 1. Either a connection string to your database or a database schema 2. (Optional) Dictionary of few shot examples of <code>text2SQL</code> history</p>"},{"location":"use_cases/text2sql/text2sql/#setup-database-connection-and-examples","title":"\ud83d\udcdd Setup database connection and examples","text":""},{"location":"use_cases/text2sql/text2sql/#use-text2sql-application","title":"\ud83d\udca1 Use Text2SQL Application","text":"<ul> <li>Sets up sandboxed DB based on your SQL schema / connection string</li> <li>Finds most relevant examples and inserts them into the prompt</li> <li>Checks that the query is valid for the schema</li> </ul>"},{"location":"use_cases/text2sql/text2sql/#demonstration-on-an-incorrect-output","title":"\u274e Demonstration on an incorrect output","text":"<p>Below is a demonstration of how Guardrails' <code>Text2SQL</code> module handles an incorrect output from the LLM. The LLM generates an SQL that has a syntax error, and Guardrails catches this error and reasks the LLM to generate a new SQL.</p> <p>The output is incorrect because it refers to a table (<code>departments</code>) that does not exist in the database. Guardrails catches this error and reasks the LLM to generate a new SQL.</p>"},{"location":"use_cases/text2sql/text2sql/#customizing-the-text2sql-module","title":"\u2692\ufe0f Customizing the <code>Text2SQL</code> module","text":"<p>You can customize the <code>Text2SQL</code> module to fit your needs. Here are some examples of how you can customize the module:</p> <ol> <li>Prompt: You can customize the <code>text2SQL</code> prompt by passing in a custom <code>RAIL</code> spec to the module in the <code>rail_spec</code> argument.</li> <li>Few shot examples: You can customize how the few shot examples are stored, retrieved, and inserted into the prompt by updating the arguments <code>vector_db</code>, <code>document_store</code>, <code>num_relevant_examples</code> and <code>example_formatter</code>.</li> <li>Reask prompt: You can customize the reask prompt by updating the <code>reask_prompt</code> argument.</li> <li>LLM API: You can customize the LLM API by updating the <code>llm_api</code> argument. To pass in specific kwargs to the LLM API, you can update the <code>llm_api_kwargs</code> argument (e.g. <code>llm_api_kwargs={'max_length': 100}</code>).</li> </ol>"}]}